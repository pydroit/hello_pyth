{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/diff-match-patch/index.js"],"names":["diff_match_patch","this","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","Diff","op","text","prototype","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","length","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","seed","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","data","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","matchmask","bin_min","bin_mid","bin_max","last_rd","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","expected_loc","start_loc","end_loc","index1","index2","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","toString","coords1","coords2","module","exports"],"mappings":"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","file":"2027.252f1a7f97fb36495885.js?v=252f1a7f97fb36495885","sourcesContent":["/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;"],"sourceRoot":""}