{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/json-stable-stringify/index.js","webpack://@jupyterlab/application-top/./node_modules/jsonify/index.js","webpack://@jupyterlab/application-top/./node_modules/jsonify/lib/parse.js","webpack://@jupyterlab/application-top/./node_modules/jsonify/lib/stringify.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/chunking/decisionchunking.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/chunking/diffchunking.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/chunking/index.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/common/collapsiblepanel.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/common/editor.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/common/exceptions.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/common/mergeview.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/common/util.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/diffentries.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/cell.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/common.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/immutable.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/index.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/notebook.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/output.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/renderable.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/model/string.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/range.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/util.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/cell.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/common.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/index.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/metadata.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/notebook.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/output.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/diff/widget/renderable.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/decisions.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/model/cell.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/model/common.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/model/index.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/model/metadata.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/model/notebook.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/patch/common.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/patch/generic.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/patch/index.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/patch/stringified.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/upstreaming/flexlayout.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/upstreaming/flexpanel.js"],"names":["json","JSON","isArray","Array","x","toString","call","objectKeys","Object","keys","obj","has","prototype","hasOwnProperty","key","push","module","exports","opts","cmp","space","join","cycles","replacer","value","f","node","a","b","aobj","bobj","seen","stringify","parent","level","indent","colonSeparator","toJSON","undefined","out","i","length","item","indexOf","TypeError","sort","keyValue","splice","parse","at","ch","escapee","n","r","t","text","error","m","name","message","next","c","charAt","number","num","str","Number","isFinite","string","hex","uffff","parseInt","String","fromCharCode","white","word","array","arr","object","source","reviver","result","walk","holder","k","v","val","escapable","gap","meta","rep","quote","lastIndex","test","replace","charCodeAt","slice","mind","partial","apply","Error","defineProperty","splitMergeDecisionsOnChunks","diffentries_1","decisions_1","util_1","anyDiffs","diffs","d","hasEntries","getSectionBoundaries","boundaries","e","j","op","filter","unique","splitDiffsOnBoundaries","newdiffs","valueIn","opRemoveRange","makeChunks","iDiffs","map","valueOf","chunks","subDiffs","dis","baseStart","baseEnd","makeMergeChunks","base","newBoundaries","concat","splitDiffs","splitDecisionByChunks","decision","cd","customDiff","localPath","pushPath","MergeDecision","absolutePath","action","conflict","decisions","md","buildDiffs","labelSource","lineToNormalChunks","LineChunker","Chunker","Chunk","constructor","baseFrom","baseTo","remoteFrom","remoteTo","this","sources","inEdit","line","inOrig","_currentGhost","editOffset","_getCurrent","_overlapChunk","chunk","range","isAddition","from","addDiff","linediff","to","endsOnNewline","firstLineNew","startOffset","chunkStartLine","endOffset","current","Math","max","startRemote","startBase","addGhost","offset","startEdit","startOrig","fromLine","lineChunks","ret","shallowCopy","diff","__createBinding","create","o","k2","enumerable","get","__exportStar","p","CollapsiblePanel","widgets_1","COLLAPSIBLE_CLASS","COLLAPSIBLE_HEADER","COLLAPSIBLE_HEADER_ICON","COLLAPSIBLE_HEADER_ICON_OPEN","COLLAPSIBLE_HEADER_ICON_CLOSED","COLLAPSIBLE_SLIDER","COLLAPSIBLE_OPEN","COLLAPSIBLE_CLOSED","COLLAPSIBLE_CONTAINER","Panel","inner","headerTitle","collapsed","super","addClass","header","createHeader","button","getElementsByClassName","onclick","toggleCollapsed","bind","addWidget","container","slider","classList","add","innerText","document","createElement","className","appendChild","removeClass","remove","hasClass","EditorWidget","codeeditor_1","codemirror_1","CodeEditorWrapper","options","readOnly","extraKeys","Tab","model","CodeEditor","Model","factory","CodeMirrorEditorFactory","newInlineEditor","staticLoaded","editors","cm","editor","doc","onResize","msg","width","height","setSize","getOption","contains","NotifyUserError","severity","setPrototypeOf","stack","MergeView","DiffView","createNbdimeMergeView","EventDirection","DIFF_OP","CodeMirror","model_1","chunking_1","editor_1","exceptions_1","PICKER_SYMBOL","CONFLICT_MARKER","GUTTER_PICKER_CLASS","GUTTER_CONFLICT_CLASS","CHUNK_CONFLICT_CLASS","leftClasses","start","end","insert","del","connect","gutter","rightClasses","mergeClassPrefix","remote","local","merged","orig","collapseIdentical","mergeview","left","right","merge","mimetype","ownWidget","mimeType","type","updateCallback","collapsedRanges","classes","ownValue","copyObj","showDifferences","init","baseEditor","state","diffViews","ownEditor","on","onGutterClick","getLineChunks","dealigned","forceUpdate","registerUpdate","setScrollLock","registerScroll","setShowDifferences","syncModel","modelInvalid","edit","updatedLineChunks","updatedChunks","getValue","cursor","getDoc","getCursor","newLines","splitLines","firstLine","last","lastLine","cumulativeOffset","updatedEnd","baseLine","getMatchingEditLine","replaceRange","Pos","size","setCursor","buildGap","lock","lockButton","elt","title","lockWrap","self","lockScroll","syncScroll","OUTGOING","innerHTML","editMarkers","origMarkers","debounceChange","updating","updatingFast","update","mode","clearMergeMarks","clearMarks","updateMarks","additions","DIFF_INSERT","deletions","DIFF_DELETE","checkSync","setDealign","fast","upd","dv","set","clearTimeout","window","setTimeout","change","_cm","DecisionStringDiffModel","invalid","instance","clickEvent","li","lineInfo","gutterMarkers","ss","s","setGutterMarker","invalidate","INCOMING","other","scrollSetBy","scrollPosition","getScrollInfo","scrollTicking","sInfo","top","requestAnimationFrame","scrollTo","markers","markChunk","si","addLineClass","picker","localDiff","remoteDiff","conflictMarker","cls","operation","highlightChars","postfix","isTextMarker","marker","mark","clear","removeLineClass","bgClass","ranges","origCls","markText","getMatchingEditLineLC","toMatch","editLine","findAlignedLines","dvs","linesToAlign","ignored","others","lines","prev","align","alignLines","aligners","maxOffset","off","heightAtLine","padAbove","above","style","minWidth","addLineWidget","initialized","panes","main","lineNumbers","dvOptions","gutters","lineWrapping","showBase","display","leftWidget","Widget","alignViews","rightWidget","mergeWidget","unchanged","added","deleted","collapseIdenticalStretches","force","scroll","ln","curOp","fn","getMergedValue","collapseSingle","widget","inclusiveLeft","inclusiveRight","replacedWith","clearOnEnter","collapseStretch","marks","unclearNearChunks","margin","l","pos","mv","onCollapse","tag","content","cssText","createTextNode","findPrevDiff","isOrig","findNextDiff","DiffDirection","goNearbyDiff","dir","found","views","Previous","Pass","commands","goNextDiff","Next","goPrevDiff","buildSelect","stableSort","intersection","accumulateLengths","repeatString","sortByKey","isPrefixArray","findSharedPrefix","arraysEqual","deepCopy","multiline","match","original","clone","getPrototypeOf","ok","Function","pDesc","getOwnPropertyDescriptor","min","child","y","count","pattern","reduce","index","ia","compare","sorters","target","prop","select","option","opt","validateObjectOp","validateSequenceOp","opPatch","opAddRange","opRemove","opAdd","opReplace","valuelist","entry","console","info","isNaN","RangeError","skip","createDeletedCellDiffModel","createAddedCellDiffModel","createUnchangedCellDiffModel","createPatchedCellDiffModel","CellDiffModel","nbformat","string_1","output_1","immutable_1","metadata","outputs","executionCount","cellType","collapsible","collapsibleHeader","startCollapsed","getChunkedOutputs","currentChunk","nbMimetype","subDiff","getSubDiffByKey","createPatchStringDiffModel","createDirectStringDiffModel","setMimetypeFromCellType","isCode","outputsBase","outputsDiff","makeOutputModels","execBase","execution_count","execDiff","getDiffEntryByKey","createImmutableModel","cell_type","ImmutableDiffModel","NotebookDiffModel","cell_1","metaDiff","language_info","cells","chunkedCells","take","previousChunkIndex","cell","ei","OutputDiffModel","renderable_1","TEXT_MIMETYPES","RenderableDiffModel","hasMimeType","isStream","isError","isExecuteResult","isDisplayData","data","innerMimeType","output_type","models","consumed","len","coreutils_1","signaling_1","patch_1","trustedChanged","Signal","patch","getMemberByPath","tail","baseCopy","JSONExt","remoteCopy","_trusted","emit","StringDiffModel","range_1","assert","raw2Pos","iterateDiffs","DiffIter","chunker","done","id","hintTakeDeletion","ra","rd","SyncedDiffIter","currentOffset","iterators","values","offsets","it","offsetA","offsetB","lineA","lineB","currentModel","baseStr","stringifyAndBlankNull","patchStringified","remoteStr","DiffRangeRaw","isRaw","format","DiffRangePos","findLineNumber","nlPos","lineNo","some","el","raws","adIdx","lineStartIdx","startsOnNewLine","chunkFirstLine","flattenStringDiff","stripSource","JSON_INDENT","validateStringDiff","lineToChar","flattened","lineOffset","pdiff","idx","CellDiffWidget","OUTPUTS_DIFF_CLASS","CELLDIFF_CLASS","rendermime_1","flexpanel_1","collapsiblepanel_1","mergeview_1","common_1","PROMPT_CLASS","EXECUTIONCOUNT_ROW_CLASS","SOURCE_ROW_CLASS","METADATA_ROW_CLASS","OUTPUTS_ROW_CLASS","rendermime","_model","_rendermime","CURR_DIFF_CLASSES","DIFF_CLASSES","ADDED_DIFF_CLASS","DELETED_DIFF_CLASS","UNCHANGED_DIFF_CLASS","TWOWAY_DIFF_CLASS","sourceView","createView","insertWidget","createPrompts","metadataView","changed","outputsWidget","chunkPanel","CHUNK_PANEL_CLASS","addedPanel","ADDED_CHUNK_PANEL_CLASS","removedPanel","REMOVED_CHUNK_PANEL_CLASS","collapser","prompts","FlexPanel","direction","w","setGrow","editorClasses","view","mimeModel","MimeModel","preferredMimeType","renderer","createRenderer","renderModel","OutputPanel","ADD_DEL_LABEL_CLASS","MetadataDiffWidget","ROOT_METADATA_CLASS","NotebookDiffWidget","metadata_1","NBDIFF_CLASS","work","Promise","resolve","then","RenderableOutputView","algorithm_1","OUTPUT_PANEL_CLASS","RENDERED_OUTPUT_CLASS","UNTRUSTED_CLASS","HOVER_MENU_CLASS","TRUST_BUTTON_CLASS","SOURCE_BUTTON_CLASS","DATA_IS_BASE64_CLASS","MIMETYPE_SELECT_CLASS","sanitizable","_base64","isBase64","minLength","parentModel","_mimetype","forceText","sender","trusted","isTrustSignificant","addSpacer","textContent","delSpacer","initContainer","createHoverMenu","replaceView","old","widgets","renderable","canRender","rov","selectedMimetype","createOutputTextView","find","mimeTypes","mt","stringModel","aValue","menu","btnSource","sourceText","ev","updateView","btnTrust","mimetypes","output","contents","bundle","OutputModel","getData","cboMimetype","selectedIndex","onchange","mtLabel","toTest","untrustedModel","modelMimeTypes","rendererMimeTypes","toArray","candidates","getFactory","safe","RenderableDiffView","editorClass","createSubView","panel","RenderedOutputWidget","each","layout","dispose","bdata","rdata","PanelLayout","ci","filterDecisions","pushPatchDecision","applyDecisions","resolveCommonPaths","popPath","addSorted","decisionSortKey","decisionPathSortKey","util_2","validateAction","valueOrDefault","defaultValue","similarInsert","_path","common_path","local_diff","remote_diff","custom_diff","similar_insert","setValuesFrom","serialize","lvl","toAdd","firstKey","popInner","di","log","dj","retDiffs","prefix","reverse","path","popped","makeClearedValue","_resolvePathInObject","_combineDiffs","resolveAction","splitDiffStringPath","prevPath","lastKey","resolved","clearParent","spl","ad","_mergeTree","tree","sortedPaths","trunk","root","subdiffs","nextPath","newTrunk","pl","which","sub","strPath","matchDiff","dec","pop","ld","skipLevels","maxLength","CellMergeModel","createPatchedCellDecisionDiffModel","outputBase","outputDec","mergedDiff","cellDecs","mergeExecDiff","ObjectMergeModel","deleteCellChanged","_clearOutputs","clearOutputsChanged","onesided","_deleteCell","processDecisions","lo","ro","agreedSource","agreedMetadata","agreedOutputs","hasConflictsOn","decs","clearOutputConflicts","getExecutionCountDecision","deleteCell","nmd","src","_merged","warn","clearOutputs","applyCellLevelDecision","splitDec","subDecisions","splitPatch","subdec","newDecisions","_local","first","_remote","ops","localPatch","remotePatch","split","patchKey","_whitelist","er","onsesided","splitOnSourceChunks","createDiffModel","createMergedDiffModel","sourceModels","rawBase","_outdated","_sourceModels","_update","_additions","_deletions","iter","whitelist","_finalized","_finalizeDecisions","MetadataMergeModel","NotebookMergeModel","rawMergeDecisions","ctor","preprocessDecisions","buildCellList","metadataDecs","unsavedChanges","mergeDecisions","rmd","splitCellChunks","splitCellRemovals","splitCellInsertions","splitCellListPatch","nb","cellDecisions","bc","insertOffset","insertion","offsetIdx","cds","cellInfo","isChunk","lmd","dl","dr","maxlen","subdl","subdr","makeSplitPart","newMd","newDiff","klStart","krStart","klEnd","krEnd","remLocal","rOp","pOp","pidx","correctType","eq","part","PatchObjectHelper","_diffLUT","diffKeys","_diffKeys","baseKeys","_objectKeys","isDiffKey","getDiffEntry","entriesAfterCurrentAddRem","_currentIsAddition","oppositeOp","_remainingKeys","shift","stringified_1","patchString","patchSequence","patchObject","patched","keysToCopy","stableStringify","indentFirst","_indent","stringifyPatch","patchStringifiedList","patchStringifiedObject","baseIndex","_offsetRanges","_adjustRangesByJSONEscapes","helper","keyString","_makeKeyString","isReplace","valr","valb","pd","difflen","levels","jsonString","simpleEscapes","surrogateUnicodes","unicodes","SIMPLE_ESCAPE_LENGTH","UNICODE_ESCAPE_LENGTH","SURROGATE_ESCAPE_LENGTH","indices","expansions","exec","exp","FlexLayout","messaging_1","LEFT_TO_RIGHT_CLASS","RIGHT_TO_LEFT_CLASS","TOP_TO_BOTTOM_CLASS","BOTTOM_TO_TOP_CLASS","order","_wrap","_minimumSpacing","_justifyContent","_alignItems","_alignContent","_dirty","_direction","_stretchType","_evenSizes","minimumSpacing","Private","clampSpacing","wrap","justifyContent","alignItems","alignContent","stretchType","evenSizes","toggleDirection","fit","flexWrap","flex","translateFlexString","isHorizontal","isVertical","attachWidget","ArrayExt","moveWidget","fromIndex","toIndex","move","detachWidget","removeAt","onAfterShow","onAfterAttach","onChildShown","onChildHidden","isVisible","onUpdateRequest","onFitRequest","isAttached","_fit","ancestor","MessageLoop","sendMessage","Msg","FitRequest","UpdateRequest","spacing","marginRight","marginBottom","basis","grow","shrink","flexBasis","flexGrow","flexShrink","getGrow","getShrink","setShrink","getSizeBasis","setSizeBasis","toggleClass","floor","flexlayout_1","FLEX_PANEL_CLASS","CHILD_CLASS","createLayout","onChildAdded","onChildRemoved"],"mappings":"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","file":"7842.4ffbf1e30cc4edb84325.js?v=4ffbf1e30cc4edb84325","sourcesContent":["'use strict';\n\nvar json = typeof JSON !== 'undefined' ? JSON : require('jsonify');\n\nvar isArray = Array.isArray || function (x) {\n\treturn {}.toString.call(x) === '[object Array]';\n};\n\nvar objectKeys = Object.keys || function (obj) {\n\tvar has = Object.prototype.hasOwnProperty || function () { return true; };\n\tvar keys = [];\n\tfor (var key in obj) {\n\t\tif (has.call(obj, key)) { keys.push(key); }\n\t}\n\treturn keys;\n};\n\nmodule.exports = function (obj, opts) {\n\tif (!opts) { opts = {}; }\n\tif (typeof opts === 'function') { opts = { cmp: opts }; }\n\tvar space = opts.space || '';\n\tif (typeof space === 'number') { space = Array(space + 1).join(' '); }\n\tvar cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;\n\tvar replacer = opts.replacer || function (key, value) { return value; };\n\n\tvar cmp = opts.cmp && (function (f) {\n\t\treturn function (node) {\n\t\t\treturn function (a, b) {\n\t\t\t\tvar aobj = { key: a, value: node[a] };\n\t\t\t\tvar bobj = { key: b, value: node[b] };\n\t\t\t\treturn f(aobj, bobj);\n\t\t\t};\n\t\t};\n\t}(opts.cmp));\n\n\tvar seen = [];\n\treturn (function stringify(parent, key, node, level) {\n\t\tvar indent = space ? '\\n' + new Array(level + 1).join(space) : '';\n\t\tvar colonSeparator = space ? ': ' : ':';\n\n\t\tif (node && node.toJSON && typeof node.toJSON === 'function') {\n\t\t\tnode = node.toJSON();\n\t\t}\n\n\t\tnode = replacer.call(parent, key, node);\n\n\t\tif (node === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tif (typeof node !== 'object' || node === null) {\n\t\t\treturn json.stringify(node);\n\t\t}\n\t\tif (isArray(node)) {\n\t\t\tvar out = [];\n\t\t\tfor (var i = 0; i < node.length; i++) {\n\t\t\t\tvar item = stringify(node, i, node[i], level + 1) || json.stringify(null);\n\t\t\t\tout.push(indent + space + item);\n\t\t\t}\n\t\t\treturn '[' + out.join(',') + indent + ']';\n\t\t}\n\n\t\tif (seen.indexOf(node) !== -1) {\n\t\t\tif (cycles) { return json.stringify('__cycle__'); }\n\t\t\tthrow new TypeError('Converting circular structure to JSON');\n\t\t} else { seen.push(node); }\n\n\t\tvar keys = objectKeys(node).sort(cmp && cmp(node));\n\t\tvar out = [];\n\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\tvar key = keys[i];\n\t\t\tvar value = stringify(node, key, node[key], level + 1);\n\n\t\t\tif (!value) { continue; }\n\n\t\t\tvar keyValue = json.stringify(key)\n\t\t\t\t\t+ colonSeparator\n\t\t\t\t\t+ value;\n\n\t\t\tout.push(indent + space + keyValue);\n\t\t}\n\t\tseen.splice(seen.indexOf(node), 1);\n\t\treturn '{' + out.join(',') + indent + '}';\n\n\t}({ '': obj }, '', obj, 0));\n};\n","'use strict';\n\nexports.parse = require('./lib/parse');\nexports.stringify = require('./lib/stringify');\n","'use strict';\n\nvar at; // The index of the current character\nvar ch; // The current character\nvar escapee = {\n\t'\"': '\"',\n\t'\\\\': '\\\\',\n\t'/': '/',\n\tb: '\\b',\n\tf: '\\f',\n\tn: '\\n',\n\tr: '\\r',\n\tt: '\\t'\n};\nvar text;\n\n// Call error when something is wrong.\nfunction error(m) {\n\tthrow {\n\t\tname: 'SyntaxError',\n\t\tmessage: m,\n\t\tat: at,\n\t\ttext: text\n\t};\n}\n\nfunction next(c) {\n\t// If a c parameter is provided, verify that it matches the current character.\n\tif (c && c !== ch) {\n\t\terror(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n\t}\n\n\t// Get the next character. When there are no more characters, return the empty string.\n\n\tch = text.charAt(at);\n\tat += 1;\n\treturn ch;\n}\n\nfunction number() {\n\t// Parse a number value.\n\tvar num;\n\tvar str = '';\n\n\tif (ch === '-') {\n\t\tstr = '-';\n\t\tnext('-');\n\t}\n\twhile (ch >= '0' && ch <= '9') {\n\t\tstr += ch;\n\t\tnext();\n\t}\n\tif (ch === '.') {\n\t\tstr += '.';\n\t\twhile (next() && ch >= '0' && ch <= '9') {\n\t\t\tstr += ch;\n\t\t}\n\t}\n\tif (ch === 'e' || ch === 'E') {\n\t\tstr += ch;\n\t\tnext();\n\t\tif (ch === '-' || ch === '+') {\n\t\t\tstr += ch;\n\t\t\tnext();\n\t\t}\n\t\twhile (ch >= '0' && ch <= '9') {\n\t\t\tstr += ch;\n\t\t\tnext();\n\t\t}\n\t}\n\tnum = Number(str);\n\tif (!isFinite(num)) {\n\t\terror('Bad number');\n\t}\n\treturn num;\n}\n\nfunction string() {\n\t// Parse a string value.\n\tvar hex;\n\tvar i;\n\tvar str = '';\n\tvar uffff;\n\n\t// When parsing for string values, we must look for \" and \\ characters.\n\tif (ch === '\"') {\n\t\twhile (next()) {\n\t\t\tif (ch === '\"') {\n\t\t\t\tnext();\n\t\t\t\treturn str;\n\t\t\t} else if (ch === '\\\\') {\n\t\t\t\tnext();\n\t\t\t\tif (ch === 'u') {\n\t\t\t\t\tuffff = 0;\n\t\t\t\t\tfor (i = 0; i < 4; i += 1) {\n\t\t\t\t\t\thex = parseInt(next(), 16);\n\t\t\t\t\t\tif (!isFinite(hex)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuffff = (uffff * 16) + hex;\n\t\t\t\t\t}\n\t\t\t\t\tstr += String.fromCharCode(uffff);\n\t\t\t\t} else if (typeof escapee[ch] === 'string') {\n\t\t\t\t\tstr += escapee[ch];\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr += ch;\n\t\t\t}\n\t\t}\n\t}\n\terror('Bad string');\n}\n\n// Skip whitespace.\nfunction white() {\n\twhile (ch && ch <= ' ') {\n\t\tnext();\n\t}\n}\n\n// true, false, or null.\nfunction word() {\n\tswitch (ch) {\n\t\tcase 't':\n\t\t\tnext('t');\n\t\t\tnext('r');\n\t\t\tnext('u');\n\t\t\tnext('e');\n\t\t\treturn true;\n\t\tcase 'f':\n\t\t\tnext('f');\n\t\t\tnext('a');\n\t\t\tnext('l');\n\t\t\tnext('s');\n\t\t\tnext('e');\n\t\t\treturn false;\n\t\tcase 'n':\n\t\t\tnext('n');\n\t\t\tnext('u');\n\t\t\tnext('l');\n\t\t\tnext('l');\n\t\t\treturn null;\n\t\tdefault:\n\t\t\terror(\"Unexpected '\" + ch + \"'\");\n\t}\n}\n\n// Parse an array value.\nfunction array() {\n\tvar arr = [];\n\n\tif (ch === '[') {\n\t\tnext('[');\n\t\twhite();\n\t\tif (ch === ']') {\n\t\t\tnext(']');\n\t\t\treturn arr; // empty array\n\t\t}\n\t\twhile (ch) {\n\t\t\tarr.push(value()); // eslint-disable-line no-use-before-define\n\t\t\twhite();\n\t\t\tif (ch === ']') {\n\t\t\t\tnext(']');\n\t\t\t\treturn arr;\n\t\t\t}\n\t\t\tnext(',');\n\t\t\twhite();\n\t\t}\n\t}\n\terror('Bad array');\n}\n\n// Parse an object value.\nfunction object() {\n\tvar key;\n\tvar obj = {};\n\n\tif (ch === '{') {\n\t\tnext('{');\n\t\twhite();\n\t\tif (ch === '}') {\n\t\t\tnext('}');\n\t\t\treturn obj; // empty object\n\t\t}\n\t\twhile (ch) {\n\t\t\tkey = string();\n\t\t\twhite();\n\t\t\tnext(':');\n\t\t\tif (Object.prototype.hasOwnProperty.call(obj, key)) {\n\t\t\t\terror('Duplicate key \"' + key + '\"');\n\t\t\t}\n\t\t\tobj[key] = value(); // eslint-disable-line no-use-before-define\n\t\t\twhite();\n\t\t\tif (ch === '}') {\n\t\t\t\tnext('}');\n\t\t\t\treturn obj;\n\t\t\t}\n\t\t\tnext(',');\n\t\t\twhite();\n\t\t}\n\t}\n\terror('Bad object');\n}\n\n// Parse a JSON value. It could be an object, an array, a string, a number, or a word.\nfunction value() {\n\twhite();\n\tswitch (ch) {\n\t\tcase '{':\n\t\t\treturn object();\n\t\tcase '[':\n\t\t\treturn array();\n\t\tcase '\"':\n\t\t\treturn string();\n\t\tcase '-':\n\t\t\treturn number();\n\t\tdefault:\n\t\t\treturn ch >= '0' && ch <= '9' ? number() : word();\n\t}\n}\n\n// Return the json_parse function. It will have access to all of the above functions and variables.\nmodule.exports = function (source, reviver) {\n\tvar result;\n\n\ttext = source;\n\tat = 0;\n\tch = ' ';\n\tresult = value();\n\twhite();\n\tif (ch) {\n\t\terror('Syntax error');\n\t}\n\n\t// If there is a reviver function, we recursively walk the new structure,\n\t// passing each name/value pair to the reviver function for possible\n\t// transformation, starting with a temporary root object that holds the result\n\t// in an empty key. If there is not a reviver function, we simply return the\n\t// result.\n\n\treturn typeof reviver === 'function' ? (function walk(holder, key) {\n\t\tvar k;\n\t\tvar v;\n\t\tvar val = holder[key];\n\t\tif (val && typeof val === 'object') {\n\t\t\tfor (k in value) {\n\t\t\t\tif (Object.prototype.hasOwnProperty.call(val, k)) {\n\t\t\t\t\tv = walk(val, k);\n\t\t\t\t\tif (typeof v === 'undefined') {\n\t\t\t\t\t\tdelete val[k];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tval[k] = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn reviver.call(holder, key, val);\n\t}({ '': result }, '')) : result;\n};\n","'use strict';\n\nvar escapable = /[\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\nvar gap;\nvar indent;\nvar meta = { // table of character substitutions\n\t'\\b': '\\\\b',\n\t'\\t': '\\\\t',\n\t'\\n': '\\\\n',\n\t'\\f': '\\\\f',\n\t'\\r': '\\\\r',\n\t'\"': '\\\\\"',\n\t'\\\\': '\\\\\\\\'\n};\nvar rep;\n\nfunction quote(string) {\n\t// If the string contains no control characters, no quote characters, and no\n\t// backslash characters, then we can safely slap some quotes around it.\n\t// Otherwise we must also replace the offending characters with safe escape sequences.\n\n\tescapable.lastIndex = 0;\n\treturn escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n\t\tvar c = meta[a];\n\t\treturn typeof c === 'string' ? c\n\t\t\t: '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n\t}) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n\t// Produce a string from holder[key].\n\tvar i; // The loop counter.\n\tvar k; // The member key.\n\tvar v; // The member value.\n\tvar length;\n\tvar mind = gap;\n\tvar partial;\n\tvar value = holder[key];\n\n\t// If the value has a toJSON method, call it to obtain a replacement value.\n\tif (value && typeof value === 'object' && typeof value.toJSON === 'function') {\n\t\tvalue = value.toJSON(key);\n\t}\n\n\t// If we were called with a replacer function, then call the replacer to obtain a replacement value.\n\tif (typeof rep === 'function') {\n\t\tvalue = rep.call(holder, key, value);\n\t}\n\n\t// What happens next depends on the value's type.\n\tswitch (typeof value) {\n\t\tcase 'string':\n\t\t\treturn quote(value);\n\n\t\tcase 'number':\n\t\t\t// JSON numbers must be finite. Encode non-finite numbers as null.\n\t\t\treturn isFinite(value) ? String(value) : 'null';\n\n\t\tcase 'boolean':\n\t\tcase 'null':\n\t\t\t// If the value is a boolean or null, convert it to a string. Note:\n\t\t\t// typeof null does not produce 'null'. The case is included here in\n\t\t\t// the remote chance that this gets fixed someday.\n\t\t\treturn String(value);\n\n\t\tcase 'object':\n\t\t\tif (!value) {\n\t\t\t\treturn 'null';\n\t\t\t}\n\t\t\tgap += indent;\n\t\t\tpartial = [];\n\n\t\t\t// Array.isArray\n\t\t\tif (Object.prototype.toString.apply(value) === '[object Array]') {\n\t\t\t\tlength = value.length;\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tpartial[i] = str(i, value) || 'null';\n\t\t\t\t}\n\n\t\t\t\t// Join all of the elements together, separated with commas, and wrap them in brackets.\n\t\t\t\tv = partial.length === 0 ? '[]' : gap\n\t\t\t\t\t? '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']'\n\t\t\t\t\t: '[' + partial.join(',') + ']';\n\t\t\t\tgap = mind;\n\t\t\t\treturn v;\n\t\t\t}\n\n\t\t\t// If the replacer is an array, use it to select the members to be stringified.\n\t\t\tif (rep && typeof rep === 'object') {\n\t\t\t\tlength = rep.length;\n\t\t\t\tfor (i = 0; i < length; i += 1) {\n\t\t\t\t\tk = rep[i];\n\t\t\t\t\tif (typeof k === 'string') {\n\t\t\t\t\t\tv = str(k, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tpartial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Otherwise, iterate through all of the keys in the object.\n\t\t\t\tfor (k in value) {\n\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(value, k)) {\n\t\t\t\t\t\tv = str(k, value);\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tpartial.push(quote(k) + (gap ? ': ' : ':') + v);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Join all of the member texts together, separated with commas, and wrap them in braces.\n\n\t\t\tv = partial.length === 0 ? '{}' : gap\n\t\t\t\t? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n\t\t\t\t: '{' + partial.join(',') + '}';\n\t\t\tgap = mind;\n\t\t\treturn v;\n\t\tdefault:\n\t}\n}\n\nmodule.exports = function (value, replacer, space) {\n\tvar i;\n\tgap = '';\n\tindent = '';\n\n\t// If the space parameter is a number, make an indent string containing that many spaces.\n\tif (typeof space === 'number') {\n\t\tfor (i = 0; i < space; i += 1) {\n\t\t\tindent += ' ';\n\t\t}\n\t} else if (typeof space === 'string') {\n\t\t// If the space parameter is a string, it will be used as the indent string.\n\t\tindent = space;\n\t}\n\n\t// If there is a replacer, it must be a function or an array. Otherwise, throw an error.\n\trep = replacer;\n\tif (\n\t\treplacer\n\t\t&& typeof replacer !== 'function'\n\t\t&& (typeof replacer !== 'object' || typeof replacer.length !== 'number')\n\t) {\n\t\tthrow new Error('JSON.stringify');\n\t}\n\n\t// Make a fake root object containing our value under the key of ''.\n\t// Return the result of stringifying the value.\n\treturn str('', { '': value });\n};\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.splitMergeDecisionsOnChunks = void 0;\r\nconst diffentries_1 = require(\"../diff/diffentries\");\r\nconst decisions_1 = require(\"../merge/decisions\");\r\nconst util_1 = require(\"../common/util\");\r\nfunction anyDiffs(diffs) {\r\n    for (let d of diffs) {\r\n        if (util_1.hasEntries(d)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction getSectionBoundaries(diffs) {\r\n    let boundaries = [];\r\n    for (let e of diffs) {\r\n        let j = e.key;\r\n        let k;\r\n        boundaries.push(j);\r\n        if (e.op === 'addrange') {\r\n            // Pass\r\n        }\r\n        else if (e.op === 'removerange') {\r\n            k = j + e.length;\r\n            boundaries.push(k);\r\n        }\r\n        else if (e.op === 'patch') {\r\n            k = j + 1;\r\n            boundaries.push(k);\r\n        }\r\n    }\r\n    return boundaries.filter(util_1.unique);\r\n}\r\nfunction splitDiffsOnBoundaries(diffs, boundaries) {\r\n    let newdiffs = [];\r\n    if (!Array.isArray(boundaries)) {\r\n        throw new Error();\r\n    }\r\n    // Next relevant boundary index\r\n    let b = 0;\r\n    for (let e of diffs) {\r\n        if (util_1.valueIn(e.op, ['addrange', 'patch'])) {\r\n            // Nothing to split\r\n            newdiffs.push(e);\r\n        }\r\n        else if (e.op === 'removerange') {\r\n            // Skip boundaries smaller than key\r\n            while (boundaries[b] < e.key) {\r\n                b += 1;\r\n            }\r\n            // key should be included in the boundaries\r\n            if (boundaries[b] !== e.key) {\r\n                throw new Error();\r\n            }\r\n            // Add diff entries for each interval between boundaries up to k\r\n            while (b < boundaries.length - 1 && boundaries[b + 1] <= e.key + e.length) {\r\n                newdiffs.push(diffentries_1.opRemoveRange(boundaries[b], boundaries[b + 1] - boundaries[b]));\r\n                b += 1;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Unhandled diff entry op ' + e.op);\r\n        }\r\n    }\r\n    return newdiffs;\r\n}\r\n/**\r\n * Make list of chunks on the form (j, k, diffs0, diffs1, ..., diffsN),\r\n * where `j` and `k` are line numbers in the base, and the `diffsX`\r\n * entries are subsets from `diffs` that are part of the chunk.\r\n\r\n * Because the diff entries have been split on the union of\r\n * begin/end boundaries of all diff entries, the keys of\r\n * diff entries on each side will always match a boundary\r\n * exactly. The only situation where multiple diff entries\r\n * on one side matches a boundary is when add/remove or\r\n * add/patch pairs occur, i.e. when inserting something\r\n * just before an item that is removed or modified.\r\n */\r\nfunction makeChunks(boundaries, diffs) {\r\n    let iDiffs = Array.apply(null, Array(diffs.length)).map(Number.prototype.valueOf, 0);\r\n    let chunks = [];\r\n    for (let i = 0; i < boundaries.length; ++i) {\r\n        // Find span of next chunk\r\n        let j = boundaries[i];\r\n        let k = (i < boundaries.length - 1) ? boundaries[i + 1] : j;\r\n        // Collect diff entries from each side\r\n        // starting at beginning of this chunk\r\n        let subDiffs = [];\r\n        for (let m = 0; m < diffs.length; ++m) {\r\n            let d = diffs[m];\r\n            let dis = [];\r\n            while (d && iDiffs[m] < d.length && d[iDiffs[m]].key === j) {\r\n                dis.push(d[iDiffs[m]]);\r\n                iDiffs[m] += 1;\r\n            }\r\n            subDiffs.push(dis);\r\n        }\r\n        // Add non-empty chunks\r\n        if (anyDiffs(subDiffs)) {\r\n            let c = { baseStart: j, baseEnd: k, diffs: subDiffs };\r\n            chunks.push(c);\r\n        }\r\n    }\r\n    return chunks;\r\n}\r\n/**\r\n * Return list of chunks (i, j, d0, d1, ..., dn) where dX are\r\n *  lists of diff entries affecting the range base[i:j].\r\n *\r\n *  If d0 and d1 are both empty the chunk is not modified.\r\n *\r\n *  Includes full range 0:len(base).\r\n *\r\n *  Each diff list contains either 0, 1, or 2 entries,\r\n *  in case of 2 entries the first will be an insert\r\n *  at i (the beginning of the range) and the other a\r\n *  removerange or patch covering the full range i:j.\r\n */\r\nfunction makeMergeChunks(base, diffs) {\r\n    // Split diffs on union of diff entry boundaries such that\r\n    // no diff entry overlaps with more than one other entry.\r\n    // Including 0,N makes loop over chunks cleaner.\r\n    let boundaries = [0, base.length];\r\n    for (let d of diffs) {\r\n        if (util_1.hasEntries(d)) {\r\n            let newBoundaries = getSectionBoundaries(d);\r\n            boundaries = boundaries.concat(newBoundaries);\r\n        }\r\n    }\r\n    boundaries = boundaries.filter(util_1.unique).sort();\r\n    let splitDiffs = [];\r\n    for (let d of diffs) {\r\n        if (util_1.hasEntries(d)) {\r\n            splitDiffs.push(splitDiffsOnBoundaries(d, boundaries));\r\n        }\r\n        else {\r\n            splitDiffs.push(d);\r\n        }\r\n    }\r\n    // Make list of chunks on the form (j, k, diffs)\r\n    let chunks = makeChunks(boundaries, splitDiffs);\r\n    return chunks;\r\n}\r\nfunction splitDecisionByChunks(base, decision, chunks) {\r\n    if (chunks.length < 2) {\r\n        return [decision];\r\n    }\r\n    let out = [];\r\n    for (let c of chunks) {\r\n        let cd = decision.customDiff;\r\n        if (util_1.hasEntries(cd)) {\r\n            if (decision.localPath.length > 0) {\r\n                cd = decisions_1.pushPath(cd, decision.localPath);\r\n            }\r\n            // Split custom diff according to chunk lines\r\n            let boundaries = [0, base.length, c.baseStart, c.baseEnd].filter(util_1.unique).sort();\r\n            cd = splitDiffsOnBoundaries(cd, boundaries);\r\n        }\r\n        out.push(new decisions_1.MergeDecision(decision.absolutePath.slice(), c.diffs[0], c.diffs[1], decision.action, decision.conflict));\r\n    }\r\n    return out;\r\n}\r\nfunction splitMergeDecisionsOnChunks(base, decisions) {\r\n    let out = [];\r\n    for (let md of decisions) {\r\n        let diffs = [\r\n            decisions_1.buildDiffs(base, [md], 'local'),\r\n            decisions_1.buildDiffs(base, [md], 'remote')\r\n        ];\r\n        let chunks = makeMergeChunks(base, diffs);\r\n        out = out.concat(splitDecisionByChunks(base, md, chunks));\r\n    }\r\n    return out;\r\n}\r\nexports.splitMergeDecisionsOnChunks = splitMergeDecisionsOnChunks;\r\n//# sourceMappingURL=decisionchunking.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.labelSource = exports.lineToNormalChunks = exports.LineChunker = exports.Chunker = exports.Chunk = void 0;\r\nconst util_1 = require(\"../common/util\");\r\n/**\r\n * A chunk is a range of lines in a string based diff\r\n * that logically belong together.\r\n *\r\n * Chunks can be used for:\r\n *  - Correlating diff entries in the base and remote, e.g.\r\n *    for aligning lines in two editors.\r\n *  - Finding parts of the unchanged text that are not needed\r\n *    as context (can be hidden)\r\n *  - Navigating a diff (\"Go to next diff\")\r\n */\r\nclass Chunk {\r\n    constructor(baseFrom, baseTo, remoteFrom, remoteTo, source) {\r\n        this.baseFrom = baseFrom;\r\n        this.baseTo = baseTo;\r\n        this.remoteFrom = remoteFrom;\r\n        this.remoteTo = remoteTo;\r\n        this.sources = source ? [source] : [];\r\n    }\r\n    /**\r\n     * Checks whether the given line number is within the range spanned by editFrom - editTo\r\n     */\r\n    inEdit(line) {\r\n        return line >= this.baseFrom && line <= this.baseTo;\r\n    }\r\n    /**\r\n     * Checks whether the given line number is within the range spanned by origFrom - origTo\r\n     */\r\n    inOrig(line) {\r\n        return line >= this.remoteFrom && line <= this.remoteTo;\r\n    }\r\n}\r\nexports.Chunk = Chunk;\r\n;\r\nclass Chunker {\r\n    constructor() {\r\n        this._currentGhost = null;\r\n        this.chunks = [];\r\n        this.editOffset = 0;\r\n    }\r\n    _getCurrent() {\r\n        if (this._currentGhost) {\r\n            this._currentGhost = null;\r\n            return null;\r\n        }\r\n        return this.chunks.length > 0 ? this.chunks[this.chunks.length - 1] : null;\r\n    }\r\n    _overlapChunk(chunk, range, isAddition) {\r\n        if (isAddition) {\r\n            return chunk.inOrig(range.from.line);\r\n        }\r\n        else {\r\n            return chunk.inEdit(range.from.line);\r\n        }\r\n    }\r\n    addDiff(range, isAddition) {\r\n        let linediff = range.to.line - range.from.line;\r\n        if (range.endsOnNewline) {\r\n            linediff += 1;\r\n        }\r\n        const firstLineNew = range.from.ch === 0 && linediff > 0;\r\n        const startOffset = range.chunkStartLine ? 0 : 1;\r\n        const endOffset = range.chunkStartLine && range.endsOnNewline && firstLineNew ?\r\n            0 : 1;\r\n        let current = this._getCurrent();\r\n        if (current) {\r\n            // Have existing chunk, check for overlap\r\n            if (isAddition) {\r\n                if (this._overlapChunk(current, range, isAddition)) {\r\n                    current.remoteTo = Math.max(current.remoteTo, range.from.line + endOffset + linediff);\r\n                    current.baseTo = Math.max(current.baseTo, range.from.line + endOffset + this.editOffset);\r\n                    if (range.source && !util_1.valueIn(range.source, current.sources)) {\r\n                        current.sources.push(range.source);\r\n                    }\r\n                }\r\n                else {\r\n                    // No overlap with chunk, start new one\r\n                    current = null;\r\n                }\r\n            }\r\n            else {\r\n                if (this._overlapChunk(current, range, isAddition)) {\r\n                    current.remoteTo = Math.max(current.remoteTo, range.from.line + endOffset - this.editOffset);\r\n                    current.baseTo = Math.max(current.baseTo, range.from.line + endOffset + linediff);\r\n                    if (range.source && !util_1.valueIn(range.source, current.sources)) {\r\n                        current.sources.push(range.source);\r\n                    }\r\n                }\r\n                else {\r\n                    // No overlap with chunk, start new one\r\n                    current = null;\r\n                }\r\n            }\r\n        }\r\n        if (!current) {\r\n            // No current chunk, start a new one\r\n            if (isAddition) {\r\n                let startRemote = range.from.line;\r\n                let startBase = startRemote + this.editOffset;\r\n                current = new Chunk(startBase + startOffset, startBase + endOffset, startRemote + startOffset, startRemote + endOffset + linediff);\r\n            }\r\n            else {\r\n                let startBase = range.from.line;\r\n                let startRemote = startBase - this.editOffset;\r\n                current = new Chunk(startBase + startOffset, startBase + endOffset + linediff, startRemote + startOffset, startRemote + endOffset);\r\n            }\r\n            if (range.source) {\r\n                current.sources.push(range.source);\r\n            }\r\n            this.chunks.push(current);\r\n        }\r\n        current.sources = current.sources.filter(util_1.unique);\r\n        this.editOffset += isAddition ? -linediff : linediff;\r\n    }\r\n    /**\r\n     * Chunk a region where changes will occur if a currently unapplied diff were\r\n     * applied.\r\n     */\r\n    addGhost(range, isAddition, offset) {\r\n        // Do a one-to-one chunk as base\r\n        let linediff = range.to.line - range.from.line;\r\n        if (range.endsOnNewline) {\r\n            linediff += 1;\r\n        }\r\n        let firstLineNew = range.from.ch === 0 && linediff > 0;\r\n        let startOffset = range.chunkStartLine ? 0 : 1;\r\n        let endOffset = range.chunkStartLine && range.endsOnNewline && firstLineNew ?\r\n            0 : 1;\r\n        if (!isAddition) {\r\n            endOffset += linediff;\r\n        }\r\n        let current = this._currentGhost;\r\n        // Subtract offset from other editor\r\n        let startEdit = range.from.line + (isAddition ? offset : 0);\r\n        if (current) {\r\n            // Have existing chunk, check for overlap\r\n            let startOrig = startEdit - this.editOffset;\r\n            if (current.baseTo > startEdit) {\r\n                current.remoteTo = Math.max(current.remoteTo, startOrig + endOffset);\r\n                current.baseTo = Math.max(current.baseTo, startEdit + endOffset);\r\n                if (range.source && !util_1.valueIn(range.source, current.sources)) {\r\n                    current.sources.push(range.source);\r\n                }\r\n            }\r\n            else {\r\n                // No overlap with chunk, start new one\r\n                current = null;\r\n            }\r\n        }\r\n        if (!current) {\r\n            let startOrig = startEdit - this.editOffset;\r\n            current = new Chunk(startEdit + startOffset, startEdit + endOffset, startOrig + startOffset, startOrig + endOffset);\r\n            if (range.source) {\r\n                current.sources.push(range.source);\r\n            }\r\n            this.chunks.push(current);\r\n        }\r\n        this._currentGhost = current;\r\n        current.sources = current.sources.filter(util_1.unique);\r\n        // this._doAdd(range, isAddition);\r\n    }\r\n}\r\nexports.Chunker = Chunker;\r\n/**\r\n * A chunker that only chunks diffs within lines with each other\r\n *\r\n * While the default chunker would chunk together a change at the end of one\r\n * line with a change at the start of the next line, this chunker will keep\r\n * each line separate. This is useful e.g. for merging.\r\n */\r\nclass LineChunker extends Chunker {\r\n    _overlapChunk(chunk, range, isAddition) {\r\n        let fromLine = range.from.line;\r\n        if (chunk.baseFrom !== chunk.baseTo || chunk.remoteFrom >= chunk.remoteTo) {\r\n            // Ensure aligned addition/removal on same line\r\n            // still chunk together\r\n            fromLine += 1;\r\n        }\r\n        if (isAddition) {\r\n            return chunk.inOrig(fromLine);\r\n        }\r\n        else {\r\n            return chunk.inEdit(fromLine);\r\n        }\r\n    }\r\n}\r\nexports.LineChunker = LineChunker;\r\n/**\r\n * Transform an array of lines to normal chunks\r\n */\r\nfunction lineToNormalChunks(lineChunks) {\r\n    // We already have line chunks, so simply merge those chunks that overlap\r\n    let current = null;\r\n    let ret = [];\r\n    for (let c of lineChunks) {\r\n        if (current === null) {\r\n            current = util_1.shallowCopy(c);\r\n        }\r\n        else {\r\n            if (current.inEdit(c.baseFrom)) {\r\n                // Overlaps, combine\r\n                current.remoteTo = Math.max(current.remoteTo, c.remoteTo);\r\n                current.baseTo = Math.max(current.baseTo, c.baseTo);\r\n                current.sources = current.sources.concat(c.sources);\r\n            }\r\n            else {\r\n                // No overlap, start new\r\n                ret.push(current);\r\n                current = util_1.shallowCopy(c);\r\n            }\r\n        }\r\n        current.sources = current.sources.filter(util_1.unique);\r\n    }\r\n    if (current !== null) {\r\n        ret.push(current);\r\n    }\r\n    return ret;\r\n}\r\nexports.lineToNormalChunks = lineToNormalChunks;\r\n/**\r\n * Label a set of diffs with a source, recursively.\r\n */\r\nfunction labelSource(diff, source) {\r\n    if (diff) {\r\n        for (let d of diff) {\r\n            d.source = source;\r\n            if (d.op === 'patch') {\r\n                labelSource(d.diff, source);\r\n            }\r\n        }\r\n    }\r\n    return diff;\r\n}\r\nexports.labelSource = labelSource;\r\n//# sourceMappingURL=diffchunking.js.map","\"use strict\";\r\n// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./diffchunking\"), exports);\r\n__exportStar(require(\"./decisionchunking\"), exports);\r\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CollapsiblePanel = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst COLLAPSIBLE_CLASS = 'jp-CollapsiblePanel';\r\nconst COLLAPSIBLE_HEADER = 'jp-CollapsiblePanel-header';\r\nconst COLLAPSIBLE_HEADER_ICON = 'jp-CollapsiblePanel-header-icon';\r\nconst COLLAPSIBLE_HEADER_ICON_OPEN = 'jp-CollapsiblePanel-header-icon-opened';\r\nconst COLLAPSIBLE_HEADER_ICON_CLOSED = 'jp-CollapsiblePanel-header-icon-closed';\r\nconst COLLAPSIBLE_SLIDER = 'jp-CollapsiblePanel-slider';\r\nconst COLLAPSIBLE_OPEN = 'jp-CollapsiblePanel-opened';\r\nconst COLLAPSIBLE_CLOSED = 'jp-CollapsiblePanel-closed';\r\nconst COLLAPSIBLE_CONTAINER = 'jp-CollapsiblePanel-container';\r\n/**\r\n * CollapsiblePanel\r\n */\r\nclass CollapsiblePanel extends widgets_1.Panel {\r\n    constructor(inner, headerTitle, collapsed) {\r\n        super();\r\n        this.addClass(COLLAPSIBLE_CLASS);\r\n        this.inner = inner;\r\n        let constructor = this.constructor;\r\n        let header = constructor.createHeader(headerTitle);\r\n        this.header = header;\r\n        this.button = header.node.getElementsByClassName(COLLAPSIBLE_HEADER_ICON)[0];\r\n        header.node.onclick = this.toggleCollapsed.bind(this);\r\n        this.addWidget(header);\r\n        this.container = new widgets_1.Panel();\r\n        this.container.addClass(COLLAPSIBLE_CONTAINER);\r\n        this.slider = new widgets_1.Panel();\r\n        this.slider.addClass(COLLAPSIBLE_SLIDER);\r\n        this.slider.addWidget(inner);\r\n        this.container.addWidget(this.slider);\r\n        this.addWidget(this.container);\r\n        this.slider.addClass(collapsed === true ?\r\n            COLLAPSIBLE_CLOSED :\r\n            COLLAPSIBLE_OPEN);\r\n        this.button.classList.add(collapsed === true ?\r\n            COLLAPSIBLE_HEADER_ICON_CLOSED :\r\n            COLLAPSIBLE_HEADER_ICON_OPEN);\r\n        this.button.classList.add(\"fa\");\r\n        this.button.classList.add(collapsed === true ?\r\n            \"fa-caret-down\" :\r\n            \"fa-caret-up\");\r\n    }\r\n    static createHeader(headerTitle) {\r\n        let header = new widgets_1.Panel();\r\n        header.addClass(COLLAPSIBLE_HEADER);\r\n        if (headerTitle) {\r\n            // let title = document.createElement('span');\r\n            header.node.innerText = headerTitle;\r\n            // header.appendChild(title);\r\n        }\r\n        let button = document.createElement('button');\r\n        button.className = COLLAPSIBLE_HEADER_ICON;\r\n        header.node.appendChild(button);\r\n        return header;\r\n    }\r\n    toggleCollapsed() {\r\n        let slider = this.slider;\r\n        let button = this.button;\r\n        if (this.collapsed) {\r\n            slider.removeClass(COLLAPSIBLE_CLOSED);\r\n            slider.addClass(COLLAPSIBLE_OPEN);\r\n            button.classList.remove(COLLAPSIBLE_HEADER_ICON_CLOSED);\r\n            button.classList.add(COLLAPSIBLE_HEADER_ICON_OPEN);\r\n            this.button.classList.remove(\"fa-caret-down\");\r\n            this.button.classList.add(\"fa-caret-up\");\r\n        }\r\n        else {\r\n            slider.removeClass(COLLAPSIBLE_OPEN);\r\n            slider.addClass(COLLAPSIBLE_CLOSED);\r\n            button.classList.remove(COLLAPSIBLE_HEADER_ICON_OPEN);\r\n            button.classList.add(COLLAPSIBLE_HEADER_ICON_CLOSED);\r\n            this.button.classList.remove(\"fa-caret-up\");\r\n            this.button.classList.add(\"fa-caret-down\");\r\n        }\r\n    }\r\n    get collapsed() {\r\n        return this.slider.hasClass(COLLAPSIBLE_CLOSED);\r\n    }\r\n    set headerTitle(value) {\r\n        this.header.node.innerText = value;\r\n    }\r\n}\r\nexports.CollapsiblePanel = CollapsiblePanel;\r\n//# sourceMappingURL=collapsiblepanel.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EditorWidget = void 0;\r\nconst codeeditor_1 = require(\"@jupyterlab/codeeditor\");\r\nconst codemirror_1 = require(\"@jupyterlab/codemirror\");\r\nclass EditorWidget extends codeeditor_1.CodeEditorWrapper {\r\n    /**\r\n     * Store all editor instances for operations that\r\n     * need to loop over all instances.\r\n     */\r\n    constructor(value, options) {\r\n        if (options && options.readOnly) {\r\n            // Prevent readonly editor from trapping tabs\r\n            options.extraKeys = { Tab: false, 'Shift-Tab': false };\r\n        }\r\n        super({\r\n            model: new codeeditor_1.CodeEditor.Model({ value }),\r\n            factory: function () {\r\n                let factory = new codemirror_1.CodeMirrorEditorFactory(options);\r\n                return factory.newInlineEditor.bind(factory);\r\n            }()\r\n        });\r\n        this.staticLoaded = false;\r\n        EditorWidget.editors.push(this.cm);\r\n    }\r\n    get cm() {\r\n        return this.editor.editor;\r\n    }\r\n    get doc() {\r\n        return this.editor.doc;\r\n    }\r\n    /**\r\n     * A message handler invoked on an `'resize'` message.\r\n     */\r\n    onResize(msg) {\r\n        if (!this.staticLoaded) {\r\n            if (msg.width < 0 || msg.height < 0) {\r\n                this.cm.setSize(null, null);\r\n            }\r\n            else {\r\n                super.onResize(msg);\r\n            }\r\n            if (this.editor.getOption('readOnly') && document.contains(this.node)) {\r\n                this.staticLoaded = true;\r\n            }\r\n        }\r\n    }\r\n}\r\nexports.EditorWidget = EditorWidget;\r\nEditorWidget.editors = [];\r\n//# sourceMappingURL=editor.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NotifyUserError = void 0;\r\n/**\r\n * An error that should be displayed to the user\r\n */\r\nclass NotifyUserError extends Error {\r\n    constructor(message, severity = 'error') {\r\n        super(message);\r\n        // Set the prototype explicitly.\r\n        Object.setPrototypeOf(this, NotifyUserError.prototype);\r\n        this.message = message;\r\n        this.stack = new Error().stack;\r\n        this.severity = severity;\r\n    }\r\n}\r\nexports.NotifyUserError = NotifyUserError;\r\n//# sourceMappingURL=exceptions.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n// This code is based on the CodeMirror mergeview.js source:\r\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: http://codemirror.net/LICENSE\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MergeView = exports.DiffView = exports.createNbdimeMergeView = exports.EventDirection = exports.DIFF_OP = void 0;\r\nconst CodeMirror = require(\"codemirror\");\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst model_1 = require(\"../merge/model\");\r\nconst chunking_1 = require(\"../chunking\");\r\nconst editor_1 = require(\"./editor\");\r\nconst util_1 = require(\"./util\");\r\nconst exceptions_1 = require(\"./exceptions\");\r\nconst PICKER_SYMBOL = '\\u27ad';\r\nconst CONFLICT_MARKER = '\\u26A0'; // '\\u2757'\r\nvar DIFF_OP;\r\n(function (DIFF_OP) {\r\n    DIFF_OP[DIFF_OP[\"DIFF_DELETE\"] = -1] = \"DIFF_DELETE\";\r\n    DIFF_OP[DIFF_OP[\"DIFF_INSERT\"] = 1] = \"DIFF_INSERT\";\r\n    DIFF_OP[DIFF_OP[\"DIFF_EQUAL\"] = 0] = \"DIFF_EQUAL\";\r\n})(DIFF_OP = exports.DIFF_OP || (exports.DIFF_OP = {}));\r\nvar EventDirection;\r\n(function (EventDirection) {\r\n    EventDirection[EventDirection[\"INCOMING\"] = 0] = \"INCOMING\";\r\n    EventDirection[EventDirection[\"OUTGOING\"] = 1] = \"OUTGOING\";\r\n})(EventDirection = exports.EventDirection || (exports.EventDirection = {}));\r\nconst GUTTER_PICKER_CLASS = 'jp-Merge-gutter-picker';\r\nconst GUTTER_CONFLICT_CLASS = 'jp-Merge-gutter-conflict';\r\nconst CHUNK_CONFLICT_CLASS = 'jp-Merge-conflict';\r\nconst leftClasses = { chunk: 'CodeMirror-merge-l-chunk',\r\n    start: 'CodeMirror-merge-l-chunk-start',\r\n    end: 'CodeMirror-merge-l-chunk-end',\r\n    insert: 'CodeMirror-merge-l-inserted',\r\n    del: 'CodeMirror-merge-l-deleted',\r\n    connect: 'CodeMirror-merge-l-connect',\r\n    gutter: 'CodeMirror-merge-l-gutter' };\r\nconst rightClasses = { chunk: 'CodeMirror-merge-r-chunk',\r\n    start: 'CodeMirror-merge-r-chunk-start',\r\n    end: 'CodeMirror-merge-r-chunk-end',\r\n    insert: 'CodeMirror-merge-r-inserted',\r\n    del: 'CodeMirror-merge-r-deleted',\r\n    connect: 'CodeMirror-merge-r-connect',\r\n    gutter: 'CodeMirror-merge-r-gutter' };\r\nconst mergeClassPrefix = { chunk: 'CodeMirror-merge-m-chunk',\r\n    start: 'CodeMirror-merge-m-chunk-start',\r\n    end: 'CodeMirror-merge-m-chunk-end',\r\n    insert: 'CodeMirror-merge-m-inserted',\r\n    del: 'CodeMirror-merge-m-deleted',\r\n    connect: 'CodeMirror-merge-m-connect',\r\n    gutter: 'CodeMirror-merge-m-gutter' };\r\nfunction createNbdimeMergeView(remote, local, merged, readOnly) {\r\n    let opts = {\r\n        remote,\r\n        local,\r\n        merged,\r\n        readOnly,\r\n        orig: null\r\n    };\r\n    opts.collapseIdentical = true;\r\n    let mergeview = new MergeView(opts);\r\n    let editors = [];\r\n    if (mergeview.left) {\r\n        editors.push(mergeview.left);\r\n    }\r\n    if (mergeview.right) {\r\n        editors.push(mergeview.right);\r\n    }\r\n    if (mergeview.merge) {\r\n        editors.push(mergeview.merge);\r\n    }\r\n    let mimetype = (remote || merged).mimetype;\r\n    if (mimetype) {\r\n        // Set the editor mode to the MIME type.\r\n        for (let e of editors) {\r\n            e.ownWidget.model.mimeType = mimetype;\r\n        }\r\n        mergeview.base.model.mimeType = mimetype;\r\n    }\r\n    return mergeview;\r\n}\r\nexports.createNbdimeMergeView = createNbdimeMergeView;\r\n/**\r\n * Used by MergeView to show diff in a string diff model\r\n */\r\nclass DiffView {\r\n    constructor(model, type, updateCallback, options) {\r\n        this.collapsedRanges = [];\r\n        this.model = model;\r\n        this.type = type;\r\n        this.updateCallback = updateCallback;\r\n        this.classes = type === 'left' ?\r\n            leftClasses : type === 'right' ? rightClasses : null;\r\n        let ownValue = this.model.remote || '';\r\n        this.ownWidget = new editor_1.EditorWidget(ownValue, util_1.copyObj({ readOnly: !!options.readOnly }, options));\r\n        this.showDifferences = options.showDifferences !== false;\r\n    }\r\n    init(base) {\r\n        this.baseEditor = base;\r\n        (this.baseEditor.state.diffViews ||\r\n            (this.baseEditor.state.diffViews = [])).push(this);\r\n        this.ownEditor.state.diffViews = [this];\r\n        this.baseEditor.on('gutterClick', this.onGutterClick.bind(this));\r\n        this.ownEditor.on('gutterClick', this.onGutterClick.bind(this));\r\n        this.lineChunks = this.model.getLineChunks();\r\n        this.chunks = chunking_1.lineToNormalChunks(this.lineChunks);\r\n        this.dealigned = false;\r\n        this.forceUpdate = this.registerUpdate();\r\n        this.setScrollLock(true, false);\r\n        this.registerScroll();\r\n    }\r\n    setShowDifferences(val) {\r\n        val = val !== false;\r\n        if (val !== this.showDifferences) {\r\n            this.showDifferences = val;\r\n            this.forceUpdate('full');\r\n        }\r\n    }\r\n    syncModel() {\r\n        if (this.modelInvalid()) {\r\n            let edit = this.ownEditor;\r\n            let updatedLineChunks = this.model.getLineChunks();\r\n            let updatedChunks = chunking_1.lineToNormalChunks(updatedLineChunks);\r\n            if (this.model.remote === edit.getValue()) {\r\n                // Nothing to do except update chunks\r\n                this.lineChunks = updatedLineChunks;\r\n                this.chunks = updatedChunks;\r\n                return;\r\n            }\r\n            let cursor = edit.getDoc().getCursor();\r\n            let newLines = util_1.splitLines(this.model.remote);\r\n            let start = edit.getDoc().firstLine();\r\n            let last = edit.getDoc().lastLine() + 1;\r\n            let cumulativeOffset = 0;\r\n            let end;\r\n            let updatedEnd;\r\n            // We want to replace contents of editor, but if we have collapsed regions\r\n            // some lines have been optimized away. Carefully replace the relevant bits:\r\n            for (let range of this.collapsedRanges) {\r\n                let baseLine = range.line;\r\n                end = getMatchingEditLine(baseLine, this.chunks);\r\n                updatedEnd = getMatchingEditLine(baseLine, updatedChunks);\r\n                let offset = updatedEnd - end;\r\n                if (end !== start || offset !== 0) {\r\n                    edit.getDoc().replaceRange(newLines.slice(start + cumulativeOffset, updatedEnd + cumulativeOffset - 1).join(''), CodeMirror.Pos(start, 0), CodeMirror.Pos(end - 1, 0), 'syncModel');\r\n                }\r\n                cumulativeOffset += offset;\r\n                start = end + range.size;\r\n            }\r\n            if (start < last) {\r\n                // Only here if no collapsed ranges, replace full contents\r\n                edit.getDoc().replaceRange(newLines.slice(start, newLines.length).join(''), CodeMirror.Pos(start, 0), CodeMirror.Pos(last, 0), 'syncModel');\r\n            }\r\n            this.ownEditor.getDoc().setCursor(cursor);\r\n            this.lineChunks = updatedLineChunks;\r\n            this.chunks = updatedChunks;\r\n        }\r\n    }\r\n    buildGap() {\r\n        let lock = this.lockButton = elt('div', undefined, 'CodeMirror-merge-scrolllock');\r\n        lock.title = 'Toggle locked scrolling';\r\n        let lockWrap = elt('div', [lock], 'CodeMirror-merge-scrolllock-wrap');\r\n        let self = this;\r\n        CodeMirror.on(lock, 'click', function () {\r\n            self.setScrollLock(!self.lockScroll);\r\n        });\r\n        return this.gap = elt('div', [lockWrap], 'CodeMirror-merge-gap');\r\n    }\r\n    setScrollLock(val, action) {\r\n        this.lockScroll = val;\r\n        if (val && action !== false) {\r\n            this.syncScroll(EventDirection.OUTGOING);\r\n        }\r\n        if (this.lockButton) {\r\n            this.lockButton.innerHTML = val ? '\\u21db\\u21da' : '\\u21db&nbsp;&nbsp;\\u21da';\r\n        }\r\n    }\r\n    registerUpdate() {\r\n        let editMarkers = [];\r\n        let origMarkers = [];\r\n        let debounceChange;\r\n        let self = this;\r\n        self.updating = false;\r\n        self.updatingFast = false;\r\n        function update(mode) {\r\n            self.updating = true;\r\n            self.updatingFast = false;\r\n            if (mode === 'full') {\r\n                self.syncModel();\r\n                if (self.classes === null) {\r\n                    clearMergeMarks(self.baseEditor, editMarkers);\r\n                    clearMergeMarks(self.ownEditor, origMarkers);\r\n                }\r\n                else {\r\n                    clearMarks(self.baseEditor, editMarkers, self.classes);\r\n                    clearMarks(self.ownEditor, origMarkers, self.classes);\r\n                }\r\n            }\r\n            if (self.showDifferences) {\r\n                self.updateMarks(self.ownEditor, self.model.additions, editMarkers, DIFF_OP.DIFF_INSERT);\r\n                self.updateMarks(self.baseEditor, self.model.deletions, origMarkers, DIFF_OP.DIFF_DELETE);\r\n            }\r\n            self.updateCallback(true);\r\n            checkSync(self.ownEditor);\r\n            self.updating = false;\r\n        }\r\n        function setDealign(fast) {\r\n            let upd = false;\r\n            for (let dv of self.baseEditor.state.diffViews) {\r\n                upd = upd || dv.updating;\r\n            }\r\n            if (upd) {\r\n                return;\r\n            }\r\n            self.dealigned = true;\r\n            set(fast === true);\r\n        }\r\n        function set(fast) {\r\n            let upd = false;\r\n            for (let dv of self.baseEditor.state.diffViews) {\r\n                upd = upd || dv.updating || dv.updatingFast;\r\n            }\r\n            if (upd) {\r\n                return;\r\n            }\r\n            clearTimeout(debounceChange);\r\n            if (fast === true) {\r\n                self.updatingFast = true;\r\n            }\r\n            debounceChange = window.setTimeout(update, fast === true ? 20 : 250);\r\n        }\r\n        function change(_cm, change) {\r\n            if (!(self.model instanceof model_1.DecisionStringDiffModel)) {\r\n                // TODO: Throttle?\r\n                self.lineChunks = self.model.getLineChunks();\r\n                self.chunks = chunking_1.lineToNormalChunks(self.lineChunks);\r\n            }\r\n            // Update faster when a line was added/removed\r\n            setDealign(change.text.length - 1 !== change.to.line - change.from.line);\r\n        }\r\n        function checkSync(cm) {\r\n            if (self.model.remote !== cm.getValue()) {\r\n                throw new exceptions_1.NotifyUserError('CRITICAL: Merge editor out of sync with model! ' +\r\n                    'Double-check any saved merge output!');\r\n            }\r\n        }\r\n        this.baseEditor.on('change', change);\r\n        this.ownEditor.on('change', change);\r\n        this.baseEditor.on('markerAdded', setDealign);\r\n        this.baseEditor.on('markerCleared', setDealign);\r\n        this.ownEditor.on('markerAdded', setDealign);\r\n        this.ownEditor.on('markerCleared', setDealign);\r\n        this.baseEditor.on('viewportChange', function () { set(false); });\r\n        this.ownEditor.on('viewportChange', function () { set(false); });\r\n        update();\r\n        return update;\r\n    }\r\n    modelInvalid() {\r\n        return this.model instanceof model_1.DecisionStringDiffModel &&\r\n            this.model.invalid;\r\n    }\r\n    onGutterClick(instance, line, gutter, clickEvent) {\r\n        if (clickEvent.button !== 0) {\r\n            // Only care about left clicks\r\n            return;\r\n        }\r\n        let li = instance.lineInfo(line);\r\n        if (!li.gutterMarkers || !li.gutterMarkers.hasOwnProperty(gutter)) {\r\n            return;\r\n        }\r\n        let node = li.gutterMarkers[gutter];\r\n        if (node && node.sources) {\r\n            let ss = node.sources;\r\n            if (gutter === GUTTER_PICKER_CLASS) {\r\n                if (instance === this.ownEditor) {\r\n                    for (let s of ss) {\r\n                        s.decision.action = s.action;\r\n                    }\r\n                }\r\n                else if (this.type === 'merge' && instance === this.baseEditor) {\r\n                    for (let s of ss) {\r\n                        s.decision.action = 'base';\r\n                    }\r\n                }\r\n                for (let i = ss.length - 1; i >= 0; --i) {\r\n                    let s = ss[i];\r\n                    if (this.type === 'merge' && util_1.hasEntries(s.decision.customDiff)) {\r\n                        // Custom diffs are cleared on pick,\r\n                        // as there is no way to re-pick them\r\n                        s.decision.customDiff = [];\r\n                    }\r\n                }\r\n                if (ss.length === 0) {\r\n                    // All decisions empty, remove picker\r\n                    // In these cases, there should only be one picker, on base\r\n                    // so simply remove the one we have here\r\n                    instance.setGutterMarker(line, GUTTER_PICKER_CLASS, null);\r\n                }\r\n            }\r\n            else if (gutter === GUTTER_CONFLICT_CLASS) {\r\n                for (let s of ss) {\r\n                    s.decision.conflict = false;\r\n                }\r\n            }\r\n            for (let dv of this.baseEditor.state.diffViews) {\r\n                if (dv.model instanceof model_1.DecisionStringDiffModel) {\r\n                    dv.model.invalidate();\r\n                }\r\n                dv.forceUpdate('full');\r\n            }\r\n        }\r\n    }\r\n    registerScroll() {\r\n        let self = this;\r\n        this.baseEditor.on('scroll', function () {\r\n            self.syncScroll(EventDirection.OUTGOING);\r\n        });\r\n        this.ownEditor.on('scroll', function () {\r\n            self.syncScroll(EventDirection.INCOMING);\r\n        });\r\n    }\r\n    /**\r\n     * Sync scrolling between base and own editors. `type` is used to indicate\r\n     * which editor is the source, and which editor is the destination of the sync.\r\n     */\r\n    syncScroll(type) {\r\n        if (this.modelInvalid()) {\r\n            return;\r\n        }\r\n        if (!this.lockScroll) {\r\n            return;\r\n        }\r\n        // editor: What triggered event, other: What needs to be synced\r\n        let editor;\r\n        let other;\r\n        if (type === EventDirection.OUTGOING) {\r\n            editor = this.baseEditor;\r\n            other = this.ownEditor;\r\n        }\r\n        else {\r\n            editor = this.ownEditor;\r\n            other = this.baseEditor;\r\n        }\r\n        if (editor.state.scrollSetBy === this) {\r\n            editor.state.scrollSetBy = null;\r\n            return;\r\n        }\r\n        // Position to update to\r\n        other.state.scrollPosition = editor.getScrollInfo();\r\n        // If ticking, we already have a scroll queued\r\n        if (other.state.scrollTicking) {\r\n            return;\r\n        }\r\n        let sInfo = other.getScrollInfo();\r\n        // Don't queue an event if already synced.\r\n        if (other.state.scrollPosition.top === sInfo.top &&\r\n            other.state.scrollPosition.left === sInfo.left) {\r\n            return;\r\n        }\r\n        // Throttle by requestAnimationFrame().\r\n        // If event is outgoing, this will lead to a one frame delay of other DiffViews\r\n        let self = this;\r\n        window.requestAnimationFrame(function () {\r\n            other.scrollTo(other.state.scrollPosition.left, other.state.scrollPosition.top);\r\n            other.state.scrollTicking = false;\r\n            other.state.scrollSetBy = self;\r\n        });\r\n        other.state.scrollTicking = true;\r\n        return;\r\n    }\r\n    updateMarks(editor, diff, markers, type) {\r\n        let classes;\r\n        if (this.classes === null) {\r\n            // Only store prefixes here, will be completed later\r\n            classes = util_1.copyObj(mergeClassPrefix);\r\n        }\r\n        else {\r\n            classes = this.classes;\r\n        }\r\n        let self = this;\r\n        function markChunk(editor, from, to, sources) {\r\n            if (self.classes === null && sources.length > 0) {\r\n                // Complete merge class prefixes here\r\n                classes = util_1.copyObj(mergeClassPrefix);\r\n                // First, figure out 'action' state of chunk\r\n                let s = sources[0].action;\r\n                if (sources.length > 1) {\r\n                    for (let si of sources.slice(1)) {\r\n                        if (si.action !== s) {\r\n                            s = 'mixed';\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                for (let k of Object.keys(classes)) {\r\n                    classes[k] += '-' + s;\r\n                }\r\n            }\r\n            // Next, figure out conflict state\r\n            let conflict = false;\r\n            if (sources.length > 0) {\r\n                for (let s of sources) {\r\n                    if (s.decision.conflict) {\r\n                        conflict = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            for (let i = from; i < to; ++i) {\r\n                let line = editor.addLineClass(i, 'background', classes.chunk);\r\n                if (conflict) {\r\n                    editor.addLineClass(line, 'background', CHUNK_CONFLICT_CLASS);\r\n                }\r\n                if (i === from) {\r\n                    editor.addLineClass(line, 'background', classes.start);\r\n                    if (self.type !== 'merge') {\r\n                        // For all editors except merge editor, add a picker button\r\n                        let picker = elt('div', PICKER_SYMBOL, classes.gutter);\r\n                        picker.sources = sources;\r\n                        picker.classList.add(GUTTER_PICKER_CLASS);\r\n                        editor.setGutterMarker(line, GUTTER_PICKER_CLASS, picker);\r\n                    }\r\n                    else if (editor === self.baseEditor) {\r\n                        for (let s of sources) {\r\n                            if (s.decision.action === 'custom' &&\r\n                                !util_1.hasEntries(s.decision.localDiff) &&\r\n                                !util_1.hasEntries(s.decision.remoteDiff)) {\r\n                                // We have a custom decision, add picker on base only!\r\n                                let picker = elt('div', PICKER_SYMBOL, classes.gutter);\r\n                                picker.sources = sources;\r\n                                picker.classList.add(GUTTER_PICKER_CLASS);\r\n                                editor.setGutterMarker(line, GUTTER_PICKER_CLASS, picker);\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (conflict && editor === self.ownEditor) {\r\n                        // Add conflict markers on editor, if conflicted\r\n                        let conflictMarker = elt('div', CONFLICT_MARKER, '');\r\n                        conflictMarker.sources = sources;\r\n                        conflictMarker.classList.add(GUTTER_CONFLICT_CLASS);\r\n                        editor.setGutterMarker(line, GUTTER_CONFLICT_CLASS, conflictMarker);\r\n                    }\r\n                }\r\n                if (i === to - 1) {\r\n                    editor.addLineClass(line, 'background', classes.end);\r\n                }\r\n                markers.push(line);\r\n            }\r\n            // When the chunk is empty, make sure a horizontal line shows up\r\n            if (from === to) {\r\n                let line = editor.addLineClass(from, 'background', classes.start);\r\n                if (self.type !== 'merge') {\r\n                    let picker = elt('div', PICKER_SYMBOL, classes.gutter);\r\n                    picker.sources = sources;\r\n                    picker.classList.add(GUTTER_PICKER_CLASS);\r\n                    editor.setGutterMarker(line, GUTTER_PICKER_CLASS, picker);\r\n                }\r\n                else if (conflict) {\r\n                    // Add conflict markers on editor, if conflicted\r\n                    let conflictMarker = elt('div', CONFLICT_MARKER, '');\r\n                    conflictMarker.sources = sources;\r\n                    conflictMarker.classList.add(GUTTER_CONFLICT_CLASS);\r\n                    editor.setGutterMarker(line, GUTTER_CONFLICT_CLASS, conflictMarker);\r\n                }\r\n                editor.addLineClass(line, 'background', classes.end + '-empty');\r\n                markers.push(line);\r\n            }\r\n        }\r\n        let cls = type === DIFF_OP.DIFF_DELETE ? classes.del : classes.insert;\r\n        editor.operation(function () {\r\n            let edit = editor === self.baseEditor;\r\n            if (self.classes) {\r\n                clearMarks(editor, markers, classes);\r\n            }\r\n            else {\r\n                clearMergeMarks(editor, markers);\r\n            }\r\n            highlightChars(editor, diff, markers, cls);\r\n            for (let c of self.chunks) {\r\n                if (edit) {\r\n                    markChunk(editor, c.baseFrom, c.baseTo, c.sources);\r\n                }\r\n                else {\r\n                    markChunk(editor, c.remoteFrom, c.remoteTo, c.sources);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    get ownEditor() {\r\n        return this.ownWidget.cm;\r\n    }\r\n}\r\nexports.DiffView = DiffView;\r\n// Updating the marks for editor content\r\nfunction clearMergeMarks(editor, arr) {\r\n    for (let postfix of ['-local', '-remote', '-either', '-custom']) {\r\n        let classes = util_1.copyObj(mergeClassPrefix);\r\n        for (let k of Object.keys(classes)) {\r\n            classes[k] += postfix;\r\n        }\r\n        clearMarks(editor, arr, classes);\r\n    }\r\n}\r\nfunction isTextMarker(marker) {\r\n    return 'clear' in marker;\r\n}\r\nfunction clearMarks(editor, arr, classes) {\r\n    for (let i = arr.length - 1; i >= 0; --i) {\r\n        let mark = arr[i];\r\n        if (isTextMarker(mark)) {\r\n            mark.clear();\r\n            arr.splice(i, 1);\r\n        }\r\n        else if (mark.parent) {\r\n            editor.removeLineClass(mark, 'background', classes.chunk);\r\n            editor.removeLineClass(mark, 'background', classes.start);\r\n            editor.removeLineClass(mark, 'background', classes.end);\r\n            editor.removeLineClass(mark, 'background', CHUNK_CONFLICT_CLASS);\r\n            // Merge editor does not set a marker currently, so don't clear for it:\r\n            if (util_1.valueIn(classes.gutter, [leftClasses.gutter, rightClasses.gutter])) {\r\n                editor.setGutterMarker(mark, GUTTER_PICKER_CLASS, null);\r\n            }\r\n            else {\r\n                editor.setGutterMarker(mark, GUTTER_CONFLICT_CLASS, null);\r\n            }\r\n            let line = editor.lineInfo(mark);\r\n            if (!line.bgClass || line.bgClass.length === 0) {\r\n                arr.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction highlightChars(editor, ranges, markers, cls) {\r\n    let doc = editor.getDoc();\r\n    let origCls = null;\r\n    if (util_1.valueIn(cls, [mergeClassPrefix.del, mergeClassPrefix.insert])) {\r\n        origCls = cls;\r\n    }\r\n    for (let r of ranges) {\r\n        if (origCls !== null) {\r\n            cls = origCls + (r.source ? '-' + r.source.action : '');\r\n        }\r\n        markers.push(doc.markText(r.from, r.to, { className: cls }));\r\n    }\r\n}\r\n// Updating the gap between editor and original\r\n/**\r\n * From a line in base, find the matching line in another editor by chunks.\r\n */\r\nfunction getMatchingEditLine(baseLine, chunks) {\r\n    let offset = 0;\r\n    // Start values correspond to either the start of the chunk,\r\n    // or the start of a preceding unmodified part before the chunk.\r\n    // It is the difference between these two that is interesting.\r\n    for (let i = 0; i < chunks.length; i++) {\r\n        let chunk = chunks[i];\r\n        if (chunk.baseTo > baseLine && chunk.baseFrom <= baseLine) {\r\n            return 0;\r\n        }\r\n        if (chunk.baseFrom > baseLine) {\r\n            break;\r\n        }\r\n        offset = chunk.remoteTo - chunk.baseTo;\r\n    }\r\n    return baseLine + offset;\r\n}\r\n/**\r\n * From a line in base, find the matching line in another editor by line chunks\r\n */\r\nfunction getMatchingEditLineLC(toMatch, chunks) {\r\n    let editLine = toMatch.baseFrom;\r\n    for (let i = 0; i < chunks.length; ++i) {\r\n        let chunk = chunks[i];\r\n        if (chunk.baseFrom === editLine) {\r\n            return chunk.remoteTo;\r\n        }\r\n        if (chunk.baseFrom > editLine) {\r\n            break;\r\n        }\r\n    }\r\n    return toMatch.baseTo;\r\n}\r\n/**\r\n * Find which line numbers align with each other, in the\r\n * set of DiffViews. The returned array is of the format:\r\n *\r\n * [ aligned line #1:[Edit line number, (DiffView#1 line number, DiffView#2 line number,) ...],\r\n *   algined line #2 ..., etc.]\r\n */\r\nfunction findAlignedLines(dvs) {\r\n    let linesToAlign = [];\r\n    let ignored = [];\r\n    // First fill directly from first DiffView\r\n    let dv = dvs[0];\r\n    let others = dvs.slice(1);\r\n    for (let i = 0; i < dv.lineChunks.length; i++) {\r\n        let chunk = dv.lineChunks[i];\r\n        let lines = [chunk.baseTo, chunk.remoteTo];\r\n        for (let o of others) {\r\n            lines.push(getMatchingEditLineLC(chunk, o.lineChunks));\r\n        }\r\n        if (linesToAlign.length > 0 &&\r\n            linesToAlign[linesToAlign.length - 1][0] === lines[0]) {\r\n            let last = linesToAlign[linesToAlign.length - 1];\r\n            for (let j = 0; j < lines.length; ++j) {\r\n                last[j] = Math.max(last[j], lines[j]);\r\n            }\r\n        }\r\n        else {\r\n            if (linesToAlign.length > 0) {\r\n                let prev = linesToAlign[linesToAlign.length - 1];\r\n                let diff = lines[0] - prev[0];\r\n                for (let j = 1; j < lines.length; ++j) {\r\n                    if (diff !== lines[j] - prev[j]) {\r\n                        diff = null;\r\n                        break;\r\n                    }\r\n                }\r\n                if (diff === null) {\r\n                    linesToAlign.push(lines);\r\n                }\r\n                else {\r\n                    ignored.push(lines[0]);\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                linesToAlign.push(lines);\r\n            }\r\n        }\r\n    }\r\n    // Then fill any chunks from remaining DiffView, which are not already added\r\n    for (let o = 0; o < others.length; o++) {\r\n        for (let i = 0; i < others[o].lineChunks.length; i++) {\r\n            let chunk = others[o].lineChunks[i];\r\n            // Check agains existing matches to see if already consumed:\r\n            let j = 0;\r\n            for (; j < linesToAlign.length; j++) {\r\n                let align = linesToAlign[j];\r\n                if (util_1.valueIn(chunk.baseTo, ignored)) {\r\n                    // Chunk already consumed, continue to next chunk\r\n                    j = -1;\r\n                    break;\r\n                }\r\n                else if (align[0] >= chunk.baseTo) {\r\n                    // New chunk, which should be inserted in pos j,\r\n                    // such that linesToAlign are sorted on edit line\r\n                    break;\r\n                }\r\n            }\r\n            if (j > -1) {\r\n                let lines = [chunk.baseTo,\r\n                    getMatchingEditLineLC(chunk, dv.lineChunks)];\r\n                for (let k = 0; k < others.length; k++) {\r\n                    if (k === o) {\r\n                        lines.push(chunk.remoteTo);\r\n                    }\r\n                    else {\r\n                        lines.push(getMatchingEditLineLC(chunk, others[k].lineChunks));\r\n                    }\r\n                }\r\n                if (linesToAlign.length > j && linesToAlign[j][0] === chunk.baseTo) {\r\n                    let last = linesToAlign[j];\r\n                    for (let k = 0; k < lines.length; ++k) {\r\n                        last[k] = Math.max(last[k], lines[k]);\r\n                    }\r\n                }\r\n                else {\r\n                    linesToAlign.splice(j, 0, lines);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return linesToAlign;\r\n}\r\nfunction alignLines(cm, lines, aligners) {\r\n    let maxOffset = 0;\r\n    let offset = [];\r\n    for (let i = 0; i < cm.length; i++) {\r\n        if (lines[i] !== null) {\r\n            let off = cm[i].heightAtLine(lines[i], 'local');\r\n            offset[i] = off;\r\n            maxOffset = Math.max(maxOffset, off);\r\n        }\r\n    }\r\n    for (let i = 0; i < cm.length; i++) {\r\n        if (lines[i] !== null) {\r\n            let diff = maxOffset - offset[i];\r\n            if (diff > 1) {\r\n                aligners.push(padAbove(cm[i], lines[i], diff));\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction padAbove(cm, line, size) {\r\n    let above = true;\r\n    if (line > cm.getDoc().lastLine()) {\r\n        line--;\r\n        above = false;\r\n    }\r\n    let elt = document.createElement('div');\r\n    elt.className = 'CodeMirror-merge-spacer';\r\n    elt.style.height = size + 'px';\r\n    elt.style.minWidth = '1px';\r\n    return cm.addLineWidget(line, elt, { height: size, above: above });\r\n}\r\n// Merge view, containing 1 or 2 diff views.\r\nclass MergeView extends widgets_1.Panel {\r\n    constructor(options) {\r\n        super();\r\n        this.initialized = false;\r\n        this.collapsedRanges = [];\r\n        this.options = options;\r\n        let remote = options.remote;\r\n        let local = options.local || null;\r\n        let merged = options.merged || null;\r\n        let panes = 0;\r\n        let left = this.left = null;\r\n        let right = this.right = null;\r\n        let merge = this.merge = null;\r\n        let self = this;\r\n        this.diffViews = [];\r\n        this.aligners = [];\r\n        let main = options.remote || options.merged;\r\n        if (!main) {\r\n            throw new Error('Either remote or merged model needs to be specified!');\r\n        }\r\n        options.value = (main.base !== null ?\r\n            main.base : main.remote);\r\n        options.lineNumbers = options.lineNumbers !== false;\r\n        // Whether merge view should be readonly\r\n        let readOnly = options.readOnly;\r\n        // For all others:\r\n        options.readOnly = true;\r\n        /*\r\n         * Different cases possible:\r\n         *   - Local and merged supplied: Merge:\r\n         *     - Always use left, right and merge panes\r\n         *     - Use base if `showBase` not set to false\r\n         *   - Only remote supplied: Diff:\r\n         *     - No change: Use ony base editor\r\n         *     - Entire content added/deleted: Use only base editor,\r\n         *       but with different classes\r\n         *     - Partial changes: Use base + right editor\r\n         */\r\n        let dvOptions = options;\r\n        if (merged) {\r\n            options.gutters = [GUTTER_CONFLICT_CLASS, GUTTER_PICKER_CLASS];\r\n            if (options.lineWrapping === undefined) {\r\n                // Turn off linewrapping for merge view by default, keep for diff\r\n                options.lineWrapping = false;\r\n            }\r\n        }\r\n        this.base = new editor_1.EditorWidget(options.value, util_1.copyObj({ readOnly: !!options.readOnly }, options));\r\n        this.base.addClass('CodeMirror-merge-pane');\r\n        this.base.addClass('CodeMirror-merge-pane-base');\r\n        if (merged) {\r\n            let showBase = options.showBase !== false;\r\n            if (!showBase) {\r\n                this.base.node.style.display = 'hidden';\r\n            }\r\n            let leftWidget;\r\n            if (!local || local.remote === null) {\r\n                // Local value was deleted\r\n                left = this.left = null;\r\n                leftWidget = new widgets_1.Widget({ node: elt('div', 'Value missing', 'jp-mod-missing') });\r\n            }\r\n            else {\r\n                left = this.left = new DiffView(local, 'left', this.alignViews.bind(this), util_1.copyObj(dvOptions));\r\n                this.diffViews.push(left);\r\n                leftWidget = left.ownWidget;\r\n            }\r\n            leftWidget.addClass('CodeMirror-merge-pane');\r\n            leftWidget.addClass('CodeMirror-merge-pane-local');\r\n            this.addWidget(leftWidget);\r\n            if (showBase) {\r\n                this.addWidget(this.base);\r\n            }\r\n            let rightWidget;\r\n            if (!remote || remote.remote === null) {\r\n                // Remote value was deleted\r\n                right = this.right = null;\r\n                rightWidget = new widgets_1.Widget({ node: elt('div', 'Value missing', 'jp-mod-missing') });\r\n            }\r\n            else {\r\n                right = this.right = new DiffView(remote, 'right', this.alignViews.bind(this), util_1.copyObj(dvOptions));\r\n                this.diffViews.push(right);\r\n                rightWidget = right.ownWidget;\r\n            }\r\n            rightWidget.addClass('CodeMirror-merge-pane');\r\n            rightWidget.addClass('CodeMirror-merge-pane-remote');\r\n            this.addWidget(rightWidget);\r\n            this.addWidget(new widgets_1.Widget({\r\n                node: elt('div', null, 'CodeMirror-merge-clear', 'height: 0; clear: both;')\r\n            }));\r\n            merge = this.merge = new DiffView(merged, 'merge', this.alignViews.bind(this), util_1.copyObj({ readOnly }, util_1.copyObj(dvOptions)));\r\n            this.diffViews.push(merge);\r\n            let mergeWidget = merge.ownWidget;\r\n            mergeWidget.addClass('CodeMirror-merge-pane');\r\n            mergeWidget.addClass('CodeMirror-merge-pane-final');\r\n            this.addWidget(mergeWidget);\r\n            panes = 3 + (showBase ? 1 : 0);\r\n        }\r\n        else if (remote) { // If in place for type guard\r\n            this.addWidget(this.base);\r\n            if (remote.unchanged || remote.added || remote.deleted) {\r\n                if (remote.unchanged) {\r\n                    this.base.addClass('CodeMirror-merge-pane-unchanged');\r\n                }\r\n                else if (remote.added) {\r\n                    this.base.addClass('CodeMirror-merge-pane-added');\r\n                }\r\n                else if (remote.deleted) {\r\n                    this.base.addClass('CodeMirror-merge-pane-deleted');\r\n                }\r\n                panes = 1;\r\n            }\r\n            else {\r\n                right = this.right = new DiffView(remote, 'right', this.alignViews.bind(this), dvOptions);\r\n                this.diffViews.push(right);\r\n                let rightWidget = right.ownWidget;\r\n                rightWidget.addClass('CodeMirror-merge-pane');\r\n                rightWidget.addClass('CodeMirror-merge-pane-remote');\r\n                this.addWidget(new widgets_1.Widget({ node: right.buildGap() }));\r\n                this.addWidget(rightWidget);\r\n                panes = 2;\r\n            }\r\n            this.addWidget(new widgets_1.Widget({\r\n                node: elt('div', null, 'CodeMirror-merge-clear', 'height: 0; clear: both;')\r\n            }));\r\n        }\r\n        this.addClass('CodeMirror-merge');\r\n        this.addClass('CodeMirror-merge-' + panes + 'pane');\r\n        for (let dv of [left, right, merge]) {\r\n            if (dv) {\r\n                dv.init(this.base.cm);\r\n            }\r\n        }\r\n        if (options.collapseIdentical && panes > 1) {\r\n            this.base.cm.operation(function () {\r\n                collapseIdenticalStretches(self, options.collapseIdentical);\r\n            });\r\n        }\r\n        for (let dv of [left, right, merge]) {\r\n            if (dv) {\r\n                dv.collapsedRanges = this.collapsedRanges;\r\n            }\r\n        }\r\n        this.initialized = true;\r\n        if (this.left || this.right || this.merge) {\r\n            this.alignViews(true);\r\n        }\r\n    }\r\n    alignViews(force) {\r\n        let dealigned = false;\r\n        if (!this.initialized) {\r\n            return;\r\n        }\r\n        for (let dv of this.diffViews) {\r\n            dv.syncModel();\r\n            if (dv.dealigned) {\r\n                dealigned = true;\r\n                dv.dealigned = false;\r\n            }\r\n        }\r\n        if (!dealigned && !force) {\r\n            return; // Nothing to do\r\n        }\r\n        // Find matching lines\r\n        let linesToAlign = findAlignedLines(this.diffViews);\r\n        // Function modifying DOM to perform alignment:\r\n        let self = this;\r\n        let f = function () {\r\n            // Clear old aligners\r\n            let aligners = self.aligners;\r\n            for (let i = 0; i < aligners.length; i++) {\r\n                aligners[i].clear();\r\n            }\r\n            aligners.length = 0;\r\n            // Editors (order is important, so it matches\r\n            // format of linesToAlign)\r\n            let cm = [self.base.cm];\r\n            let scroll = [];\r\n            for (let dv of self.diffViews) {\r\n                cm.push(dv.ownEditor);\r\n            }\r\n            for (let i = 0; i < cm.length; i++) {\r\n                scroll.push(cm[i].getScrollInfo().top);\r\n            }\r\n            for (let ln = 0; ln < linesToAlign.length; ln++) {\r\n                alignLines(cm, linesToAlign[ln], aligners);\r\n            }\r\n            for (let i = 0; i < cm.length; i++) {\r\n                cm[i].scrollTo(null, scroll[i]);\r\n            }\r\n        };\r\n        // All editors should have an operation (simultaneously),\r\n        // so set up nested operation calls.\r\n        if (!this.base.cm.curOp) {\r\n            f = function (fn) {\r\n                return function () { self.base.cm.operation(fn); };\r\n            }(f);\r\n        }\r\n        for (let dv of this.diffViews) {\r\n            if (!dv.ownEditor.curOp) {\r\n                f = function (fn) {\r\n                    return function () { dv.ownEditor.operation(fn); };\r\n                }(f);\r\n            }\r\n        }\r\n        // Perform alignment\r\n        f();\r\n    }\r\n    setShowDifferences(val) {\r\n        if (this.right) {\r\n            this.right.setShowDifferences(val);\r\n        }\r\n        if (this.left) {\r\n            this.left.setShowDifferences(val);\r\n        }\r\n    }\r\n    getMergedValue() {\r\n        if (!this.merge) {\r\n            throw new Error('No merged value; missing \"merged\" view');\r\n        }\r\n        return this.merge.ownEditor.getValue();\r\n    }\r\n}\r\nexports.MergeView = MergeView;\r\nfunction collapseSingle(cm, from, to) {\r\n    cm.addLineClass(from, 'wrap', 'CodeMirror-merge-collapsed-line');\r\n    let widget = document.createElement('span');\r\n    widget.className = 'CodeMirror-merge-collapsed-widget';\r\n    widget.title = 'Identical text collapsed. Click to expand.';\r\n    let mark = cm.getDoc().markText(CodeMirror.Pos(from, 0), CodeMirror.Pos(to - 1), {\r\n        inclusiveLeft: true,\r\n        inclusiveRight: true,\r\n        replacedWith: widget,\r\n        clearOnEnter: true\r\n    });\r\n    function clear() {\r\n        mark.clear();\r\n        cm.removeLineClass(from, 'wrap', 'CodeMirror-merge-collapsed-line');\r\n    }\r\n    CodeMirror.on(widget, 'click', clear);\r\n    return { mark: mark, clear: clear };\r\n}\r\nfunction collapseStretch(size, editors) {\r\n    let marks = [];\r\n    function clear() {\r\n        for (let i = 0; i < marks.length; i++) {\r\n            marks[i].clear();\r\n        }\r\n    }\r\n    for (let i = 0; i < editors.length; i++) {\r\n        let editor = editors[i];\r\n        let mark = collapseSingle(editor.cm, editor.line, editor.line + size);\r\n        marks.push(mark);\r\n        // Undocumented, but merge.js used it, so follow their lead:\r\n        mark.mark.on('clear', clear);\r\n    }\r\n    return marks[0].mark;\r\n}\r\nfunction unclearNearChunks(dv, margin, off, clear) {\r\n    for (let i = 0; i < dv.chunks.length; i++) {\r\n        let chunk = dv.chunks[i];\r\n        for (let l = chunk.baseFrom - margin; l < chunk.baseTo + margin; l++) {\r\n            let pos = l + off;\r\n            if (pos >= 0 && pos < clear.length) {\r\n                clear[pos] = false;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction collapseIdenticalStretches(mv, margin) {\r\n    // FIXME: Use all panes\r\n    if (typeof margin !== 'number') {\r\n        margin = 2;\r\n    }\r\n    let clear = [];\r\n    let edit = mv.base.cm;\r\n    let off = edit.getDoc().firstLine();\r\n    for (let l = off, e = edit.getDoc().lastLine(); l <= e; l++) {\r\n        clear.push(true);\r\n    }\r\n    if (mv.left) {\r\n        unclearNearChunks(mv.left, margin, off, clear);\r\n    }\r\n    if (mv.right) {\r\n        unclearNearChunks(mv.right, margin, off, clear);\r\n    }\r\n    if (mv.merge) {\r\n        unclearNearChunks(mv.merge, margin, off, clear);\r\n    }\r\n    mv.collapsedRanges = [];\r\n    for (let i = 0; i < clear.length; i++) {\r\n        if (clear[i]) {\r\n            let line = i + off;\r\n            let size = 1;\r\n            for (; i < clear.length - 1 && clear[i + 1]; i++, size++) {\r\n                // Just finding size\r\n            }\r\n            if (size > margin) {\r\n                let editors = [{ line: line, cm: edit }];\r\n                if (mv.left) {\r\n                    editors.push({ line: getMatchingEditLine(line, mv.left.chunks),\r\n                        cm: mv.left.ownEditor });\r\n                }\r\n                if (mv.right) {\r\n                    editors.push({ line: getMatchingEditLine(line, mv.right.chunks),\r\n                        cm: mv.right.ownEditor });\r\n                }\r\n                if (mv.merge) {\r\n                    editors.push({ line: getMatchingEditLine(line, mv.merge.chunks),\r\n                        cm: mv.merge.ownEditor });\r\n                }\r\n                let mark = collapseStretch(size, editors);\r\n                mv.collapsedRanges.push({ line, size });\r\n                mark.on('clear', () => {\r\n                    for (let i = 0; i < mv.collapsedRanges.length; ++i) {\r\n                        let range = mv.collapsedRanges[i];\r\n                        if (range.line === line) {\r\n                            mv.collapsedRanges.splice(i, 1);\r\n                            return;\r\n                        }\r\n                    }\r\n                });\r\n                if (mv.options.onCollapse) {\r\n                    mv.options.onCollapse(mv, line, size, mark);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// General utilities\r\nfunction elt(tag, content, className, style) {\r\n    let e = document.createElement(tag);\r\n    if (className) {\r\n        e.className = className;\r\n    }\r\n    if (style) {\r\n        e.style.cssText = style;\r\n    }\r\n    if (typeof content === 'string') {\r\n        e.appendChild(document.createTextNode(content));\r\n    }\r\n    else if (content) {\r\n        for (let i = 0; i < content.length; ++i) {\r\n            e.appendChild((content)[i]);\r\n        }\r\n    }\r\n    return e;\r\n}\r\nfunction findPrevDiff(chunks, start, isOrig) {\r\n    for (let i = chunks.length - 1; i >= 0; i--) {\r\n        let chunk = chunks[i];\r\n        let to = (isOrig ? chunk.remoteTo : chunk.baseTo) - 1;\r\n        if (to < start) {\r\n            return to;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction findNextDiff(chunks, start, isOrig) {\r\n    for (let i = 0; i < chunks.length; i++) {\r\n        let chunk = chunks[i];\r\n        let from = (isOrig ? chunk.remoteFrom : chunk.baseFrom);\r\n        if (from > start) {\r\n            return from;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nvar DiffDirection;\r\n(function (DiffDirection) {\r\n    DiffDirection[DiffDirection[\"Previous\"] = -1] = \"Previous\";\r\n    DiffDirection[DiffDirection[\"Next\"] = 1] = \"Next\";\r\n})(DiffDirection || (DiffDirection = {}));\r\nfunction goNearbyDiff(cm, dir) {\r\n    let found = null;\r\n    let views = cm.state.diffViews;\r\n    let line = cm.getDoc().getCursor().line;\r\n    if (views) {\r\n        for (let i = 0; i < views.length; i++) {\r\n            let dv = views[i];\r\n            let isOrig = cm === dv.ownEditor;\r\n            let pos = dir === DiffDirection.Previous ?\r\n                findPrevDiff(dv.chunks, line, isOrig) :\r\n                findNextDiff(dv.chunks, line, isOrig);\r\n            if (pos !== null && (found === null ||\r\n                (dir === DiffDirection.Previous ? pos > found : pos < found))) {\r\n                found = pos;\r\n            }\r\n        }\r\n    }\r\n    if (found !== null) {\r\n        cm.getDoc().setCursor(found, 0);\r\n    }\r\n    else {\r\n        return CodeMirror.Pass;\r\n    }\r\n}\r\nCodeMirror.commands.goNextDiff = function (cm) {\r\n    return goNearbyDiff(cm, DiffDirection.Next);\r\n};\r\nCodeMirror.commands.goPrevDiff = function (cm) {\r\n    return goNearbyDiff(cm, DiffDirection.Previous);\r\n};\r\n//# sourceMappingURL=mergeview.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.buildSelect = exports.copyObj = exports.stableSort = exports.intersection = exports.unique = exports.accumulateLengths = exports.repeatString = exports.sortByKey = exports.isPrefixArray = exports.findSharedPrefix = exports.arraysEqual = exports.shallowCopy = exports.deepCopy = exports.splitLines = exports.hasEntries = exports.valueIn = void 0;\r\n/**\r\n * Check whether a value is in an array.\r\n */\r\nfunction valueIn(value, array) {\r\n    return array.indexOf(value) >= 0;\r\n}\r\nexports.valueIn = valueIn;\r\n/**\r\n * Check whether array is null or empty, and type guards agains null\r\n */\r\nfunction hasEntries(array) {\r\n    return array !== null && array.length !== 0;\r\n}\r\nexports.hasEntries = hasEntries;\r\n/**\r\n * Splits a multinline string into an array of lines\r\n *\r\n * @export\r\n * @param {string} multiline\r\n * @returns {string[]}\r\n */\r\nfunction splitLines(multiline) {\r\n    // Split lines (retaining newlines)\r\n    // We use !postfix, as we also match empty string,\r\n    // so we are guaranteed to get at elast one match\r\n    return multiline.match(/^.*(\\r\\n|\\r|\\n|$)/gm);\r\n}\r\nexports.splitLines = splitLines;\r\nfunction deepCopy(obj) {\r\n    if (typeof obj !== 'object') {\r\n        if (valueIn(typeof obj, ['string', 'number', 'boolean'])) {\r\n            return obj;\r\n        }\r\n        throw new TypeError('Cannot deepcopy non-object');\r\n    }\r\n    if (obj === null) {\r\n        return null;\r\n    }\r\n    else if (Array.isArray(obj)) {\r\n        let l = obj.length;\r\n        let o = new Array(l);\r\n        for (let i = 0; i < l; i++) {\r\n            o[i] = deepCopy(obj[i]);\r\n        }\r\n        return o;\r\n    }\r\n    else {\r\n        let a = obj;\r\n        let r = {};\r\n        if (a.prototype !== undefined) {\r\n            r.prototype = a.prototype;\r\n        }\r\n        for (let k in obj) {\r\n            r[k] = deepCopy(a[k]);\r\n        }\r\n        return r;\r\n    }\r\n}\r\nexports.deepCopy = deepCopy;\r\n/**\r\n * Shallow copy routine for objects\r\n */\r\nfunction shallowCopy(original) {\r\n    // First create an empty object with\r\n    // same prototype of our original source\r\n    let clone = Object.create(Object.getPrototypeOf(original));\r\n    for (let k in original) {\r\n        // Don't copy function\r\n        let ok = original[k];\r\n        if (ok !== null && ok !== undefined &&\r\n            ok.hasOwnProperty('constructor') &&\r\n            ok.constructor === Function) {\r\n            continue;\r\n        }\r\n        let pDesc = Object.getOwnPropertyDescriptor(original, k);\r\n        // Don't copy properties with getter\r\n        if (!pDesc || pDesc.get) {\r\n            continue;\r\n        }\r\n        // copy each property into the clone\r\n        Object.defineProperty(clone, k, pDesc);\r\n    }\r\n    return clone;\r\n}\r\nexports.shallowCopy = shallowCopy;\r\n/**\r\n * Do a shallow, element-wise equality comparison on two arrays.\r\n */\r\nfunction arraysEqual(a, b) {\r\n    if (a === b) {\r\n        return true;\r\n    }\r\n    if (a === null || b === null) {\r\n        return false;\r\n    }\r\n    if (a.length !== b.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < a.length; ++i) {\r\n        if (a[i] !== b[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexports.arraysEqual = arraysEqual;\r\n/**\r\n * Find the shared common starting sequence in two arrays\r\n */\r\nfunction findSharedPrefix(a, b) {\r\n    if (a === null || b === null) {\r\n        return null;\r\n    }\r\n    if (a === b) { // Only checking for instance equality\r\n        return a.slice();\r\n    }\r\n    let i = 0;\r\n    for (; i < Math.min(a.length, b.length); ++i) {\r\n        if (a[i] !== b[i]) {\r\n            break;\r\n        }\r\n    }\r\n    return a.slice(0, i);\r\n}\r\nexports.findSharedPrefix = findSharedPrefix;\r\n/**\r\n * Check whether `parent` is contained within the start of `child`\r\n *\r\n * Note on terminology: Parent is here the shortest array, as it will\r\n * be the parent in a tree-view of values, e.g. a path. In other words, parent\r\n * is a subsequence of child.\r\n */\r\nfunction isPrefixArray(parent, child) {\r\n    if (parent === child) {\r\n        return true;\r\n    }\r\n    if (parent === null || parent.length === 0) {\r\n        return true;\r\n    }\r\n    if (child === null || parent.length > child.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < parent.length; ++i) {\r\n        if (parent[i] !== child[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexports.isPrefixArray = isPrefixArray;\r\n/**\r\n * Sort array by attribute `key` (i.e. compare by array[0][key] < array[1][key]). Stable.\r\n */\r\nfunction sortByKey(array, key) {\r\n    return stableSort(array, function (a, b) {\r\n        let x = a[key];\r\n        let y = b[key];\r\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n    });\r\n}\r\nexports.sortByKey = sortByKey;\r\n/**\r\n * Utility function to repeat a string\r\n */\r\nfunction repeatString(str, count) {\r\n    if (count < 1) {\r\n        return '';\r\n    }\r\n    let result = '';\r\n    let pattern = str.valueOf();\r\n    while (count > 1) {\r\n        if (count & 1) {\r\n            result += pattern;\r\n        }\r\n        count >>= 1, pattern += pattern;\r\n    }\r\n    return result + pattern;\r\n}\r\nexports.repeatString = repeatString;\r\n/**\r\n * Calculate the cumulative sum of string lengths for an array of strings\r\n *\r\n * Example:\r\n *   For the arary ['ab', '123', 'y', '\\t\\nfoo'], the output would be\r\n *   [2, 5, 6, 11]\r\n */\r\nfunction accumulateLengths(arr) {\r\n    let ret = [];\r\n    arr.reduce(function (a, b, i) {\r\n        return ret[i] = a + b.length;\r\n    }, 0);\r\n    return ret;\r\n}\r\nexports.accumulateLengths = accumulateLengths;\r\n/**\r\n * Filter for Array.filter to only have unique values\r\n */\r\nfunction unique(value, index, self) {\r\n    return self.indexOf(value) === index;\r\n}\r\nexports.unique = unique;\r\n/**\r\n * Return the intersection of two arrays (with no duplicates)\r\n */\r\nfunction intersection(a, b) {\r\n    let ret = [];\r\n    // Loop over longest, so that indexOf works on shortest\r\n    [a, b] = a.length > b.length ? [a, b] : [b, a];\r\n    for (let ia of a) {\r\n        if (b.indexOf(ia) !== -1) {\r\n            ret.push(ia);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nexports.intersection = intersection;\r\n/**\r\n * Similar to Array.sort, but guaranteed to keep order stable\r\n * when compare function returns 0\r\n */\r\nfunction stableSort(arr, compare) {\r\n    let sorters = [];\r\n    for (let i = 0; i < arr.length; ++i) {\r\n        sorters.push({ index: i, key: arr[i] });\r\n    }\r\n    sorters = sorters.sort((a, b) => {\r\n        return compare(a.key, b.key) || a.index - b.index;\r\n    });\r\n    let out = new Array(arr.length);\r\n    for (let i = 0; i < arr.length; ++i) {\r\n        out[i] = arr[sorters[i].index];\r\n    }\r\n    return out;\r\n}\r\nexports.stableSort = stableSort;\r\nfunction copyObj(obj, target) {\r\n    if (!target) {\r\n        target = {};\r\n    }\r\n    for (let prop in obj) {\r\n        if (obj.hasOwnProperty(prop)) {\r\n            target[prop] = obj[prop];\r\n        }\r\n    }\r\n    return target;\r\n}\r\nexports.copyObj = copyObj;\r\n/**\r\n * Create or populate a select element with string options\r\n */\r\nfunction buildSelect(options, select) {\r\n    if (select === undefined) {\r\n        select = document.createElement('select');\r\n    }\r\n    for (let option of options) {\r\n        let opt = document.createElement('option');\r\n        opt.text = option;\r\n        select.appendChild(opt);\r\n    }\r\n    return select;\r\n}\r\nexports.buildSelect = buildSelect;\r\n//# sourceMappingURL=util.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.validateObjectOp = exports.validateSequenceOp = exports.opPatch = exports.opRemoveRange = exports.opAddRange = exports.opRemove = exports.opAdd = exports.opReplace = void 0;\r\nconst util_1 = require(\"../common/util\");\r\n/** Create a replacement diff entry */\r\nfunction opReplace(key, value) {\r\n    return { op: 'replace', key: key, value: value };\r\n}\r\nexports.opReplace = opReplace;\r\n/** Create an addition diff entry */\r\nfunction opAdd(key, value) {\r\n    return { op: 'add', key: key, value: value };\r\n}\r\nexports.opAdd = opAdd;\r\n/** Create a removal diff entry */\r\nfunction opRemove(key) {\r\n    return { op: 'remove', key: key };\r\n}\r\nexports.opRemove = opRemove;\r\n/** Create a removal diff entry */\r\nfunction opAddRange(key, valuelist) {\r\n    return { op: 'addrange', key: key, valuelist: valuelist };\r\n}\r\nexports.opAddRange = opAddRange;\r\n/** Create a range removal diff entry */\r\nfunction opRemoveRange(key, length) {\r\n    return { op: 'removerange', key: key, length: length };\r\n}\r\nexports.opRemoveRange = opRemoveRange;\r\n/** Create a range removal diff entry */\r\nfunction opPatch(key, diff) {\r\n    return { op: 'patch', key: key, diff: diff };\r\n}\r\nexports.opPatch = opPatch;\r\n/**\r\n * Validate that a diff operation is valid to apply on a given base sequence\r\n */\r\nfunction validateSequenceOp(base, entry) {\r\n    if (typeof entry.key !== 'number') {\r\n        console.info('Invalid patch details', base, entry);\r\n        throw new TypeError(`Invalid patch sequence op: Key is not a number: ${entry.key}`);\r\n    }\r\n    let index = entry.key;\r\n    if (entry.op === 'addrange') {\r\n        if (index < 0 || index > base.length || isNaN(index)) {\r\n            throw new RangeError('Invalid add range diff op: Key out of range: ' + index);\r\n        }\r\n    }\r\n    else if (entry.op === 'removerange') {\r\n        if (index < 0 || index >= base.length || isNaN(index)) {\r\n            throw new RangeError('Invalid remove range diff op: Key out of range: ' + index);\r\n        }\r\n        let skip = entry.length;\r\n        if (index + skip > base.length || isNaN(index)) {\r\n            throw new RangeError('Invalid remove range diff op: Range too long!');\r\n        }\r\n    }\r\n    else if (entry.op === 'patch') {\r\n        if (index < 0 || index >= base.length || isNaN(index)) {\r\n            throw new RangeError('Invalid patch diff op: Key out of range: ' + index);\r\n        }\r\n    }\r\n    else {\r\n        throw new Error('Invalid op: ' + entry.op);\r\n    }\r\n}\r\nexports.validateSequenceOp = validateSequenceOp;\r\n/**\r\n * Validate that a diff operation is valid to apply on a given base object\r\n */\r\nfunction validateObjectOp(base, entry, keys) {\r\n    let op = entry.op;\r\n    if (typeof entry.key !== 'string') {\r\n        console.info('Invalid patch details', base, entry, keys);\r\n        throw new TypeError(`Invalid patch object op: Key is not a string: ${entry.key}`);\r\n    }\r\n    let key = entry.key;\r\n    if (op === 'add') {\r\n        if (util_1.valueIn(key, keys)) {\r\n            throw new Error('Invalid add key diff op: Key already present: ' + key);\r\n        }\r\n    }\r\n    else if (op === 'remove') {\r\n        if (!util_1.valueIn(key, keys)) {\r\n            throw new Error('Invalid remove key diff op: Missing key: ' + key);\r\n        }\r\n    }\r\n    else if (op === 'replace') {\r\n        if (!util_1.valueIn(key, keys)) {\r\n            throw new Error('Invalid replace key diff op: Missing key: ' + key);\r\n        }\r\n    }\r\n    else if (op === 'patch') {\r\n        if (!util_1.valueIn(key, keys)) {\r\n            throw new Error('Invalid patch key diff op: Missing key: ' + key);\r\n        }\r\n    }\r\n    else {\r\n        throw new Error('Invalid op: ' + op);\r\n    }\r\n}\r\nexports.validateObjectOp = validateObjectOp;\r\n//# sourceMappingURL=diffentries.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createDeletedCellDiffModel = exports.createAddedCellDiffModel = exports.createUnchangedCellDiffModel = exports.createPatchedCellDiffModel = exports.CellDiffModel = void 0;\r\nconst nbformat = require(\"@jupyterlab/nbformat\");\r\nconst exceptions_1 = require(\"../../common/exceptions\");\r\nconst util_1 = require(\"../util\");\r\nconst string_1 = require(\"./string\");\r\nconst output_1 = require(\"./output\");\r\nconst immutable_1 = require(\"./immutable\");\r\n/**\r\n * Diff model for individual Notebook Cells\r\n */\r\nclass CellDiffModel {\r\n    constructor(source, metadata, outputs, executionCount, cellType) {\r\n        this.source = source;\r\n        this.metadata = metadata;\r\n        this.outputs = outputs;\r\n        this.executionCount = executionCount;\r\n        this.cellType = cellType;\r\n        if (outputs === null && cellType === 'code') {\r\n            throw new exceptions_1.NotifyUserError('Invalid code cell, missing outputs!');\r\n        }\r\n        this.metadata.collapsible = true;\r\n        this.metadata.collapsibleHeader = 'Metadata changed';\r\n        this.metadata.startCollapsed = true;\r\n    }\r\n    /**\r\n     * Whether the cell has remained unchanged\r\n     */\r\n    get unchanged() {\r\n        let unchanged = this.source.unchanged;\r\n        unchanged = unchanged &&\r\n            (this.metadata ? this.metadata.unchanged : true);\r\n        if (this.outputs) {\r\n            for (let o of this.outputs) {\r\n                unchanged = unchanged && o.unchanged;\r\n            }\r\n        }\r\n        if (this.executionCount) {\r\n            // TODO: Ignore if option 'ignore minor' set?\r\n            unchanged = unchanged && this.executionCount.unchanged;\r\n        }\r\n        return unchanged;\r\n    }\r\n    /**\r\n     * Whether the cell has been added to the notebook (new cell)\r\n     */\r\n    get added() {\r\n        return this.source.added;\r\n    }\r\n    /**\r\n     * Whether the cell has been deleted/removed from the notebook\r\n     */\r\n    get deleted() {\r\n        return this.source.deleted;\r\n    }\r\n    /**\r\n     * Chunked outputs\r\n     */\r\n    getChunkedOutputs() {\r\n        if (this.outputs === null) {\r\n            return null;\r\n        }\r\n        const chunks = [];\r\n        if (this.added || this.deleted) {\r\n            // Should not chunk outputs for added/deleted cells\r\n            // simply make one element chunks:\r\n            for (let o of this.outputs) {\r\n                chunks.push([o]);\r\n            }\r\n        }\r\n        else {\r\n            let currentChunk = [];\r\n            for (let o of this.outputs) {\r\n                if (o.added || o.deleted) {\r\n                    currentChunk.push(o);\r\n                }\r\n                else {\r\n                    if (currentChunk.length) {\r\n                        chunks.push(currentChunk);\r\n                    }\r\n                    chunks.push([o]);\r\n                    currentChunk = [];\r\n                }\r\n            }\r\n            if (currentChunk.length) {\r\n                chunks.push(currentChunk);\r\n            }\r\n        }\r\n        return chunks;\r\n    }\r\n}\r\nexports.CellDiffModel = CellDiffModel;\r\nfunction createPatchedCellDiffModel(base, diff, nbMimetype) {\r\n    let source = null;\r\n    let metadata = null;\r\n    let outputs = null;\r\n    let executionCount = null;\r\n    let subDiff = util_1.getSubDiffByKey(diff, 'source');\r\n    if (subDiff) {\r\n        source = string_1.createPatchStringDiffModel(base.source, subDiff);\r\n    }\r\n    else {\r\n        source = string_1.createDirectStringDiffModel(base.source, base.source);\r\n    }\r\n    string_1.setMimetypeFromCellType(source, base, nbMimetype);\r\n    subDiff = util_1.getSubDiffByKey(diff, 'metadata');\r\n    metadata = subDiff ?\r\n        string_1.createPatchStringDiffModel(base.metadata, subDiff) :\r\n        string_1.createDirectStringDiffModel(base.metadata, base.metadata);\r\n    if (nbformat.isCode(base)) {\r\n        let outputsBase = base.outputs;\r\n        let outputsDiff = util_1.getSubDiffByKey(diff, 'outputs');\r\n        if (outputsDiff) {\r\n            // Outputs patched\r\n            outputs = output_1.makeOutputModels(outputsBase, null, outputsDiff);\r\n        }\r\n        else {\r\n            // Outputs unchanged\r\n            outputs = output_1.makeOutputModels(outputsBase, outputsBase);\r\n        }\r\n        let execBase = base.execution_count;\r\n        let execDiff = util_1.getDiffEntryByKey(diff, 'execution_count');\r\n        // Pass base as remote, which means fall back to unchanged if no diff:\r\n        executionCount = immutable_1.createImmutableModel(execBase, execBase, execDiff);\r\n    }\r\n    return new CellDiffModel(source, metadata, outputs, executionCount, base.cell_type);\r\n}\r\nexports.createPatchedCellDiffModel = createPatchedCellDiffModel;\r\nfunction createUnchangedCellDiffModel(base, nbMimetype) {\r\n    let source = string_1.createDirectStringDiffModel(base.source, base.source);\r\n    string_1.setMimetypeFromCellType(source, base, nbMimetype);\r\n    let metadata = string_1.createDirectStringDiffModel(base.metadata, base.metadata);\r\n    let outputs = null;\r\n    let executionCount = null;\r\n    if (nbformat.isCode(base)) {\r\n        outputs = output_1.makeOutputModels(base.outputs, base.outputs);\r\n        let execBase = base.execution_count;\r\n        executionCount = immutable_1.createImmutableModel(execBase, execBase);\r\n    }\r\n    else { // markdown or raw cell\r\n    }\r\n    return new CellDiffModel(source, metadata, outputs, executionCount, base.cell_type);\r\n}\r\nexports.createUnchangedCellDiffModel = createUnchangedCellDiffModel;\r\nfunction createAddedCellDiffModel(remote, nbMimetype) {\r\n    let source = string_1.createDirectStringDiffModel(null, remote.source);\r\n    string_1.setMimetypeFromCellType(source, remote, nbMimetype);\r\n    let metadata = string_1.createDirectStringDiffModel(null, remote.metadata);\r\n    let outputs = null;\r\n    let executionCount = null;\r\n    if (nbformat.isCode(remote)) {\r\n        outputs = output_1.makeOutputModels(null, remote.outputs);\r\n        executionCount = immutable_1.createImmutableModel(null, remote.execution_count);\r\n    }\r\n    return new CellDiffModel(source, metadata, outputs, executionCount, remote.cell_type);\r\n}\r\nexports.createAddedCellDiffModel = createAddedCellDiffModel;\r\nfunction createDeletedCellDiffModel(base, nbMimetype) {\r\n    let source = string_1.createDirectStringDiffModel(base.source, null);\r\n    string_1.setMimetypeFromCellType(source, base, nbMimetype);\r\n    let metadata = string_1.createDirectStringDiffModel(base.metadata, null);\r\n    let outputs = null;\r\n    let executionCount = null;\r\n    if (nbformat.isCode(base)) {\r\n        outputs = output_1.makeOutputModels(base.outputs, null);\r\n        let execBase = base.execution_count;\r\n        executionCount = immutable_1.createImmutableModel(execBase, null);\r\n    }\r\n    return new CellDiffModel(source, metadata, outputs, executionCount, base.cell_type);\r\n}\r\nexports.createDeletedCellDiffModel = createDeletedCellDiffModel;\r\n//# sourceMappingURL=cell.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=common.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createImmutableModel = exports.ImmutableDiffModel = void 0;\r\n/**\r\n * Standard implementation of the IStringDiffModel interface.\r\n */\r\nclass ImmutableDiffModel {\r\n    /**\r\n     * ImmutableDiffModel constructor.\r\n     *\r\n     * `collapsible` and `collapsed` both defaults to false.\r\n     */\r\n    constructor(base, remote, collapsible, header, collapsed) {\r\n        this.base = base;\r\n        this.remote = remote;\r\n        this.collapsible = collapsible === true;\r\n        if (this.collapsible) {\r\n            this.collapsibleHeader = header ? header : '';\r\n            this.startCollapsed = collapsed === true;\r\n        }\r\n    }\r\n    get unchanged() {\r\n        return this.base === this.remote;\r\n    }\r\n    get added() {\r\n        return this.base === undefined;\r\n    }\r\n    get deleted() {\r\n        return this.remote === undefined;\r\n    }\r\n}\r\nexports.ImmutableDiffModel = ImmutableDiffModel;\r\n/**\r\n * Create an ImmutableDiffModel from a base value, a remote value, and a single diff entry.\r\n *\r\n * Note: The requirement of a single diff entry means it will not support\r\n * an add/replace pair on the same key, as this should instead be represented\r\n * by a 'replace' op.\r\n *\r\n * @export\r\n * @param {(ImmutableValue | undefined)} base : The base value\r\n * @param {(IDiffImmutableObjectEntry | null)} diff : The diff entry, or null if unchanged\r\n * @returns {ImmutableDiffModel}\r\n */\r\nfunction createImmutableModel(base, remote, diff) {\r\n    if (!diff) {\r\n        return new ImmutableDiffModel(base, remote);\r\n    }\r\n    else if (diff.op === 'add') {\r\n        if (base !== undefined) {\r\n            throw new Error('Invalid diff op on immutable value');\r\n        }\r\n        return new ImmutableDiffModel(base, diff.value);\r\n    }\r\n    else if (diff.op === 'remove') {\r\n        if (base === undefined) {\r\n            throw new Error('Invalid diff op on immutable value');\r\n        }\r\n        return new ImmutableDiffModel(base, undefined);\r\n    }\r\n    else { // diff.op === 'replace'\r\n        if (base === undefined) {\r\n            throw new Error('Invalid diff op on immutable value');\r\n        }\r\n        return new ImmutableDiffModel(base, diff.value);\r\n    }\r\n}\r\nexports.createImmutableModel = createImmutableModel;\r\n//# sourceMappingURL=immutable.js.map","\"use strict\";\r\n// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./cell\"), exports);\r\n__exportStar(require(\"./common\"), exports);\r\n__exportStar(require(\"./immutable\"), exports);\r\n__exportStar(require(\"./notebook\"), exports);\r\n__exportStar(require(\"./output\"), exports);\r\n__exportStar(require(\"./renderable\"), exports);\r\n__exportStar(require(\"./string\"), exports);\r\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NotebookDiffModel = void 0;\r\nconst util_1 = require(\"../util\");\r\nconst string_1 = require(\"./string\");\r\nconst cell_1 = require(\"./cell\");\r\n/**\r\n * Diff model for a Jupyter Notebook\r\n */\r\nclass NotebookDiffModel {\r\n    /**\r\n     * Create a new NotebookDiffModel from a base notebook and a list of diffs.\r\n     *\r\n     * The base as well as the diff entries are normally supplied by the nbdime\r\n     * server.\r\n     */\r\n    constructor(base, diff) {\r\n        // Process global notebook metadata field\r\n        let metaDiff = util_1.getSubDiffByKey(diff, 'metadata');\r\n        if (base.metadata && metaDiff) {\r\n            this.metadata = string_1.createPatchStringDiffModel(base.metadata, metaDiff);\r\n        }\r\n        else {\r\n            this.metadata = null;\r\n        }\r\n        if (this.metadata) {\r\n            this.metadata.collapsible = true;\r\n            this.metadata.collapsibleHeader = 'Notebook metadata changed';\r\n            this.metadata.startCollapsed = true;\r\n        }\r\n        // The notebook metadata MIME type is used for determining the MIME type\r\n        // of source cells, so store it easily accessible:\r\n        let mimetype;\r\n        try {\r\n            mimetype = base.metadata.language_info.mimetype;\r\n        }\r\n        catch (e) {\r\n            // missing metadata (probably old notebook)\r\n        }\r\n        this.mimetype = mimetype || 'text/python';\r\n        // Build cell diff models. Follows similar logic to patching code:\r\n        this.cells = [];\r\n        this.chunkedCells = [];\r\n        let take = 0;\r\n        let skip = 0;\r\n        let previousChunkIndex = -1;\r\n        let currentChunk = [];\r\n        for (let e of util_1.getSubDiffByKey(diff, 'cells') || []) {\r\n            let index = e.key;\r\n            // diff is sorted on index, so take any preceding cells as unchanged:\r\n            for (let i = take; i < index; i++) {\r\n                let cell = cell_1.createUnchangedCellDiffModel(base.cells[i], this.mimetype);\r\n                this.cells.push(cell);\r\n                this.chunkedCells.push([cell]);\r\n            }\r\n            if (index !== previousChunkIndex) {\r\n                currentChunk = [];\r\n                this.chunkedCells.push(currentChunk);\r\n                previousChunkIndex = index;\r\n            }\r\n            // Process according to diff type:\r\n            if (e.op === 'addrange') {\r\n                // One or more inserted/added cells:\r\n                for (let ei of e.valuelist) {\r\n                    let cell = cell_1.createAddedCellDiffModel(ei, this.mimetype);\r\n                    this.cells.push(cell);\r\n                    currentChunk.push(cell);\r\n                }\r\n                skip = 0;\r\n            }\r\n            else if (e.op === 'removerange') {\r\n                // One or more removed/deleted cells:\r\n                skip = e.length;\r\n                for (let i = index; i < index + skip; i++) {\r\n                    let cell = cell_1.createDeletedCellDiffModel(base.cells[i], this.mimetype);\r\n                    this.cells.push(cell);\r\n                    currentChunk.push(cell);\r\n                }\r\n            }\r\n            else if (e.op === 'patch') {\r\n                // Ensure patches gets their own chunk, even if they share index:\r\n                if (currentChunk.length > 0) {\r\n                    currentChunk = [];\r\n                    this.chunkedCells.push(currentChunk);\r\n                }\r\n                // A cell has changed:\r\n                let cell = cell_1.createPatchedCellDiffModel(base.cells[index], e.diff, this.mimetype);\r\n                this.cells.push(cell);\r\n                currentChunk.push(cell);\r\n                skip = 1;\r\n            }\r\n            // Skip the specified number of elements, but never decrement take.\r\n            // Note that take can pass index in diffs with repeated +/- on the\r\n            // same index, i.e. [op_remove(index), op_add(index, value)]\r\n            take = Math.max(take, index + skip);\r\n        }\r\n        // Take unchanged values at end\r\n        for (let i = take; i < base.cells.length; i++) {\r\n            let cell = cell_1.createUnchangedCellDiffModel(base.cells[i], this.mimetype);\r\n            this.cells.push(cell);\r\n            this.chunkedCells.push([cell]);\r\n        }\r\n    }\r\n}\r\nexports.NotebookDiffModel = NotebookDiffModel;\r\n//# sourceMappingURL=notebook.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.makeOutputModels = exports.OutputDiffModel = void 0;\r\nconst nbformat = require(\"@jupyterlab/nbformat\");\r\nconst exceptions_1 = require(\"../../common/exceptions\");\r\nconst renderable_1 = require(\"./renderable\");\r\nconst TEXT_MIMETYPES = ['text/plain', 'application/vnd.jupyter.stdout',\r\n    'application/vnd.jupyter.stderr'];\r\n/**\r\n * Diff model for single cell output entries.\r\n *\r\n * Can converted to a StringDiffModel via the method `stringify()`, which also\r\n * takes an optional argument `key` which specifies a subpath of the IOutput to\r\n * make the model from.\r\n */\r\nclass OutputDiffModel extends renderable_1.RenderableDiffModel {\r\n    /**\r\n     * Checks whether the given mimetype is present in the output's mimebundle.\r\n     * If so, it returns the path/key to that mimetype's data. If not present,\r\n     * it returns null.\r\n     *\r\n     * See also: innerMimeType\r\n     */\r\n    hasMimeType(mimetype) {\r\n        let outputs = this.base || this.remote;\r\n        if (nbformat.isStream(outputs) &&\r\n            TEXT_MIMETYPES.indexOf(mimetype) !== -1) {\r\n            return 'text';\r\n        }\r\n        else if (nbformat.isError(outputs)) {\r\n            return 'traceback';\r\n        }\r\n        else if (nbformat.isExecuteResult(outputs) || nbformat.isDisplayData(outputs)) {\r\n            let data = outputs.data;\r\n            if (mimetype in data) {\r\n                return ['data', mimetype];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Returns the expected MIME type of the IOutput subpath specified by `key`,\r\n     * as determined by the notebook format specification.\r\n     *\r\n     * Throws an error for unknown keys.\r\n     *\r\n     * See also: hasMimeType\r\n     */\r\n    innerMimeType(key) {\r\n        let t = (this.base || this.remote).output_type;\r\n        if (t === 'stream' && key === 'text' || t === 'error' && key === 'traceback') {\r\n            // TODO: 'application/vnd.jupyter.console-text'?\r\n            return 'text/plain';\r\n        }\r\n        else if ((t === 'execute_result' || t === 'display_data') &&\r\n            Array.isArray(key)) {\r\n            return key[1];\r\n        }\r\n        throw new exceptions_1.NotifyUserError('Unknown MIME type for key: ' + key);\r\n    }\r\n    /**\r\n     * Can be converted to a StringDiffModel via the method `stringify()`, which also\r\n     * takes an optional argument `key` which specifies a subpath of the IOutput to\r\n     * make the model from.\r\n     */\r\n    stringify(key) {\r\n        let model = super.stringify(key);\r\n        if (key) {\r\n            model.mimetype = this.innerMimeType(key);\r\n        }\r\n        return model;\r\n    }\r\n}\r\nexports.OutputDiffModel = OutputDiffModel;\r\n/**\r\n * Function used to create a list of models for a list diff\r\n *\r\n * - If base and remote are both non-null and equal, it returns\r\n *   a list of models representing unchanged entries.\r\n * - If base and a diff is given, it ignores remote and returns\r\n *   a list of models representing the diff.\r\n * - If base is null, it returns a list of models representing\r\n *   added entries.\r\n * - If remote is null, it returns a list of models representing\r\n *   deleted entries.\r\n */\r\nfunction makeOutputModels(base, remote, diff) {\r\n    let models = [];\r\n    if (remote === null && !diff) {\r\n        if (base === null) {\r\n            throw new Error('Either base or remote need to be specififed!');\r\n        }\r\n        // Cell deleted\r\n        for (let o of base) {\r\n            models.push(new OutputDiffModel(o, null));\r\n        }\r\n    }\r\n    else if (base === null) {\r\n        if (remote === null) {\r\n            throw new Error('Either base or remote need to be specififed!');\r\n        }\r\n        // Cell added\r\n        for (let o of remote) {\r\n            models.push(new OutputDiffModel(null, o));\r\n        }\r\n    }\r\n    else if (remote === base) {\r\n        // All entries unchanged\r\n        for (let o of base) {\r\n            models.push(new OutputDiffModel(o, o));\r\n        }\r\n    }\r\n    else if (diff) {\r\n        // Entries patched, remote will be null\r\n        let consumed = 0;\r\n        let skip = 0;\r\n        for (let d of diff) {\r\n            let index = d.key;\r\n            for (let o of base.slice(consumed, index)) {\r\n                // Add unchanged entries\r\n                models.push(new OutputDiffModel(o, o));\r\n            }\r\n            if (d.op === 'addrange') {\r\n                // Entries added\r\n                for (let o of d.valuelist) {\r\n                    models.push(new OutputDiffModel(null, o));\r\n                }\r\n                skip = 0;\r\n            }\r\n            else if (d.op === 'removerange') {\r\n                // Entries removed\r\n                let len = d.length;\r\n                for (let i = index; i < index + len; i++) {\r\n                    models.push(new OutputDiffModel(base[i], null));\r\n                }\r\n                skip = len;\r\n            }\r\n            else if (d.op === 'patch') {\r\n                // Entry changed\r\n                models.push(new OutputDiffModel(base[index], null, d.diff));\r\n                skip = 1;\r\n            }\r\n            else {\r\n                throw new Error('Invalid diff operation: ' + d);\r\n            }\r\n            consumed = Math.max(consumed, index + skip);\r\n        }\r\n        for (let o of base.slice(consumed)) {\r\n            // Add unchanged entries\r\n            models.push(new OutputDiffModel(o, o));\r\n        }\r\n    }\r\n    else {\r\n        throw new Error('Invalid arguments to makeOutputModels()');\r\n    }\r\n    return models;\r\n}\r\nexports.makeOutputModels = makeOutputModels;\r\n//# sourceMappingURL=output.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderableDiffModel = void 0;\r\nconst coreutils_1 = require(\"@lumino/coreutils\");\r\nconst signaling_1 = require(\"@lumino/signaling\");\r\nconst util_1 = require(\"../util\");\r\nconst patch_1 = require(\"../../patch\");\r\nconst string_1 = require(\"./string\");\r\n/**\r\n * Diff model for a renderable object (something that has an internal MimeBundle)\r\n *\r\n * Can be converted to a StringDiffModel via the method `stringify()`, which also\r\n * takes an optional argument `key` which specifies a subpath of the IOutput to\r\n * make the model from.\r\n */\r\nclass RenderableDiffModel {\r\n    constructor(base, remote, diff) {\r\n        this.trustedChanged = new signaling_1.Signal(this);\r\n        if (!remote && !base) {\r\n            throw new Error('Either remote or base value need to be given');\r\n        }\r\n        this.base = base;\r\n        if (!remote && diff) {\r\n            this.remote = patch_1.patch(base, diff);\r\n        }\r\n        else {\r\n            this.remote = remote;\r\n        }\r\n        this.diff = diff || null;\r\n        this.collapsible = false;\r\n    }\r\n    get unchanged() {\r\n        return JSON.stringify(this.base) === JSON.stringify(this.remote);\r\n    }\r\n    get added() {\r\n        return this.base === null;\r\n    }\r\n    get deleted() {\r\n        return this.remote === null;\r\n    }\r\n    /**\r\n     * Convert to a StringDiffModel.\r\n     *\r\n     * Takes an optional argument `key` which specifies a subpath of the MimeBundle to\r\n     * make the model from.\r\n     */\r\n    stringify(key) {\r\n        let getMemberByPath = function (obj, key, f) {\r\n            if (!obj) {\r\n                return obj;\r\n            }\r\n            if (Array.isArray(key)) {\r\n                const tail = key.length > 2 ? key.slice(1) : key[1];\r\n                if (f) {\r\n                    return getMemberByPath(f(obj, key[0]), tail, f);\r\n                }\r\n                return getMemberByPath(obj[key[0]], tail, f);\r\n            }\r\n            else if (f) {\r\n                return f(obj, key);\r\n            }\r\n            return obj[key];\r\n        };\r\n        const baseCopy = coreutils_1.JSONExt.deepCopy(this.base);\r\n        let base = key ? getMemberByPath(baseCopy, key) : baseCopy;\r\n        const remoteCopy = coreutils_1.JSONExt.deepCopy(this.remote);\r\n        let remote = key ? getMemberByPath(remoteCopy, key) : remoteCopy;\r\n        let diff = (this.diff && key) ?\r\n            getMemberByPath(this.diff, key, util_1.getSubDiffByKey) :\r\n            this.diff;\r\n        let model = null;\r\n        if (this.unchanged || this.added || this.deleted || !diff) {\r\n            model = string_1.createDirectStringDiffModel(base, remote);\r\n        }\r\n        else {\r\n            model = string_1.createPatchStringDiffModel(base, diff);\r\n        }\r\n        model.mimetype = key ? this.innerMimeType(key) : 'application/json';\r\n        model.collapsible = this.collapsible;\r\n        model.collapsibleHeader = this.collapsibleHeader;\r\n        model.startCollapsed = this.startCollapsed;\r\n        return model;\r\n    }\r\n    /**\r\n     * Whether outputs are trusted\r\n     */\r\n    get trusted() {\r\n        return this._trusted;\r\n    }\r\n    set trusted(value) {\r\n        if (this._trusted !== value) {\r\n            this._trusted = value;\r\n            this.trustedChanged.emit(value);\r\n        }\r\n    }\r\n    /**\r\n     * The present values of model.base/remote\r\n     */\r\n    get contents() {\r\n        let ret = [];\r\n        if (this.base) {\r\n            ret.push(this.base);\r\n        }\r\n        if (this.remote && this.remote !== this.base) {\r\n            ret.push(this.remote);\r\n        }\r\n        return ret;\r\n    }\r\n}\r\nexports.RenderableDiffModel = RenderableDiffModel;\r\n//# sourceMappingURL=renderable.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.setMimetypeFromCellType = exports.createDirectStringDiffModel = exports.createPatchStringDiffModel = exports.StringDiffModel = void 0;\r\nconst nbformat = require(\"@jupyterlab/nbformat\");\r\nconst coreutils_1 = require(\"@lumino/coreutils\");\r\nconst range_1 = require(\"../range\");\r\nconst chunking_1 = require(\"../../chunking\");\r\nconst patch_1 = require(\"../../patch\");\r\n/**\r\n * Standard implementation of the IStringDiffModel interface.\r\n */\r\nclass StringDiffModel {\r\n    /**\r\n     * StringDiffModel constructor.\r\n     *\r\n     * Will translate additions and deletions from absolute\r\n     * coordinates, into {line, ch} based coordinates.\r\n     * Both should be sorted on the `from` position before passing.\r\n     *\r\n     * Collapsible and collapsed both defaults to false.\r\n     */\r\n    constructor(base, remote, additions, deletions, collapsible, header, collapsed) {\r\n        this.base = base;\r\n        this.remote = remote;\r\n        if (base === null) {\r\n            console.assert(deletions.length === 0);\r\n            this.deletions = [];\r\n        }\r\n        else {\r\n            this.deletions = range_1.raw2Pos(deletions, base);\r\n        }\r\n        if (remote === null) {\r\n            console.assert(additions.length === 0);\r\n            this.additions = [];\r\n        }\r\n        else {\r\n            this.additions = range_1.raw2Pos(additions, remote);\r\n        }\r\n        this.collapsible = collapsible === true;\r\n        if (this.collapsible) {\r\n            this.collapsibleHeader = header ? header : '';\r\n            this.startCollapsed = collapsed === true;\r\n        }\r\n    }\r\n    iterateDiffs() {\r\n        return new StringDiffModel.DiffIter(this);\r\n    }\r\n    /**\r\n     * Chunk additions/deletions into line-based chunks\r\n     */\r\n    getLineChunks() {\r\n        let chunker = new chunking_1.LineChunker();\r\n        let i = this.iterateDiffs();\r\n        for (let v = i.next(); v !== undefined; v = i.next()) {\r\n            chunker.addDiff(v.range, v.isAddition);\r\n        }\r\n        return chunker.chunks;\r\n    }\r\n    get unchanged() {\r\n        return this.base === this.remote;\r\n    }\r\n    get added() {\r\n        return this.base === null;\r\n    }\r\n    get deleted() {\r\n        return this.remote === null;\r\n    }\r\n}\r\nexports.StringDiffModel = StringDiffModel;\r\n(function (StringDiffModel) {\r\n    class DiffIter {\r\n        constructor(model) {\r\n            this.editOffset = 0;\r\n            this.done = false;\r\n            this.ia = 0;\r\n            this.id = 0;\r\n            this.hintTakeDeletion = false;\r\n            this.model = model;\r\n        }\r\n        next() {\r\n            // Figure out which element to take next\r\n            let isAddition = null;\r\n            let range = null;\r\n            let additions = this.model.additions;\r\n            let deletions = this.model.deletions;\r\n            let hintTakeDeletion = this.hintTakeDeletion;\r\n            this.hintTakeDeletion = false;\r\n            if (this.ia < this.model.additions.length) {\r\n                if (this.id < deletions.length) {\r\n                    let ra = additions[this.ia];\r\n                    let rd = deletions[this.id];\r\n                    if (ra.from.line === rd.from.line - this.editOffset &&\r\n                        ra.from.ch === rd.from.ch) {\r\n                        // An addition and deletion start at seemingly same location\r\n                        // Take addition, and flag to ensure deletion gets taken next\r\n                        if (hintTakeDeletion) {\r\n                            isAddition = false;\r\n                        }\r\n                        else {\r\n                            this.hintTakeDeletion = true;\r\n                            isAddition = true;\r\n                        }\r\n                    }\r\n                    else if (ra.from.line < rd.from.line - this.editOffset ||\r\n                        (ra.from.line === rd.from.line - this.editOffset &&\r\n                            ra.from.ch < rd.from.ch)) {\r\n                        // TODO: Character editOffset should also be used\r\n                        isAddition = true;\r\n                    }\r\n                    else {\r\n                        isAddition = false;\r\n                    }\r\n                }\r\n                else {\r\n                    // No more deletions\r\n                    isAddition = true;\r\n                }\r\n            }\r\n            else if (this.id < deletions.length) {\r\n                // No more additions\r\n                isAddition = false;\r\n            }\r\n            else {\r\n                // Out of ranges!\r\n                this.done = true;\r\n                return undefined;\r\n            }\r\n            if (isAddition) {\r\n                range = additions[this.ia++];\r\n            }\r\n            else {\r\n                range = deletions[this.id++];\r\n            }\r\n            let linediff = range.to.line - range.from.line;\r\n            if (range.endsOnNewline) {\r\n                linediff += 1;\r\n            }\r\n            this.editOffset += isAddition ? -linediff : linediff;\r\n            return { range: range, isAddition: isAddition };\r\n        }\r\n    }\r\n    StringDiffModel.DiffIter = DiffIter;\r\n    class SyncedDiffIter {\r\n        constructor(models) {\r\n            this.currentOffset = 0;\r\n            this.models = [];\r\n            this.iterators = [];\r\n            this.values = [];\r\n            this.offsets = [];\r\n            // Set up iterator and dummy chunkers for other models\r\n            for (let m of models) {\r\n                if (m === null) {\r\n                    continue;\r\n                }\r\n                this.models.push(m);\r\n                let it = m.iterateDiffs();\r\n                this.iterators.push(it);\r\n                this.offsets.push(0);\r\n                this.values.push(it.next());\r\n            }\r\n        }\r\n        static cmp(a, b, offsetA, offsetB) {\r\n            if (a === undefined && b === undefined) {\r\n                return 0;\r\n            }\r\n            else if (a === undefined) {\r\n                return 1;\r\n            }\r\n            else if (b === undefined) {\r\n                return -1;\r\n            }\r\n            let lineA = a.range.from.line + (a.isAddition ? offsetA : 0);\r\n            let lineB = b.range.from.line + (b.isAddition ? offsetB : 0);\r\n            if (lineA < lineB || a.range.from.ch < b.range.from.ch) {\r\n                return -1;\r\n            }\r\n            else if (lineA > lineB || a.range.from.ch > b.range.from.ch) {\r\n                return 1;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        }\r\n        next() {\r\n            // Compare in base index to see which diff is next\r\n            let i = 0;\r\n            for (let j = 1; j < this.values.length; ++j) {\r\n                if (0 > SyncedDiffIter.cmp(this.values[j], this.values[i], this.iterators[j].editOffset, this.iterators[i].editOffset)) {\r\n                    i = j;\r\n                }\r\n            }\r\n            this.i = i;\r\n            let ret = this.values[i];\r\n            // Store the edit offset before taking next value\r\n            this.currentOffset = this.offsets[i];\r\n            this.offsets[i] = this.iterators[i].editOffset;\r\n            // Check if complete\r\n            if (ret !== undefined) {\r\n                this.values[i] = this.iterators[i].next();\r\n            }\r\n            return ret;\r\n        }\r\n        currentModel() {\r\n            return this.models[this.i];\r\n        }\r\n    }\r\n    StringDiffModel.SyncedDiffIter = SyncedDiffIter;\r\n})(StringDiffModel = exports.StringDiffModel || (exports.StringDiffModel = {}));\r\n/**\r\n * Creates a StringDiffModel based on a patch operation.\r\n *\r\n * If base is not a string, it is assumed to be a JSON object/array,\r\n * and it will be stringified according to JSON stringification\r\n * rules.\r\n */\r\nfunction createPatchStringDiffModel(base, diff) {\r\n    console.assert(!!diff, 'Patch model needs diff.');\r\n    const baseCopy = coreutils_1.JSONExt.deepCopy(base);\r\n    let baseStr = patch_1.stringifyAndBlankNull(baseCopy);\r\n    let out = patch_1.patchStringified(baseCopy, diff);\r\n    return new StringDiffModel(baseStr, out.remote, out.additions, out.deletions);\r\n}\r\nexports.createPatchStringDiffModel = createPatchStringDiffModel;\r\n/**\r\n * Factory for creating cell diff models for added, removed or unchanged content.\r\n *\r\n * If base is null, it will be treated as added, if remote is null it will be\r\n * treated as removed. Otherwise base and remote should be equal, represeting\r\n * unchanged content.\r\n */\r\nfunction createDirectStringDiffModel(base, remote) {\r\n    let baseStr = patch_1.stringifyAndBlankNull(base);\r\n    let remoteStr = patch_1.stringifyAndBlankNull(remote);\r\n    let additions = [];\r\n    let deletions = [];\r\n    if (base === null && remote === null) {\r\n        throw new Error('Invalid arguments to createDirectStringDiffModel(). ' +\r\n            'Both base and remote cannot be equal!');\r\n    }\r\n    else if (base === null) {\r\n        // Added cell\r\n        baseStr = null;\r\n        additions.push(new range_1.DiffRangeRaw(0, remoteStr.length, undefined));\r\n    }\r\n    else if (remote === null) {\r\n        // Deleted cell\r\n        remoteStr = null;\r\n        deletions.push(new range_1.DiffRangeRaw(0, baseStr.length, undefined));\r\n    }\r\n    else if (remoteStr !== baseStr) {\r\n        throw new Error('Invalid arguments to createDirectStringDiffModel(). ' +\r\n            'Either base or remote should be null, or they should be equal!');\r\n    }\r\n    return new StringDiffModel(baseStr, remoteStr, additions, deletions);\r\n}\r\nexports.createDirectStringDiffModel = createDirectStringDiffModel;\r\n/**\r\n * Assign MIME type to an IStringDiffModel based on the cell type.\r\n *\r\n * The parameter nbMimetype is the MIME type set for the entire notebook, and is\r\n * used as the MIME type for code cells.\r\n */\r\nfunction setMimetypeFromCellType(model, cell, nbMimetype) {\r\n    if (cell.cell_type === 'code') {\r\n        model.mimetype = nbMimetype;\r\n    }\r\n    else if (cell.cell_type === 'markdown') {\r\n        model.mimetype = 'text/markdown';\r\n    }\r\n    else if (nbformat.isRaw(cell)) {\r\n        model.mimetype = cell.metadata.format || 'text/plain';\r\n    }\r\n}\r\nexports.setMimetypeFromCellType = setMimetypeFromCellType;\r\n//# sourceMappingURL=string.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.raw2Pos = exports.DiffRangePos = exports.DiffRangeRaw = void 0;\r\nconst CodeMirror = require(\"codemirror\");\r\nconst util_1 = require(\"../common/util\");\r\n/**\r\n * Represents a range in a diff (typically in a string), in absolute indices (1D)\r\n */\r\nclass DiffRangeRaw {\r\n    /**\r\n     * Create a new range [from, to = from + length)\r\n     */\r\n    constructor(from, length, source) {\r\n        this.from = from;\r\n        this.to = from + length;\r\n        this.source = source;\r\n    }\r\n    /**\r\n     * Change both `from` and `to` fields by the given offset\r\n     */\r\n    offset(offset) {\r\n        this.from += offset;\r\n        this.to += offset;\r\n    }\r\n}\r\nexports.DiffRangeRaw = DiffRangeRaw;\r\n/**\r\n * Class representing a string (diff) range in the format of\r\n * CodeMirror.Positions. Mainly makes sense for string diffs.\r\n *\r\n * The class also has fields to ease chunking of diffs without reparsing the\r\n * text.\r\n */\r\nclass DiffRangePos {\r\n    /**\r\n     * Create a diff range. The `ch` field of the `to` position is defined as\r\n     * non-inclusive, i.e., it follows the syntax of String.slice().\r\n     */\r\n    constructor(from, to, chunkStartLine, endsOnNewline) {\r\n        this.from = from;\r\n        this.to = to;\r\n        this.chunkStartLine = chunkStartLine === true;\r\n        this.endsOnNewline = endsOnNewline === true;\r\n    }\r\n}\r\nexports.DiffRangePos = DiffRangePos;\r\n/**\r\n * Utility function to find the line number of a given string index,\r\n * given the positions of all newlines.\r\n */\r\nfunction findLineNumber(nlPos, index) {\r\n    if (nlPos.length === 0) {\r\n        return 0;\r\n    }\r\n    let lineNo = null;\r\n    nlPos.some(function (el, i) {\r\n        if (el >= index) {\r\n            lineNo = i;\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n    if (lineNo === null) {\r\n        return nlPos.length;\r\n    }\r\n    return lineNo;\r\n}\r\n/**\r\n * Function to convert an array of DiffRangeRaw to DiffRangePos. The\r\n * `text` parameter is the text in which the ranges exist.\r\n */\r\nfunction raw2Pos(raws, text) {\r\n    // Find all newline's indices in text\r\n    let adIdx = [];\r\n    let i = -1;\r\n    while (-1 !== (i = text.indexOf('\\n', i + 1))) {\r\n        adIdx.push(i);\r\n    }\r\n    let result = [];\r\n    // Find line numbers from raw index\r\n    for (let r of raws) {\r\n        // First `from` position:\r\n        let line = findLineNumber(adIdx, r.from);\r\n        let lineStartIdx = line > 0 ? adIdx[line - 1] + 1 : 0;\r\n        let from = CodeMirror.Pos(line, r.from - lineStartIdx);\r\n        // Then `to` position:\r\n        line = findLineNumber(adIdx, r.to - 1); // `to` is non-inclusive\r\n        lineStartIdx = line > 0 ? adIdx[line - 1] + 1 : 0;\r\n        let to = CodeMirror.Pos(line, r.to - lineStartIdx);\r\n        // Finally, add some chunking hints:\r\n        let startsOnNewLine = util_1.valueIn(r.from, adIdx);\r\n        let endsOnNewline = util_1.valueIn(r.to - 1, adIdx); // non-inclusive\r\n        let firstLineNew = from.ch === 0 && (from.line !== to.line || endsOnNewline || r.to === text.length);\r\n        let chunkFirstLine = (firstLineNew ||\r\n            !startsOnNewLine ||\r\n            (\r\n            // Neither preceding nor following character is a newline\r\n            !util_1.valueIn(r.from - 1, adIdx) &&\r\n                !util_1.valueIn(r.to, adIdx)));\r\n        let pos = new DiffRangePos(from, to, chunkFirstLine, endsOnNewline);\r\n        pos.source = r.source;\r\n        result.push(pos);\r\n    }\r\n    return result;\r\n}\r\nexports.raw2Pos = raw2Pos;\r\n//# sourceMappingURL=range.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.flattenStringDiff = exports.stripSource = exports.getDiffEntryByKey = exports.getSubDiffByKey = exports.JSON_INDENT = void 0;\r\nconst util_1 = require(\"../common/util\");\r\nconst diffentries_1 = require(\"./diffentries\");\r\n/**\r\n * The indentation to use for JSON stringify.\r\n */\r\nexports.JSON_INDENT = '  ';\r\n/**\r\n * Search the list of diffs for an entry with the given key.\r\n *\r\n * Returns the first found entry, or null if not entry was found.\r\n */\r\nfunction getSubDiffByKey(diff, key) {\r\n    if (!diff) {\r\n        return null;\r\n    }\r\n    for (let i = 0; i < diff.length; ++i) {\r\n        if (diff[i].key === key) {\r\n            return diff[i].diff || null;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexports.getSubDiffByKey = getSubDiffByKey;\r\n/**\r\n * Search the list of diffs for an entry with the given key.\r\n *\r\n * Returns the first found entry, or null if not entry was found.\r\n */\r\nfunction getDiffEntryByKey(diff, key) {\r\n    if (!diff) {\r\n        return null;\r\n    }\r\n    for (let i = 0; i < diff.length; ++i) {\r\n        if (diff[i].key === key) {\r\n            return diff[i];\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexports.getDiffEntryByKey = getDiffEntryByKey;\r\nfunction validateStringDiff(base, entry, lineToChar) {\r\n    // First valdiate line ops:\r\n    diffentries_1.validateSequenceOp(base, entry);\r\n    if (entry.op === 'patch') {\r\n        let line = base[entry.key];\r\n        let diff = entry.diff;\r\n        if (diff !== null) {\r\n            for (let d of diff) {\r\n                diffentries_1.validateSequenceOp(line, d);\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * Remove the merge source indicator from a diff (returns a copy).\r\n */\r\nfunction stripSource(diff) {\r\n    if (!diff) {\r\n        return null;\r\n    }\r\n    let ret = [];\r\n    for (let e of diff) {\r\n        if (e.op === 'patch') {\r\n            ret.push({\r\n                key: e.key,\r\n                op: e.op,\r\n                diff: stripSource(e.diff)\r\n            });\r\n        }\r\n        else {\r\n            let d = util_1.shallowCopy(e);\r\n            delete d.source;\r\n            ret.push(d);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nexports.stripSource = stripSource;\r\n/**\r\n * Translates a diff of strings split by str.splitlines() to a diff of the\r\n * joined multiline string\r\n */\r\nfunction flattenStringDiff(val, diff) {\r\n    if (typeof val === 'string') {\r\n        val = util_1.splitLines(val);\r\n    }\r\n    let lineToChar = [0].concat(util_1.accumulateLengths(val));\r\n    let flattened = [];\r\n    for (let e of diff) {\r\n        // Frist validate op:\r\n        validateStringDiff(val, e, lineToChar);\r\n        let lineOffset = lineToChar[e.key];\r\n        if (e.op === 'patch') {\r\n            let pdiff = e.diff;\r\n            if (pdiff !== null) {\r\n                for (let p of pdiff) {\r\n                    let d = util_1.shallowCopy(p);\r\n                    d.key += lineOffset;\r\n                    flattened.push(d);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // Other ops simply have keys which refer to lines\r\n            let d = null;\r\n            if (e.op === 'addrange') {\r\n                d = diffentries_1.opAddRange(lineOffset, e.valuelist.join(''));\r\n            }\r\n            else { // e.op === 'removerange'\r\n                let idx = e.key + e.length;\r\n                d = diffentries_1.opRemoveRange(lineOffset, lineToChar[idx] - lineOffset);\r\n            }\r\n            d.source = e.source;\r\n            flattened.push(d);\r\n        }\r\n    }\r\n    // Finally, sort on key (leaving equal items in original order)\r\n    // This is done since the original diffs are sorted deeper first!\r\n    return util_1.sortByKey(flattened, 'key');\r\n}\r\nexports.flattenStringDiff = flattenStringDiff;\r\n//# sourceMappingURL=util.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CellDiffWidget = exports.OUTPUTS_DIFF_CLASS = exports.CELLDIFF_CLASS = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst rendermime_1 = require(\"@jupyterlab/rendermime\");\r\nconst flexpanel_1 = require(\"../../upstreaming/flexpanel\");\r\nconst collapsiblepanel_1 = require(\"../../common/collapsiblepanel\");\r\nconst mergeview_1 = require(\"../../common/mergeview\");\r\nconst util_1 = require(\"../../common/util\");\r\nconst model_1 = require(\"../model\");\r\nconst common_1 = require(\"./common\");\r\nconst output_1 = require(\"./output\");\r\n/**\r\n * The class name added to the prompt area of cell.\r\n */\r\nconst PROMPT_CLASS = 'jp-InputPrompt';\r\nexports.CELLDIFF_CLASS = 'jp-Cell-diff';\r\nexports.OUTPUTS_DIFF_CLASS = 'jp-Diff-outputsContainer';\r\nconst EXECUTIONCOUNT_ROW_CLASS = 'jp-Cellrow-executionCount';\r\nconst SOURCE_ROW_CLASS = 'jp-Cellrow-source';\r\nconst METADATA_ROW_CLASS = 'jp-Cellrow-metadata';\r\nconst OUTPUTS_ROW_CLASS = 'jp-Cellrow-outputs';\r\n/**\r\n * CellDiffWidget for cell changes\r\n */\r\nclass CellDiffWidget extends widgets_1.Panel {\r\n    /**\r\n     *\r\n     */\r\n    constructor(model, rendermime, mimetype) {\r\n        super();\r\n        this.addClass(exports.CELLDIFF_CLASS);\r\n        this._model = model;\r\n        this._rendermime = rendermime;\r\n        this.mimetype = mimetype;\r\n        this.init();\r\n    }\r\n    init() {\r\n        let model = this.model;\r\n        // Add 'cell added/deleted' notifiers, as appropriate\r\n        let CURR_DIFF_CLASSES = common_1.DIFF_CLASSES.slice(); // copy\r\n        if (model.added) {\r\n            this.addClass(common_1.ADDED_DIFF_CLASS);\r\n            CURR_DIFF_CLASSES = common_1.DIFF_CLASSES.slice(1, 2);\r\n        }\r\n        else if (model.deleted) {\r\n            this.addClass(common_1.DELETED_DIFF_CLASS);\r\n            CURR_DIFF_CLASSES = common_1.DIFF_CLASSES.slice(0, 1);\r\n        }\r\n        else if (model.unchanged) {\r\n            this.addClass(common_1.UNCHANGED_DIFF_CLASS);\r\n        }\r\n        else {\r\n            this.addClass(common_1.TWOWAY_DIFF_CLASS);\r\n        }\r\n        // Add inputs and outputs, on a row-by-row basis\r\n        let sourceView = CellDiffWidget.createView(model.source, model, CURR_DIFF_CLASSES, this._rendermime);\r\n        sourceView.addClass(SOURCE_ROW_CLASS);\r\n        if (model.executionCount) {\r\n            sourceView.insertWidget(0, CellDiffWidget.createPrompts(model.executionCount, model));\r\n        }\r\n        this.addWidget(sourceView);\r\n        if (!model.metadata.unchanged) {\r\n            let metadataView = CellDiffWidget.createView(model.metadata, model, CURR_DIFF_CLASSES, this._rendermime);\r\n            metadataView.addClass(METADATA_ROW_CLASS);\r\n            this.addWidget(metadataView);\r\n        }\r\n        const chunks = model.getChunkedOutputs();\r\n        if (util_1.hasEntries(chunks)) {\r\n            let container = new widgets_1.Panel();\r\n            container.addClass(exports.OUTPUTS_DIFF_CLASS);\r\n            let changed = false;\r\n            for (let chunk of chunks) {\r\n                if (chunk.length === 1) {\r\n                    let o = chunk[0];\r\n                    let outputsWidget = CellDiffWidget.createView(o, model, CURR_DIFF_CLASSES, this._rendermime);\r\n                    container.addWidget(outputsWidget);\r\n                    changed = changed || !o.unchanged || o.added || o.deleted;\r\n                }\r\n                else {\r\n                    // Create add/remove chunk wrappers\r\n                    let chunkPanel = new widgets_1.Panel();\r\n                    chunkPanel.addClass(common_1.CHUNK_PANEL_CLASS);\r\n                    let addedPanel = new widgets_1.Panel();\r\n                    addedPanel.addClass(common_1.ADDED_CHUNK_PANEL_CLASS);\r\n                    let removedPanel = new widgets_1.Panel();\r\n                    removedPanel.addClass(common_1.REMOVED_CHUNK_PANEL_CLASS);\r\n                    for (let o of chunk) {\r\n                        let target = o.deleted ? removedPanel : addedPanel;\r\n                        let outputsWidget = CellDiffWidget.createView(o, model, CURR_DIFF_CLASSES, this._rendermime);\r\n                        target.addWidget(outputsWidget);\r\n                        changed = changed || !o.unchanged || o.added || o.deleted;\r\n                    }\r\n                    chunkPanel.addWidget(addedPanel);\r\n                    chunkPanel.addWidget(removedPanel);\r\n                    container.addWidget(chunkPanel);\r\n                }\r\n            }\r\n            if (model.added || model.deleted) {\r\n                container.addClass(OUTPUTS_ROW_CLASS);\r\n                this.addWidget(container);\r\n            }\r\n            else {\r\n                let collapsed = !changed;\r\n                let header = changed ? 'Outputs changed' : 'Outputs unchanged';\r\n                let collapser = new collapsiblepanel_1.CollapsiblePanel(container, header, collapsed);\r\n                collapser.addClass(OUTPUTS_ROW_CLASS);\r\n                this.addWidget(collapser);\r\n            }\r\n        }\r\n    }\r\n    static createPrompts(model, parent) {\r\n        let prompts = [];\r\n        if (!parent.added) {\r\n            let base = model.base;\r\n            let baseStr = `In [${base || ' '}]:`;\r\n            prompts.push(baseStr);\r\n        }\r\n        if (!parent.unchanged && !parent.deleted) {\r\n            let remote = model.remote;\r\n            let remoteStr = `In [${remote || ' '}]:`;\r\n            prompts.push(remoteStr);\r\n        }\r\n        let container = new flexpanel_1.FlexPanel({ direction: 'left-to-right' });\r\n        for (let text of prompts) {\r\n            let w = new widgets_1.Widget();\r\n            w.node.innerText = text;\r\n            w.addClass(PROMPT_CLASS);\r\n            container.addWidget(w);\r\n            flexpanel_1.FlexPanel.setGrow(w, 1);\r\n        }\r\n        container.addClass(EXECUTIONCOUNT_ROW_CLASS);\r\n        return container;\r\n    }\r\n    /**\r\n     * Create a new sub-view.\r\n     */\r\n    static createView(model, parent, editorClasses, rendermime) {\r\n        let view;\r\n        if (model instanceof model_1.StringDiffModel) {\r\n            let inner = null;\r\n            if (model.unchanged && parent.cellType === 'markdown') {\r\n                let mimeModel = new rendermime_1.MimeModel({ data: { 'text/markdown': model.base } });\r\n                let mimeType = rendermime.preferredMimeType(mimeModel.data, 'ensure');\r\n                if (!mimeType) {\r\n                    throw new Error('No renderer for output');\r\n                }\r\n                let renderer = rendermime.createRenderer(mimeType);\r\n                renderer.renderModel(mimeModel);\r\n                inner = renderer;\r\n            }\r\n            else {\r\n                inner = mergeview_1.createNbdimeMergeView(model);\r\n            }\r\n            if (model.collapsible) {\r\n                view = new collapsiblepanel_1.CollapsiblePanel(inner, model.collapsibleHeader, model.startCollapsed);\r\n            }\r\n            else {\r\n                view = new widgets_1.Panel();\r\n                view.addWidget(inner);\r\n            }\r\n        }\r\n        else if (model instanceof model_1.OutputDiffModel) {\r\n            view = new output_1.OutputPanel(model, parent, editorClasses, rendermime);\r\n            if (model.added) {\r\n                view.addClass(common_1.ADDED_DIFF_CLASS);\r\n            }\r\n            else if (model.deleted) {\r\n                view.addClass(common_1.DELETED_DIFF_CLASS);\r\n            }\r\n            else if (model.unchanged) {\r\n                view.addClass(common_1.UNCHANGED_DIFF_CLASS);\r\n            }\r\n            else {\r\n                view.addClass(common_1.TWOWAY_DIFF_CLASS);\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Unrecognized model type.');\r\n        }\r\n        return view;\r\n    }\r\n    /**\r\n     * Get the model for the widget.\r\n     *\r\n     * #### Notes\r\n     * This is a read-only property.\r\n     */\r\n    get model() {\r\n        return this._model;\r\n    }\r\n}\r\nexports.CellDiffWidget = CellDiffWidget;\r\n//# sourceMappingURL=cell.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ADD_DEL_LABEL_CLASS = exports.REMOVED_CHUNK_PANEL_CLASS = exports.ADDED_CHUNK_PANEL_CLASS = exports.CHUNK_PANEL_CLASS = exports.DIFF_CLASSES = exports.UNCHANGED_DIFF_CLASS = exports.DELETED_DIFF_CLASS = exports.ADDED_DIFF_CLASS = exports.TWOWAY_DIFF_CLASS = void 0;\r\nexports.TWOWAY_DIFF_CLASS = 'jp-Diff-twoway';\r\nexports.ADDED_DIFF_CLASS = 'jp-Diff-added';\r\nexports.DELETED_DIFF_CLASS = 'jp-Diff-deleted';\r\nexports.UNCHANGED_DIFF_CLASS = 'jp-Diff-unchanged';\r\nexports.DIFF_CLASSES = ['jp-Diff-base', 'jp-Diff-remote'];\r\nexports.CHUNK_PANEL_CLASS = 'jp-Diff-addremchunk';\r\nexports.ADDED_CHUNK_PANEL_CLASS = 'jp-Diff-addedchunk';\r\nexports.REMOVED_CHUNK_PANEL_CLASS = 'jp-Diff-removedchunk';\r\nexports.ADD_DEL_LABEL_CLASS = 'jp-Diff-label';\r\n//# sourceMappingURL=common.js.map","\"use strict\";\r\n// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./cell\"), exports);\r\n__exportStar(require(\"./notebook\"), exports);\r\n__exportStar(require(\"./metadata\"), exports);\r\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MetadataDiffWidget = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst mergeview_1 = require(\"../../common/mergeview\");\r\nconst collapsiblepanel_1 = require(\"../../common/collapsiblepanel\");\r\nconst common_1 = require(\"./common\");\r\nconst ROOT_METADATA_CLASS = 'jp-Metadata-diff';\r\n/**\r\n * MetadataWidget for changes to Notebook-level metadata\r\n */\r\nclass MetadataDiffWidget extends widgets_1.Panel {\r\n    constructor(model) {\r\n        super();\r\n        this._model = model;\r\n        console.assert(!model.added && !model.deleted);\r\n        this.addClass(ROOT_METADATA_CLASS);\r\n        this.init();\r\n    }\r\n    init() {\r\n        let model = this._model;\r\n        if (!model.unchanged) {\r\n            this.addClass(common_1.TWOWAY_DIFF_CLASS);\r\n            let view = mergeview_1.createNbdimeMergeView(model);\r\n            if (model.collapsible) {\r\n                view = new collapsiblepanel_1.CollapsiblePanel(view, model.collapsibleHeader, model.startCollapsed);\r\n            }\r\n            this.addWidget(view);\r\n        }\r\n    }\r\n}\r\nexports.MetadataDiffWidget = MetadataDiffWidget;\r\n//# sourceMappingURL=metadata.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NotebookDiffWidget = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst cell_1 = require(\"./cell\");\r\nconst common_1 = require(\"./common\");\r\nconst metadata_1 = require(\"./metadata\");\r\nconst NBDIFF_CLASS = 'jp-Notebook-diff';\r\n/**\r\n * NotebookDiffWidget\r\n */\r\nclass NotebookDiffWidget extends widgets_1.Panel {\r\n    constructor(model, rendermime) {\r\n        super();\r\n        this._model = model;\r\n        this._rendermime = rendermime;\r\n        this.addClass(NBDIFF_CLASS);\r\n    }\r\n    /**\r\n     * Start adding sub-widgets.\r\n     *\r\n     * Separated from constructor to allow 'live' adding of widgets\r\n     */\r\n    init() {\r\n        let model = this._model;\r\n        let rendermime = this._rendermime;\r\n        let work = Promise.resolve();\r\n        work = work.then(() => {\r\n            if (model.metadata) {\r\n                this.addWidget(new metadata_1.MetadataDiffWidget(model.metadata));\r\n            }\r\n        });\r\n        for (let chunk of model.chunkedCells) {\r\n            work = work.then(() => {\r\n                return new Promise(resolve => {\r\n                    if (chunk.length === 1 && !(chunk[0].added || chunk[0].deleted)) {\r\n                        this.addWidget(new cell_1.CellDiffWidget(chunk[0], rendermime, model.mimetype));\r\n                    }\r\n                    else {\r\n                        let chunkPanel = new widgets_1.Panel();\r\n                        chunkPanel.addClass(common_1.CHUNK_PANEL_CLASS);\r\n                        let addedPanel = new widgets_1.Panel();\r\n                        addedPanel.addClass(common_1.ADDED_CHUNK_PANEL_CLASS);\r\n                        let removedPanel = new widgets_1.Panel();\r\n                        removedPanel.addClass(common_1.REMOVED_CHUNK_PANEL_CLASS);\r\n                        for (let cell of chunk) {\r\n                            let target = cell.deleted ? removedPanel : addedPanel;\r\n                            target.addWidget(new cell_1.CellDiffWidget(cell, rendermime, model.mimetype));\r\n                        }\r\n                        chunkPanel.addWidget(addedPanel);\r\n                        chunkPanel.addWidget(removedPanel);\r\n                        this.addWidget(chunkPanel);\r\n                    }\r\n                    // This limits us to drawing 60 cells per second, which shouldn't\r\n                    // be a problem...\r\n                    requestAnimationFrame(() => {\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        return work;\r\n    }\r\n    /**\r\n     * Get the model for the widget.\r\n     *\r\n     * #### Notes\r\n     * This is a read-only property.\r\n     */\r\n    get model() {\r\n        return this._model;\r\n    }\r\n}\r\nexports.NotebookDiffWidget = NotebookDiffWidget;\r\n//# sourceMappingURL=notebook.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderableOutputView = exports.OutputPanel = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst algorithm_1 = require(\"@lumino/algorithm\");\r\nconst rendermime_1 = require(\"@jupyterlab/rendermime\");\r\nconst collapsiblepanel_1 = require(\"../../common/collapsiblepanel\");\r\nconst mergeview_1 = require(\"../../common/mergeview\");\r\nconst util_1 = require(\"../../common/util\");\r\nconst common_1 = require(\"./common\");\r\nconst renderable_1 = require(\"./renderable\");\r\n/**\r\n * Class for output panel\r\n */\r\nconst OUTPUT_PANEL_CLASS = 'jp-Diff-outputPanel';\r\n/**\r\n * Class for a single rendered output view\r\n */\r\nconst RENDERED_OUTPUT_CLASS = 'jp-Diff-renderedOutput';\r\n/**\r\n * Output is untrusted, and can benefit from being trusted\r\n */\r\nconst UNTRUSTED_CLASS = 'jp-Diff-trustCandidate';\r\n/**\r\n * Menu with actions for outputs\r\n */\r\nconst HOVER_MENU_CLASS = 'jp-Diff-outputMenu';\r\n/**\r\n * Menu button to trust output content\r\n */\r\nconst TRUST_BUTTON_CLASS = 'jp-Diff-trustOutputButton';\r\n/**\r\n * Menu button for showing output as text instead of rendered\r\n */\r\nconst SOURCE_BUTTON_CLASS = 'jp-Diff-showOutputSourceButton';\r\n/**\r\n * Class for outputs which data is base64\r\n */\r\nconst DATA_IS_BASE64_CLASS = 'jp-diff-base64Output';\r\n/**\r\n * Class of dropdown for selecting mimetype to show\r\n */\r\nconst MIMETYPE_SELECT_CLASS = 'jp-Diff-outputMimetypeSelect';\r\n/**\r\n * A list of outputs that are sanitizable.\r\n */\r\nconst sanitizable = ['text/html'];\r\nlet _base64 = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\r\nfunction isBase64(data, minLength = 64) {\r\n    return data !== null && data.length > minLength && _base64.test(data.replace('\\n', ''));\r\n}\r\n/**\r\n * A panel responsible for rendering an output diff\r\n */\r\nclass OutputPanel extends widgets_1.Panel {\r\n    /**\r\n     *\r\n     */\r\n    constructor(model, parentModel, editorClasses, rendermime) {\r\n        super();\r\n        this._mimetype = null;\r\n        this.forceText = false;\r\n        this.model = model;\r\n        this.rendermime = rendermime;\r\n        this.editorClasses = editorClasses;\r\n        model.trustedChanged.connect((sender, trusted) => {\r\n            this.trustedChanged(trusted);\r\n        });\r\n        if (OutputPanel.isTrustSignificant(model, this.rendermime)) {\r\n            this.addClass(UNTRUSTED_CLASS);\r\n        }\r\n        if (model.added) {\r\n            if (!parentModel.added) {\r\n                // Implies this is added output\r\n                let addSpacer = new widgets_1.Widget();\r\n                addSpacer.node.textContent = 'Output added';\r\n                addSpacer.addClass(common_1.ADD_DEL_LABEL_CLASS);\r\n                this.addWidget(addSpacer);\r\n            }\r\n            this.addClass(common_1.ADDED_DIFF_CLASS);\r\n        }\r\n        else if (model.deleted) {\r\n            if (!parentModel.deleted) {\r\n                // Implies this is deleted output\r\n                let delSpacer = new widgets_1.Widget();\r\n                delSpacer.node.textContent = 'Output deleted';\r\n                delSpacer.addClass(common_1.ADD_DEL_LABEL_CLASS);\r\n                this.addWidget(delSpacer);\r\n            }\r\n            this.addClass(common_1.DELETED_DIFF_CLASS);\r\n        }\r\n        else if (model.unchanged) {\r\n            this.addClass(common_1.UNCHANGED_DIFF_CLASS);\r\n        }\r\n        else {\r\n            this.addClass(common_1.TWOWAY_DIFF_CLASS);\r\n        }\r\n        let view = this.createView();\r\n        this.initContainer(view);\r\n        this.createHoverMenu();\r\n        this.addClass(OUTPUT_PANEL_CLASS);\r\n    }\r\n    /**\r\n     * Add view to panel, possibly wrapped\r\n     */\r\n    initContainer(view) {\r\n        if (this.model.collapsible) {\r\n            this.container = new collapsiblepanel_1.CollapsiblePanel(view, this.model.collapsibleHeader, this.model.startCollapsed);\r\n        }\r\n        else {\r\n            this.container = this;\r\n            this.container.addWidget(view);\r\n        }\r\n        this.view = view;\r\n    }\r\n    /**\r\n     * Replace a view with a new one\r\n     */\r\n    replaceView(view) {\r\n        let old = this.view;\r\n        let i = this.container.widgets.indexOf(old);\r\n        this.container.insertWidget(i, view);\r\n        old.parent = null;\r\n        this.view = view;\r\n    }\r\n    /**\r\n     * Create a text or rendered view of the output diff model\r\n     */\r\n    createView(forceText = false) {\r\n        let view = null;\r\n        let model = this.model;\r\n        let rendermime = this.rendermime;\r\n        // Take one of three actions, depending on output types\r\n        // 1) Renderable types: Side-by-side comparison.\r\n        // 2) Text-type output: Show a MergeView with text diff.\r\n        // 3) Unknown types: Stringified JSON diff.\r\n        let renderable = RenderableOutputView.canRender(model, rendermime);\r\n        if (renderable && !forceText) {\r\n            // 1.\r\n            let rov = new RenderableOutputView(model, this.editorClasses, rendermime, this.selectedMimetype);\r\n            view = rov;\r\n        }\r\n        else {\r\n            // 2. or 3.\r\n            view = this.createOutputTextView();\r\n        }\r\n        return view;\r\n    }\r\n    /**\r\n     * Create text view of output\r\n     */\r\n    createOutputTextView() {\r\n        // Take one of three actions, depending on output types\r\n        // 1) N/A here, see method createView above\r\n        // 2) Known, non-binary MIME: Show a MergeView with text diff.\r\n        // 3) Unknown types: Stringified JSON diff.\r\n        let view;\r\n        let model = this.model;\r\n        // Find highest order MIME-type supported by rendermime\r\n        let key = null;\r\n        if (this.selectedMimetype === null) {\r\n            algorithm_1.find(this.rendermime.mimeTypes, (mt) => {\r\n                key = model.hasMimeType(mt);\r\n                return key !== null;\r\n            });\r\n        }\r\n        else {\r\n            key = model.hasMimeType(this.selectedMimetype);\r\n        }\r\n        if (key) {\r\n            let stringModel = model.stringify(key);\r\n            let aValue = stringModel.base || stringModel.remote;\r\n            if (!isBase64(aValue)) {\r\n                // 2.\r\n                view = mergeview_1.createNbdimeMergeView(stringModel);\r\n            }\r\n        }\r\n        if (!view) {\r\n            // 3.\r\n            view = mergeview_1.createNbdimeMergeView(model.stringify());\r\n        }\r\n        return view;\r\n    }\r\n    /**\r\n     * Creates a menu that is shown when hovering over the output.\r\n     *\r\n     * Stored in this.menu.\r\n     */\r\n    createHoverMenu() {\r\n        this.menu = new widgets_1.Panel();\r\n        this.menu.addClass(HOVER_MENU_CLASS);\r\n        this.container.addWidget(this.menu);\r\n        // Add rendered/source toggle:\r\n        let btnSource = document.createElement('button');\r\n        let sourceText = ['Show source', 'Render'];\r\n        btnSource.innerText = sourceText[0];\r\n        btnSource.onclick = (ev) => {\r\n            this.forceText = !this.forceText;\r\n            btnSource.innerText = sourceText[this.forceText ? 1 : 0];\r\n            this.updateView();\r\n        };\r\n        let w = new widgets_1.Widget({ node: btnSource });\r\n        w.addClass(SOURCE_BUTTON_CLASS);\r\n        this.menu.addWidget(w);\r\n        // Add trust button:\r\n        let btnTrust = document.createElement('button');\r\n        btnTrust.innerText = 'Trust';\r\n        btnTrust.onclick = (ev) => {\r\n            // Triggers change event:\r\n            this.model.trusted = !this.model.trusted;\r\n        };\r\n        w = new widgets_1.Widget({ node: btnTrust });\r\n        w.addClass(TRUST_BUTTON_CLASS);\r\n        this.menu.addWidget(w);\r\n        // Add mimetype select:\r\n        let mimetypes = [];\r\n        for (let output of this.model.contents) {\r\n            let bundle = rendermime_1.OutputModel.getData(output);\r\n            mimetypes = mimetypes.concat(Object.keys(bundle));\r\n        }\r\n        mimetypes = mimetypes.filter(util_1.unique);\r\n        if (mimetypes.length > 1) {\r\n            let cboMimetype = util_1.buildSelect(mimetypes);\r\n            let selectedMimetype = this.selectedMimetype;\r\n            if (selectedMimetype) {\r\n                cboMimetype.selectedIndex = mimetypes.indexOf(selectedMimetype);\r\n            }\r\n            cboMimetype.onchange = (ev) => {\r\n                this.selectedMimetype = mimetypes[cboMimetype.selectedIndex];\r\n            };\r\n            w = new widgets_1.Widget({ node: cboMimetype });\r\n            w.addClass(MIMETYPE_SELECT_CLASS);\r\n            this.menu.addWidget(w);\r\n        }\r\n        else if (mimetypes.length === 1) {\r\n            let mtLabel = document.createElement('span');\r\n            mtLabel.innerText = mimetypes[0];\r\n            w = new widgets_1.Widget({ node: mtLabel });\r\n            // w.addClass(MIMETYPE_SELECT_CLASS);\r\n            this.menu.addWidget(w);\r\n        }\r\n    }\r\n    /**\r\n     * Update trusted status\r\n     */\r\n    trustedChanged(trusted) {\r\n        this.updateView();\r\n        if (trusted) {\r\n            this.removeClass(UNTRUSTED_CLASS);\r\n        }\r\n        else if (OutputPanel.isTrustSignificant(this.model, this.rendermime)) {\r\n            this.addClass(UNTRUSTED_CLASS);\r\n        }\r\n    }\r\n    /**\r\n     * Update view\r\n     */\r\n    updateView() {\r\n        let model = this.model;\r\n        if (this.view instanceof RenderableOutputView) {\r\n            // Previosuly rendered\r\n            if (!this.forceText && RenderableOutputView.canRender(model, this.rendermime)) {\r\n                // Can still render\r\n                this.view.updateView(this.selectedMimetype, model.trusted);\r\n            }\r\n            else {\r\n                // Can no longer render\r\n                let view = this.createView(this.forceText);\r\n                this.replaceView(view);\r\n            }\r\n        }\r\n        else {\r\n            // Previously text output\r\n            // Here, we replace the view irregardles of old vs new type\r\n            let view = this.createView(this.forceText);\r\n            this.replaceView(view);\r\n        }\r\n    }\r\n    get selectedMimetype() {\r\n        if (this._mimetype !== null) {\r\n            return this._mimetype;\r\n        }\r\n        let data = rendermime_1.OutputModel.getData(this.model.base || this.model.remote);\r\n        let mt = this.rendermime.preferredMimeType(data, this.model.trusted ? 'any' : 'ensure');\r\n        return mt === undefined ? null : mt;\r\n    }\r\n    set selectedMimetype(value) {\r\n        if (this._mimetype !== value) {\r\n            this._mimetype = value;\r\n            this.updateView();\r\n        }\r\n    }\r\n    /**\r\n     * Whether trust can affect the output rendering.\r\n     */\r\n    static isTrustSignificant(model, rendermime) {\r\n        if (model.trusted) {\r\n            return false;\r\n        }\r\n        let toTest = [];\r\n        if (model.base) {\r\n            toTest.push(model.base);\r\n        }\r\n        if (model.remote && model.remote !== model.base) {\r\n            toTest.push(model.remote);\r\n        }\r\n        for (let o of toTest) {\r\n            let untrustedModel = new rendermime_1.OutputModel({ value: o, trusted: false });\r\n            let modelMimeTypes = Object.keys(untrustedModel.data);\r\n            let rendererMimeTypes = algorithm_1.toArray(rendermime.mimeTypes);\r\n            let candidates = util_1.intersection(modelMimeTypes, rendererMimeTypes);\r\n            for (let mimeType of candidates) {\r\n                let factory = rendermime.getFactory(mimeType);\r\n                if (factory && (!factory.safe || sanitizable.indexOf(mimeType) !== -1)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexports.OutputPanel = OutputPanel;\r\n/**\r\n * Widget for an output with renderable MIME data.\r\n */\r\nclass RenderableOutputView extends renderable_1.RenderableDiffView {\r\n    constructor(model, editorClass, rendermime, mimetype) {\r\n        super(model, editorClass, rendermime, mimetype);\r\n    }\r\n    /**\r\n     * Create a widget which renders the given cell output\r\n     */\r\n    createSubView(output, trusted) {\r\n        let panel = new RenderedOutputWidget(this.rendermime);\r\n        panel.updateView(output, trusted, this.mimetype);\r\n        return panel;\r\n    }\r\n    /**\r\n     * Update trusted status\r\n     */\r\n    updateView(mimeType, trusted) {\r\n        let i = 0;\r\n        let model = this.model;\r\n        this.mimetype = mimeType;\r\n        algorithm_1.each(this.layout.widgets, (w) => {\r\n            if (w instanceof RenderedOutputWidget) {\r\n                let output = null;\r\n                if (i === 0 && model.base) {\r\n                    // Use base data\r\n                    output = model.base;\r\n                }\r\n                else if (model.remote) {\r\n                    output = model.remote;\r\n                }\r\n                if (output) {\r\n                    w.updateView(output, trusted, mimeType);\r\n                }\r\n                ++i;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Checks if a cell output can be rendered (either safe/trusted or\r\n     * sanitizable)\r\n     */\r\n    static canRender(model, rendermime) {\r\n        let toTest = model.contents;\r\n        for (let o of toTest) {\r\n            let bundle = rendermime_1.OutputModel.getData(o);\r\n            let mimetype = rendermime.preferredMimeType(bundle, model.trusted ? 'any' : 'ensure');\r\n            if (!mimetype) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexports.RenderableOutputView = RenderableOutputView;\r\nclass RenderedOutputWidget extends widgets_1.Panel {\r\n    /**\r\n     *\r\n     */\r\n    constructor(rendermime) {\r\n        super();\r\n        this.rendermime = rendermime;\r\n    }\r\n    updateView(output, trusted, mimetype) {\r\n        let old = this.renderer;\r\n        this.renderer = this.createRenderer(output, trusted, mimetype);\r\n        if (old !== undefined) {\r\n            old.dispose();\r\n        }\r\n        this.addWidget(this.renderer);\r\n    }\r\n    createRenderer(output, trusted, mimetype) {\r\n        let model = new rendermime_1.OutputModel({ value: output, trusted });\r\n        let widget = this.rendermime.createRenderer(mimetype);\r\n        widget.renderModel(model);\r\n        widget.addClass(RENDERED_OUTPUT_CLASS);\r\n        let bundle = rendermime_1.OutputModel.getData(output);\r\n        if (isBase64(bundle[mimetype])) {\r\n            widget.addClass(DATA_IS_BASE64_CLASS);\r\n        }\r\n        return widget;\r\n    }\r\n}\r\n//# sourceMappingURL=output.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderableDiffView = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\n/**\r\n * Widget for outputs with renderable MIME data.\r\n */\r\nclass RenderableDiffView extends widgets_1.Widget {\r\n    constructor(model, editorClass, rendermime, mimetype) {\r\n        super();\r\n        this.rendermime = rendermime;\r\n        this.model = model;\r\n        this.mimetype = mimetype;\r\n        let bdata = model.base;\r\n        let rdata = model.remote;\r\n        this.layout = new widgets_1.PanelLayout();\r\n        let ci = 0;\r\n        if (bdata) {\r\n            let widget = this.createSubView(bdata, model.trusted);\r\n            this.layout.addWidget(widget);\r\n            widget.addClass(editorClass[ci++]);\r\n        }\r\n        if (rdata && rdata !== bdata) {\r\n            let widget = this.createSubView(rdata, model.trusted);\r\n            this.layout.addWidget(widget);\r\n            widget.addClass(editorClass[ci++]);\r\n        }\r\n    }\r\n}\r\nexports.RenderableDiffView = RenderableDiffView;\r\n//# sourceMappingURL=renderable.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n// This code is based on the CodeMirror mergeview.js source:\r\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\r\n// Distributed under an MIT license: http://codemirror.net/LICENSE\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.filterDecisions = exports.pushPatchDecision = exports.buildDiffs = exports.applyDecisions = exports.resolveCommonPaths = exports.pushPath = exports.popPath = exports.addSorted = exports.decisionSortKey = exports.decisionPathSortKey = exports.MergeDecision = void 0;\r\nconst diffentries_1 = require(\"../diff/diffentries\");\r\nconst util_1 = require(\"../diff/util\");\r\nconst patch_1 = require(\"../patch\");\r\nconst util_2 = require(\"../common/util\");\r\nfunction validateAction(action) {\r\n    if (util_2.valueIn(action, ['base', 'local', 'remote', 'local_then_remote',\r\n        'remote_then_local', 'custom', 'clear', 'clear_parent', 'either'])) {\r\n        return action;\r\n    }\r\n    throw new Error('Invalid merge decision action: ' + action);\r\n}\r\n/**\r\n * Take the value, or take default if value is undefined\r\n */\r\nfunction valueOrDefault(value, defaultValue) {\r\n    return value === undefined ? defaultValue : value;\r\n}\r\nclass MergeDecision {\r\n    constructor(obj, localDiff = null, remoteDiff = null, action = 'base', conflict = false, customDiff = null, similarInsert = null) {\r\n        this.level = 0;\r\n        if (obj instanceof Array) {\r\n            this._path = obj;\r\n        }\r\n        else if (obj instanceof MergeDecision) {\r\n            this._path = obj.absolutePath.slice();\r\n            localDiff = obj.localDiff;\r\n            remoteDiff = obj.remoteDiff;\r\n            action = obj.action;\r\n            conflict = obj.conflict;\r\n            customDiff = obj.customDiff;\r\n            similarInsert = obj.similarInsert;\r\n            this.level = obj.level;\r\n        }\r\n        else {\r\n            this._path = valueOrDefault(obj.common_path, []);\r\n            localDiff = valueOrDefault(obj.local_diff, localDiff);\r\n            remoteDiff = valueOrDefault(obj.remote_diff, remoteDiff);\r\n            action = validateAction(valueOrDefault(obj.action, action));\r\n            conflict = valueOrDefault(obj.conflict, conflict);\r\n            customDiff = valueOrDefault(obj.custom_diff, customDiff);\r\n            similarInsert = valueOrDefault(obj.similar_insert, similarInsert);\r\n        }\r\n        this.localDiff = localDiff;\r\n        this.remoteDiff = remoteDiff;\r\n        this.action = action;\r\n        this.conflict = conflict;\r\n        this.customDiff = customDiff;\r\n        this.similarInsert = similarInsert;\r\n    }\r\n    setValuesFrom(other) {\r\n        this._path = other.absolutePath.slice();\r\n        this.localDiff = other.localDiff;\r\n        this.remoteDiff = other.remoteDiff;\r\n        this.action = other.action;\r\n        this.conflict = other.conflict;\r\n        this.customDiff = other.customDiff;\r\n        this.similarInsert = other.similarInsert;\r\n        this.level = other.level;\r\n    }\r\n    get localPath() {\r\n        return this._path.slice(this.level);\r\n    }\r\n    get absolutePath() {\r\n        return this._path;\r\n    }\r\n    set absolutePath(value) {\r\n        this._path = value;\r\n    }\r\n    pushPath(key) {\r\n        this._path.push(key);\r\n    }\r\n    get diffs() {\r\n        let diffs = [this.localDiff, this.remoteDiff];\r\n        if (this.customDiff) {\r\n            diffs.push(this.customDiff);\r\n        }\r\n        return diffs;\r\n    }\r\n    set diffs(value) {\r\n        this.localDiff = value[0];\r\n        this.remoteDiff = value[1];\r\n        if (value.length > 2) {\r\n            this.customDiff = value[2];\r\n        }\r\n    }\r\n    serialize() {\r\n        return {\r\n            common_path: this.absolutePath.slice(),\r\n            local_diff: util_1.stripSource(this.localDiff),\r\n            remote_diff: util_1.stripSource(this.remoteDiff),\r\n            action: this.action,\r\n            conflict: this.conflict,\r\n            custom_diff: util_1.stripSource(this.customDiff)\r\n        };\r\n    }\r\n}\r\nexports.MergeDecision = MergeDecision;\r\n/**\r\n * Compare to DecisionPath's for sorting.\r\n *\r\n * The rules are that deeper paths sort before other paths\r\n * with the same prefix, as they correspond to patch ops,\r\n * which will not affect the indexing of following decisions\r\n * on lists.\r\n *\r\n * @param {DecisionPath} a The first decision path\r\n * @param {DecisionPath} b The second decision path\r\n * @returns {number} Returns a negative number if a should\r\n *  sort first, positive number if b should sort first, or\r\n *  zero if the are identical.\r\n */\r\nfunction decisionPathSortKey(a, b) {\r\n    if (a.length === b.length) {\r\n        // Equally deep, sort on keys\r\n        for (let lvl = 0; lvl < a.length; ++lvl) {\r\n            if (a[lvl] === b[lvl]) {\r\n                // Keys are equal, try a deeper level\r\n                continue;\r\n            }\r\n            // Keys differ on this level!\r\n            return a[lvl] < b[lvl] ? -1 : 1;\r\n        }\r\n        // Paths are identical\r\n        return 0;\r\n    }\r\n    else {\r\n        // Sort deeper paths first\r\n        return b.length - a.length;\r\n    }\r\n}\r\nexports.decisionPathSortKey = decisionPathSortKey;\r\n/**\r\n * Compare the paths of two decisions for sorting.\r\n *\r\n * This is a thin wrapper around decisionPathSortKey\r\n *\r\n * @export\r\n * @param {MergeDecision} a The first decision\r\n * @param {MergeDecision} b The second decision\r\n * @returns {number}  Returns a negative number if a should\r\n *  sort first, positive number if b should sort first, or\r\n *  zero if the are identical.\r\n */\r\nfunction decisionSortKey(a, b) {\r\n    return decisionPathSortKey(a.absolutePath, b.absolutePath);\r\n}\r\nexports.decisionSortKey = decisionSortKey;\r\n/**\r\n * Adds a decision to an existing, sorted collection of merge decisions\r\n *\r\n * Ensures that the location of the newly added decision\r\n * will comply with the format specification\r\n *\r\n * @export\r\n * @param {MergeDecision[]} decisions\r\n * @param {MergeDecision} toAdd\r\n * @param {(number | string)} [firstKey]\r\n * @returns {void}\r\n */\r\nfunction addSorted(decisions, toAdd, firstKey) {\r\n    let idx = 0;\r\n    for (; idx < decisions.length; ++idx) {\r\n        let c = decisionPathSortKey(decisions[idx].absolutePath, toAdd.absolutePath);\r\n        if (c > 0) {\r\n            decisions.splice(idx, 0, toAdd);\r\n            return;\r\n        }\r\n        else if (firstKey !== undefined && c === 0) {\r\n            let key = null;\r\n            for (let diff of decisions[idx].diffs) {\r\n                if (!diff) {\r\n                    continue;\r\n                }\r\n                for (let d of diff) {\r\n                    if (!key || d.key < key) {\r\n                        key = d.key;\r\n                    }\r\n                }\r\n            }\r\n            if (firstKey === key) {\r\n                throw new Error('Shouldn\\'t have multiple decisions with diff on same key');\r\n            }\r\n            else if (key === null || firstKey < key) {\r\n                decisions.splice(idx, 0, toAdd);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    decisions.push(toAdd);\r\n}\r\nexports.addSorted = addSorted;\r\nfunction popPath(diffs, popInner) {\r\n    if (diffs.length < 1) {\r\n        return null;\r\n    }\r\n    // Find first non-null, non-empty diff list:\r\n    let i = 0;\r\n    for (let di of diffs) {\r\n        if (di !== null && di.length > 0) {\r\n            break;\r\n        }\r\n        i++;\r\n    }\r\n    // Assert that we have at least one non-null diff:\r\n    if (i === diffs.length) {\r\n        console.log('Empty merge decision (no diffs)!');\r\n        return null;\r\n    }\r\n    // Check if ops and keys are equal for all non-null diffs\r\n    let d = diffs[i];\r\n    let op = d[0].op;\r\n    let key = d[0].key;\r\n    for (let di of diffs) {\r\n        if (di && di.length > 0) {\r\n            // Note that while diff lists can have 2 entries, they should never cause\r\n            // a pop, as they will have a difference in op.\r\n            for (let dj of di) {\r\n                if (dj.op !== op || dj.key !== key) {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Inspect patch op further along:\r\n    if (op === 'patch') {\r\n        // Only pop if sub-diff has length 1 (unless popInner is true)\r\n        if (popInner !== true) {\r\n            for (let di of diffs) {\r\n                if (di && di.length > 0 && (di.length !== 1 ||\r\n                    !di[0].diff ||\r\n                    di[0].diff.length !== 1)) {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        let retDiffs = [];\r\n        for (let di of diffs) {\r\n            if (di && di.length > 0) {\r\n                retDiffs.push(di[0].diff);\r\n            }\r\n            else {\r\n                retDiffs.push(null);\r\n            }\r\n        }\r\n        return { diffs: retDiffs, key: key };\r\n    }\r\n    return null;\r\n}\r\nexports.popPath = popPath;\r\nfunction pushPath(diffs, prefix) {\r\n    for (let key of prefix.reverse()) {\r\n        diffs = [diffentries_1.opPatch(key, diffs)];\r\n    }\r\n    return diffs;\r\n}\r\nexports.pushPath = pushPath;\r\n/**\r\n * Expand the `common_path` field of the merge decisions for optimized\r\n * processing. Modifies the merge decisions in-place.\r\n */\r\nfunction resolveCommonPaths(decisions) {\r\n    for (let md of decisions) {\r\n        let diffs = md.diffs;\r\n        let path = md.absolutePath || [];\r\n        let popped = popPath(diffs, true);\r\n        while (popped) {\r\n            path.push(popped.key);\r\n            diffs = popped.diffs;\r\n            popped = popPath(diffs, true);\r\n        }\r\n        md.absolutePath = path;\r\n        md.diffs = diffs;\r\n    }\r\n}\r\nexports.resolveCommonPaths = resolveCommonPaths;\r\n/**\r\n * Make a new 'cleared' value of the right type.\r\n */\r\nfunction makeClearedValue(value) {\r\n    if (value instanceof Array) {\r\n        // Clearing e.g. an outputs list means setting it to an empty array\r\n        return [];\r\n    }\r\n    else if (typeof (value) === 'string') {\r\n        // Clearing e.g. a source string means setting it to an empty string\r\n        return '';\r\n    }\r\n    else if (value === null || util_2.valueIn(typeof (value), ['number', 'boolean'])) {\r\n        // Clearing anything else (atomic values) means setting it to null\r\n        return null;\r\n    }\r\n    else {\r\n        // Clearing e.g. a metadata dict means setting it to an empty Object\r\n        return {};\r\n    }\r\n}\r\nfunction _resolvePathInObject(obj, path) {\r\n    for (let key of path) {\r\n        obj = obj[key]; // Should throw if key missing\r\n    }\r\n    return obj;\r\n}\r\nfunction _combineDiffs(a, b) {\r\n    if (a && b) {\r\n        return a.concat(b);\r\n    }\r\n    else if (a) {\r\n        return a.slice();\r\n    }\r\n    else if (b) {\r\n        return b.slice();\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\nfunction resolveAction(base, decision) {\r\n    let a = decision.action;\r\n    if (a === 'base') {\r\n        return []; // no-op\r\n    }\r\n    else if (a === 'local' || a === 'either') {\r\n        return decision.localDiff ? decision.localDiff.slice() : [];\r\n    }\r\n    else if (a === 'remote') {\r\n        return decision.remoteDiff ? decision.remoteDiff.slice() : [];\r\n    }\r\n    else if (a === 'custom') {\r\n        return decision.customDiff ? decision.customDiff.slice() : [];\r\n    }\r\n    else if (a === 'local_then_remote') {\r\n        return _combineDiffs(decision.localDiff, decision.remoteDiff);\r\n    }\r\n    else if (a === 'remote_then_local') {\r\n        return _combineDiffs(decision.remoteDiff, decision.localDiff);\r\n    }\r\n    else if (a === 'clear') {\r\n        let key = null;\r\n        if (typeof base !== 'object') {\r\n            throw new TypeError('Can only use `\\'clear\\'` action on objects/dicts');\r\n        }\r\n        for (let d of _combineDiffs(decision.localDiff, decision.remoteDiff)) {\r\n            if (key) {\r\n                if (key !== d.key) {\r\n                    throw new Error('Cannot combine diffs with different keys');\r\n                }\r\n            }\r\n            else {\r\n                key = d.key;\r\n            }\r\n        }\r\n        if (key) {\r\n            let d = diffentries_1.opReplace(key, makeClearedValue(base[key]));\r\n            d.source = { decision, action: 'custom' };\r\n            return [d];\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n    else if (a === 'clear_parent') {\r\n        if (Array.isArray(base)) {\r\n            let d = diffentries_1.opRemoveRange(0, base.length);\r\n            d.source = { decision, action: 'custom' };\r\n            return [d];\r\n        }\r\n        else if (typeof (base) === 'string') {\r\n            let len = util_2.splitLines(base).length;\r\n            let d = diffentries_1.opRemoveRange(0, len);\r\n            d.source = { decision, action: 'custom' };\r\n            return [d];\r\n        }\r\n        else {\r\n            // Ideally we would do a opReplace on the parent, but this is not\r\n            // easily combined with this method, so simply remove all keys\r\n            let diff = [];\r\n            for (let key of base) {\r\n                let d = diffentries_1.opRemove(key);\r\n                d.source = { decision, action: 'custom' };\r\n                diff.push(d);\r\n            }\r\n            return diff;\r\n        }\r\n    }\r\n    else {\r\n        throw new Error('The action \\\"' + a + '\\\" is not defined');\r\n    }\r\n}\r\n/**\r\n * Prevent paths from pointing to specific string lines.\r\n *\r\n * Check if path points to a specific line in a string, if so, split off index.\r\n *\r\n * Returns a tuple of path and any line key.\r\n */\r\nfunction splitDiffStringPath(base, path) {\r\n    for (let i = 0; i < path.length; ++i) {\r\n        if (typeof base === 'string') {\r\n            return [path.slice(0, i), path.slice(i)];\r\n        }\r\n        base = base[path[i]];\r\n    }\r\n    return [path, null];\r\n}\r\nfunction applyDecisions(base, decisions) {\r\n    let merged = util_2.deepCopy(base);\r\n    let prevPath = null;\r\n    let parent = null;\r\n    let lastKey = null;\r\n    let resolved = null;\r\n    let diffs = [];\r\n    // clear_parent actions should override other decisions on same obj, so\r\n    // we need to track it\r\n    let clearParent = false;\r\n    for (let md of decisions) {\r\n        let spl = splitDiffStringPath(merged, md.localPath);\r\n        let path = spl[0];\r\n        let line = spl[1];\r\n        // We patch all decisions with the same path in one op\r\n        if (util_2.arraysEqual(path, prevPath)) {\r\n            if (clearParent) {\r\n                // Another entry will clear the parent, so all other decisions\r\n                // should be dropped\r\n            }\r\n            else {\r\n                if (md.action === 'clear_parent') {\r\n                    clearParent = true;\r\n                    diffs = []; // Clear any exisiting decsions!\r\n                }\r\n                let ad = resolveAction(resolved, md);\r\n                if (line) {\r\n                    ad = pushPath(ad, line);\r\n                }\r\n                diffs = diffs.concat(ad);\r\n            }\r\n        }\r\n        else {\r\n            // Different path, start a new collection\r\n            if (prevPath !== null) {\r\n                // First, apply previous diffs\r\n                if (parent === null) {\r\n                    // Operations on root create new merged object\r\n                    merged = patch_1.patch(resolved, diffs);\r\n                }\r\n                else {\r\n                    // If not, overwrite entry in parent (which is an entry in merged).\r\n                    // This is ok, as no paths should point to subobjects of the patched\r\n                    // object.\r\n                    parent[lastKey] = patch_1.patch(resolved, diffs);\r\n                }\r\n            }\r\n            prevPath = path.slice();\r\n            // Resolve path in base and output\r\n            resolved = merged;\r\n            parent = null;\r\n            lastKey = null;\r\n            for (let key of path) {\r\n                parent = resolved;\r\n                resolved = resolved[key]; // Should throw if key missing\r\n                lastKey = key;\r\n            }\r\n            diffs = resolveAction(resolved, md);\r\n            if (line) {\r\n                diffs = pushPath(diffs, line);\r\n            }\r\n            clearParent = md.action === 'clear_parent';\r\n        }\r\n    }\r\n    // Apply the last collection of diffs, if present (same as above)\r\n    if (prevPath !== null) {\r\n        if (parent === null) {\r\n            merged = patch_1.patch(resolved, diffs);\r\n        }\r\n        else {\r\n            parent[lastKey] = patch_1.patch(resolved, diffs);\r\n        }\r\n    }\r\n    return merged;\r\n}\r\nexports.applyDecisions = applyDecisions;\r\n/**\r\n * Merge a tree of diffs at varying path levels to one diff at their shared root\r\n *\r\n * Relies on the format specification about decision ordering to help\r\n * simplify the process (deeper paths should come before its parent paths).\r\n * This is realized by the `sortedPaths` argument.\r\n */\r\nfunction _mergeTree(tree, sortedPaths) {\r\n    let trunk = [];\r\n    let root = null;\r\n    for (let i = 0; i < sortedPaths.length; ++i) {\r\n        let path = tree[sortedPaths[i]].path;\r\n        let subdiffs = tree[sortedPaths[i]].diff;\r\n        trunk = trunk.concat(subdiffs);\r\n        let nextPath;\r\n        if (i === sortedPaths.length - 1) {\r\n            nextPath = root;\r\n        }\r\n        else {\r\n            nextPath = tree[sortedPaths[i + 1]].path;\r\n        }\r\n        // First, check if path is subpath of nextPath:\r\n        if (util_2.isPrefixArray(nextPath, path)) {\r\n            // We can simply promote existing diffs to next path\r\n            if (nextPath !== null) {\r\n                trunk = pushPath(trunk, path.slice(nextPath.length));\r\n                root = nextPath;\r\n            }\r\n        }\r\n        else {\r\n            // We have started on a new trunk\r\n            // Collect branches on the new trunk, and merge the trunks\r\n            let newTrunk = _mergeTree(tree, sortedPaths.slice(i + 1));\r\n            nextPath = tree[sortedPaths[sortedPaths.length - 1]].path;\r\n            let prefix = util_2.findSharedPrefix(path, nextPath);\r\n            let pl = prefix ? prefix.length : 0;\r\n            trunk = pushPath(trunk, path.slice(pl)).concat(pushPath(newTrunk, nextPath.slice(pl)));\r\n            break; // Recursion will exhaust sortedPaths\r\n        }\r\n    }\r\n    return trunk;\r\n}\r\n/**\r\n * Builds a diff for direct application on base. The `which` argument either\r\n * selects the 'local', 'remote' or 'merged' diffs.\r\n */\r\nfunction buildDiffs(base, decisions, which) {\r\n    let tree = {};\r\n    let sortedPaths = [];\r\n    let local = which === 'local';\r\n    let merged = which === 'merged';\r\n    if (!local && !merged) {\r\n        console.assert(which === 'remote');\r\n    }\r\n    for (let md of decisions) {\r\n        let subdiffs = null;\r\n        let spl = splitDiffStringPath(base, md.localPath);\r\n        let path = spl[0];\r\n        let line = spl[1];\r\n        if (merged) {\r\n            let sub = _resolvePathInObject(base, path);\r\n            subdiffs = resolveAction(sub, md);\r\n        }\r\n        else {\r\n            subdiffs = local ? md.localDiff : md.remoteDiff;\r\n            if (subdiffs === null) {\r\n                continue;\r\n            }\r\n        }\r\n        let strPath = '/' + path.join('/');\r\n        if (tree.hasOwnProperty(strPath)) {\r\n            // Existing tree entry, simply add diffs to it\r\n            if (line) {\r\n                let matchDiff = util_1.getSubDiffByKey(tree[strPath].diff, line[0]);\r\n                if (matchDiff) {\r\n                    matchDiff.push.apply(matchDiff, subdiffs);\r\n                }\r\n                else {\r\n                    subdiffs = pushPath(subdiffs, line);\r\n                    tree[strPath].diff.push(subdiffs[0]);\r\n                }\r\n            }\r\n            else {\r\n                tree[strPath].diff = tree[strPath].diff.concat(subdiffs);\r\n            }\r\n        }\r\n        else {\r\n            // Make new entry in tree\r\n            if (line) {\r\n                subdiffs = pushPath(subdiffs, line);\r\n            }\r\n            tree[strPath] = { diff: subdiffs, path: path };\r\n            sortedPaths.push(strPath);\r\n        }\r\n    }\r\n    if (Object.keys(tree).length === 0) {\r\n        return null;\r\n    }\r\n    if (!tree.hasOwnProperty('/')) {\r\n        tree['/'] = { diff: [], path: [] };\r\n        sortedPaths.push('/');\r\n    }\r\n    // Tree is constructed, now join all branches at diverging points (joints)\r\n    return _mergeTree(tree, sortedPaths);\r\n}\r\nexports.buildDiffs = buildDiffs;\r\n/**\r\n * Move a path prefix in a merge decision from `common_path` to the diffs.\r\n *\r\n * This is done by wrapping the diffs in nested patch ops.\r\n */\r\nfunction pushPatchDecision(decision, prefix) {\r\n    let dec = new MergeDecision(decision);\r\n    // We need to start with inner most key to nest correctly, so reverse:\r\n    for (let key of prefix.slice().reverse()) {\r\n        if (dec.absolutePath.length === 0) {\r\n            throw new Error('Cannot remove key from empty decision path: ' + key + ', ' + dec);\r\n        }\r\n        let popped = dec.absolutePath.pop();\r\n        if (popped !== key) { // Pop and assert\r\n            throw Error('Cannot push a patch that doesn\\'t correspond to ' +\r\n                'a key in the decision path! Key: ' + key +\r\n                '; Remaining path: ' + dec.absolutePath.concat([popped]));\r\n        }\r\n        let ld = dec.localDiff && dec.localDiff.length > 0;\r\n        let rd = dec.remoteDiff && dec.remoteDiff.length > 0;\r\n        let cd = dec.customDiff && dec.customDiff.length > 0;\r\n        dec.localDiff = ld ? [diffentries_1.opPatch(key, dec.localDiff)] : null;\r\n        dec.remoteDiff = rd ? [diffentries_1.opPatch(key, dec.remoteDiff)] : null;\r\n        dec.customDiff = cd ? [diffentries_1.opPatch(key, dec.customDiff)] : null;\r\n    }\r\n    return dec;\r\n}\r\nexports.pushPatchDecision = pushPatchDecision;\r\n/**\r\n * Filter decisions based on matching (segment of) path\r\n *\r\n * Checks whether each decision's path start with `path`. If `skipLevels` is\r\n * given, the first levels of the decision's path is ignored for the comparison.\r\n *\r\n * Once matched, the matching decisions' levels are adjusted such that they\r\n * point to after the matching segment.\r\n *\r\n * Example:\r\n * Given a list of decisions with paths:\r\n *   /cells/0/outputs/0\r\n *   /cells/0/outputs/1\r\n *   /cells/2/outputs/1\r\n *   /cells/12/outputs/0/data\r\n *\r\n * If called with path `['cells']`:\r\n *   All decisions will be returned, with level set to 1\r\n * If called with path `['cells', 0]`:\r\n *   The first two will be returned, with level set to 2\r\n * If called with path `['outputs']`, and skipLevel = 2:\r\n *   All decisions will be returned, with level set to 3\r\n * If called with path `['outputs', 0]`, and skipLevel = 2:\r\n *   Decision 1 and 4 will be returned, with level set to 4\r\n *\r\n * Note that since the same decision instances are returned, this will modify\r\n * the level of the passed decisions.\r\n */\r\nfunction filterDecisions(decisions, path, skipLevels, maxLength) {\r\n    let ret = [];\r\n    skipLevels = skipLevels || 0;\r\n    for (let md of decisions) {\r\n        if (maxLength !== undefined && md.absolutePath.length > maxLength) {\r\n            continue;\r\n        }\r\n        if (util_2.isPrefixArray(path, md.absolutePath.slice(skipLevels))) {\r\n            md.level = skipLevels + path.length;\r\n            ret.push(md);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nexports.filterDecisions = filterDecisions;\r\n//# sourceMappingURL=decisions.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CellMergeModel = void 0;\r\nconst nbformat = require(\"@jupyterlab/nbformat\");\r\nconst signaling_1 = require(\"@lumino/signaling\");\r\nconst util_1 = require(\"../../diff/util\");\r\nconst model_1 = require(\"../../diff/model\");\r\nconst decisions_1 = require(\"../../merge/decisions\");\r\nconst patch_1 = require(\"../../patch\");\r\nconst util_2 = require(\"../../common/util\");\r\nconst chunking_1 = require(\"../../chunking\");\r\nconst common_1 = require(\"./common\");\r\nconst exceptions_1 = require(\"../../common/exceptions\");\r\n/**\r\n * Create a cell diff model based on a set of merge\r\n * decisions that patch the cell.\r\n */\r\nfunction createPatchedCellDecisionDiffModel(base, decisions, local, remote, mimetype) {\r\n    for (let md of decisions) {\r\n        if (md.localPath.length === 0) {\r\n            let val = decisions_1.popPath(md.diffs, true);\r\n            if (val !== null) {\r\n                md.diffs = val.diffs;\r\n                md.pushPath(val.key);\r\n            }\r\n        }\r\n    }\r\n    let source = new common_1.DecisionStringDiffModel(base.source, decisions_1.filterDecisions(decisions, ['source'], 2), [local ? local.source : null,\r\n        remote ? remote.source : null]);\r\n    model_1.setMimetypeFromCellType(source, base, mimetype);\r\n    let metadata = new common_1.DecisionStringDiffModel(base.metadata, decisions_1.filterDecisions(decisions, ['metadata'], 2), [local ? local.metadata : null,\r\n        remote ? remote.metadata : null]);\r\n    let outputs = null;\r\n    let executionCount = null;\r\n    if (nbformat.isCode(base)) {\r\n        if (base.outputs) {\r\n            let outputBase = base.outputs;\r\n            let outputDec = decisions_1.filterDecisions(decisions, ['outputs'], 2);\r\n            let mergedDiff = decisions_1.buildDiffs(outputBase, outputDec, 'merged');\r\n            let merged;\r\n            if (mergedDiff && mergedDiff.length > 0) {\r\n                merged = patch_1.patch(outputBase, mergedDiff);\r\n            }\r\n            else {\r\n                merged = outputBase;\r\n            }\r\n            outputs = model_1.makeOutputModels(outputBase, merged, mergedDiff);\r\n        }\r\n        let execBase = base.execution_count;\r\n        let cellDecs = decisions_1.filterDecisions(decisions, ['cells'], 0, 2);\r\n        for (let dec of cellDecs) {\r\n            if (util_1.getDiffEntryByKey(dec.localDiff, 'execution_count') !== null ||\r\n                util_1.getDiffEntryByKey(dec.remoteDiff, 'execution_count') !== null ||\r\n                util_1.getDiffEntryByKey(dec.customDiff, 'execution_count') !== null) {\r\n                dec.level = 2;\r\n                let mergeExecDiff = decisions_1.buildDiffs(base, [dec], 'merged');\r\n                let execDiff = util_2.hasEntries(mergeExecDiff) ? mergeExecDiff[0] : null;\r\n                // Pass base as remote, which means fall back to unchanged if no diff:\r\n                executionCount = model_1.createImmutableModel(execBase, execBase, execDiff);\r\n            }\r\n        }\r\n    }\r\n    return new model_1.CellDiffModel(source, metadata, outputs, executionCount, base.cell_type);\r\n}\r\n/**\r\n * CellMergeModel\r\n */\r\nclass CellMergeModel extends common_1.ObjectMergeModel {\r\n    constructor(base, decisions, mimetype) {\r\n        // TODO: Remove/extend whitelist once we support more\r\n        super(base, [], mimetype, ['source', 'metadata', 'outputs', 'execution_count']);\r\n        this.deleteCellChanged = new signaling_1.Signal(this);\r\n        this._clearOutputs = false;\r\n        this.clearOutputsChanged = new signaling_1.Signal(this);\r\n        this.onesided = false;\r\n        this._deleteCell = false;\r\n        this.processDecisions(decisions);\r\n    }\r\n    /**\r\n     * Run time flag whether the user wants to delete the cell\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    get deleteCell() {\r\n        return this._deleteCell;\r\n    }\r\n    set deleteCell(value) {\r\n        if (this._deleteCell !== value) {\r\n            this._deleteCell = value;\r\n            this.deleteCellChanged.emit(value);\r\n        }\r\n    }\r\n    /**\r\n     * Run time flag whether the user wants to clear the outputs of the cell\r\n     *\r\n     * @type {boolean}\r\n     */\r\n    get clearOutputs() {\r\n        return this._clearOutputs;\r\n    }\r\n    set clearOutputs(value) {\r\n        if (this._clearOutputs !== value) {\r\n            this._clearOutputs = value;\r\n            this.clearOutputsChanged.emit(value);\r\n        }\r\n    }\r\n    /**\r\n     * Whether source is the same in local and remote\r\n     */\r\n    get agreedSource() {\r\n        return !!this.local && !!this.remote &&\r\n            this.local.source.remote === this.remote.source.remote;\r\n    }\r\n    /**\r\n     * Whether metadata is the same in local and remote\r\n     */\r\n    get agreedMetadata() {\r\n        if (!this.local || !this.remote) {\r\n            return false;\r\n        }\r\n        return this.local.metadata.remote === this.remote.metadata.remote;\r\n    }\r\n    /**\r\n     * Whether outputs are the same in local and remote\r\n     */\r\n    get agreedOutputs() {\r\n        if (!this.local || !this.remote) {\r\n            return false;\r\n        }\r\n        let lo = this.local.outputs;\r\n        let ro = this.remote.outputs;\r\n        if (!util_2.hasEntries(lo) || !util_2.hasEntries(ro)) {\r\n            return !util_2.hasEntries(lo) && !util_2.hasEntries(ro);\r\n        }\r\n        if (lo.length !== ro.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < lo.length; ++i) {\r\n            if (JSON.stringify(lo[i].remote) !== JSON.stringify(ro[i].remote)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Whether cell is the same in local and remote\r\n     */\r\n    get agreedCell() {\r\n        // TODO: Also check other fields?\r\n        return this.agreedSource && this.agreedMetadata && this.agreedOutputs;\r\n    }\r\n    /**\r\n     * Whether the cell has any conflicted decisions.\r\n     */\r\n    get conflicted() {\r\n        for (let dec of this.decisions) {\r\n            if (dec.conflict) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Whether the cell has any conflicted decisions on a specific key.\r\n     */\r\n    hasConflictsOn(key) {\r\n        let decs = decisions_1.filterDecisions(this.decisions, [key], 2);\r\n        for (let dec of decs) {\r\n            if (dec.conflict) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Whether the cell has any conflicted decisions on source.\r\n     */\r\n    get sourceConflicted() {\r\n        return this.hasConflictsOn('source');\r\n    }\r\n    /**\r\n     * Whether the cell has any conflicted decisions on metadata.\r\n     */\r\n    get metadataConflicted() {\r\n        return this.hasConflictsOn('metadata');\r\n    }\r\n    /**\r\n     * Whether the cell has any conflicted decisions.\r\n     */\r\n    get outputsConflicted() {\r\n        return this.hasConflictsOn('outputs');\r\n    }\r\n    /**\r\n     * Clear any conflicts on decisions on outputs\r\n     */\r\n    clearOutputConflicts() {\r\n        let decs = decisions_1.filterDecisions(this.decisions, ['outputs'], 2);\r\n        for (let dec of decs) {\r\n            dec.conflict = false;\r\n        }\r\n    }\r\n    /**\r\n     * Get the decision on `execution_count` field (should only be one).\r\n     *\r\n     * Returns null if no decision on `execution_count` was found.\r\n     */\r\n    getExecutionCountDecision() {\r\n        let cellDecs = decisions_1.filterDecisions(this.decisions, ['cells'], 0, 2);\r\n        for (let dec of cellDecs) {\r\n            if (util_1.getDiffEntryByKey(dec.localDiff, 'execution_count') !== null ||\r\n                util_1.getDiffEntryByKey(dec.remoteDiff, 'execution_count') !== null ||\r\n                util_1.getDiffEntryByKey(dec.customDiff, 'execution_count') !== null) {\r\n                return dec;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Apply merge decisions to create the merged cell\r\n     */\r\n    serialize() {\r\n        if (this.deleteCell) {\r\n            return null;\r\n        }\r\n        if (this.base === null) {\r\n            // Only possibility is that cell is added\r\n            if (this.decisions.length > 1 || !this.merged.added) {\r\n                throw new exceptions_1.NotifyUserError('Invalid cell decision');\r\n            }\r\n            let dec = this.decisions[0];\r\n            // Either onesided or identical inserts, but possibly with\r\n            // a custom diff on top!\r\n            let d;\r\n            if (dec.action === 'local' || dec.action === 'either') {\r\n                if (!dec.localDiff) {\r\n                    throw new exceptions_1.NotifyUserError('Invalid cell decision');\r\n                }\r\n                d = dec.localDiff[0];\r\n            }\r\n            else if (dec.action === 'remote') {\r\n                if (!dec.remoteDiff) {\r\n                    throw new exceptions_1.NotifyUserError('Invalid cell decision');\r\n                }\r\n                d = dec.remoteDiff[0];\r\n            }\r\n            else if (dec.action === 'custom') {\r\n                if (!dec.customDiff) {\r\n                    throw new exceptions_1.NotifyUserError('Invalid cell decision');\r\n                }\r\n                d = dec.customDiff[0];\r\n            }\r\n            else {\r\n                throw new exceptions_1.NotifyUserError('Invalid cell decision');\r\n            }\r\n            if (d.op !== 'addrange') {\r\n                throw new exceptions_1.NotifyUserError('Invalid cell decision');\r\n            }\r\n            return d.valuelist[0];\r\n        }\r\n        let decisions = [];\r\n        for (let md of this.decisions) {\r\n            let nmd = new decisions_1.MergeDecision(md);\r\n            nmd.level = 2;\r\n            decisions.push(nmd);\r\n        }\r\n        let output = decisions_1.applyDecisions(this.base, decisions);\r\n        let src = output.source;\r\n        if (Array.isArray(src)) {\r\n            src = src.join('');\r\n        }\r\n        if (src !== this._merged.source.remote) {\r\n            console.warn('Serialized outputs doesn\\'t match model value! ' +\r\n                'Keeping the model value.');\r\n            output.source = util_2.splitLines(this._merged.source.remote);\r\n        }\r\n        if (this.clearOutputs && nbformat.isCode(output)) {\r\n            output.outputs = [];\r\n        }\r\n        return output;\r\n    }\r\n    processDecisions(decisions) {\r\n        // First check for cell-level decisions:\r\n        if (decisions.length === 1) {\r\n            if (util_2.arraysEqual(decisions[0].absolutePath, ['cells'])) {\r\n                // We have a cell level decision\r\n                let md = decisions[0];\r\n                decisions = this.applyCellLevelDecision(md);\r\n                if (decisions.length === 0) {\r\n                    this.decisions.push(md);\r\n                }\r\n            }\r\n        }\r\n        for (let md of decisions) {\r\n            md.level = 2;\r\n            if (md.absolutePath.length < 2 ||\r\n                md.absolutePath[0] !== 'cells') {\r\n                throw new Error('Not a valid path for a cell decision');\r\n            }\r\n            else if (md.absolutePath.length === 2 && (util_2.hasEntries(md.localDiff) || util_2.hasEntries(md.remoteDiff))) {\r\n                // Have decision on /cells/X/.\r\n                // Split the decision on subkey:\r\n                // Nest diff as a patch on cell, which can be split by `splitPatch`:\r\n                let splitDec = decisions_1.pushPatchDecision(md, md.absolutePath.slice(1, 2));\r\n                let localDiff = util_2.hasEntries(splitDec.localDiff) ?\r\n                    splitDec.localDiff[0] : null;\r\n                let remoteDiff = util_2.hasEntries(splitDec.remoteDiff) ?\r\n                    splitDec.remoteDiff[0] : null;\r\n                let subDecisions = this.splitPatch(splitDec, localDiff, remoteDiff);\r\n                // Add all split decisions:\r\n                for (let subdec of subDecisions) {\r\n                    subdec.level = 2;\r\n                    this.decisions.push(subdec);\r\n                }\r\n            }\r\n            else { // Decision has path on subkey\r\n                // Make local path relative to cell\r\n                this.decisions.push(md);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Apply a cell level decision to the model\r\n     *\r\n     * This creates the revelant kinds of models\r\n     */\r\n    applyCellLevelDecision(md) {\r\n        let newDecisions = [];\r\n        /* Possibilities:\r\n         1. Insertion: base is null! Null diff of missing side (unchanged).\r\n         2. Deletion: Null diff of present side (unchanged). Set deleteCell\r\n            depending on action.\r\n         3. Deletion vs patch: Same as 2., but split patch decision onto\r\n            source/metadata/outputs.\r\n         4. Identical ops (insertion or deletion)\r\n         Cases that shouldn't happen:\r\n         5. Insertion vs insertion: Shouldn't happen! Should have been split\r\n            into two decisions with an insertion each before creating model.\r\n         6. Patch vs patch: Shouldn't occur, as those should have been recursed\r\n         */\r\n        console.assert(!this.onesided, 'Cannot have multiple cell decisions on one cell!');\r\n        this.onesided = true; // We set this to distinguish case 3 from normal\r\n        if (!util_2.hasEntries(md.localDiff)) {\r\n            // 1. or 2.:\r\n            this._local = null;\r\n            if (!md.remoteDiff || md.remoteDiff.length !== 1) {\r\n                throw new Error('Merge decision does not conform to expectation: ' + md);\r\n            }\r\n            if (this.base === null) {\r\n                // 1.\r\n                let first = md.remoteDiff[0];\r\n                if (first.op !== 'addrange') {\r\n                    throw new Error('Merge decision does not conform to expectation: ' + md);\r\n                }\r\n                let v = first.valuelist[0];\r\n                this._remote = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n                this._merged = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n            }\r\n            else {\r\n                // 2.\r\n                this._remote = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                this._merged = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                this.deleteCell = util_2.valueIn(md.action, ['remote', 'either']);\r\n            }\r\n        }\r\n        else if (!util_2.hasEntries(md.remoteDiff)) {\r\n            // 1. or 2.:\r\n            this._remote = null;\r\n            if (!md.localDiff || md.localDiff.length !== 1) {\r\n                throw new Error('Merge decision does not conform to expectation: ' + md);\r\n            }\r\n            if (this.base === null) {\r\n                // 1.\r\n                let first = md.localDiff[0];\r\n                if (first.op !== 'addrange') {\r\n                    throw new Error('Merge decision does not conform to expectation: ' + md);\r\n                }\r\n                let v = first.valuelist[0];\r\n                this._local = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n                this._merged = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n            }\r\n            else {\r\n                // 2.\r\n                this._local = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                this._merged = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                this.deleteCell = util_2.valueIn(md.action, ['local', 'either']);\r\n            }\r\n        }\r\n        else {\r\n            console.assert(util_2.hasEntries(md.localDiff) && util_2.hasEntries(md.remoteDiff));\r\n            console.assert(md.localDiff.length === 1 && md.remoteDiff.length === 1);\r\n            // 3. or 4.\r\n            if (md.localDiff[0].op === md.remoteDiff[0].op) {\r\n                // 4.\r\n                if (this.base === null) {\r\n                    // Identical insertions (this relies on preprocessing to ensure only\r\n                    // one value in valuelist)\r\n                    let v = md.localDiff[0].valuelist[0];\r\n                    this._local = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n                    this._remote = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n                    this._merged = model_1.createAddedCellDiffModel(v, this.mimetype);\r\n                }\r\n                else {\r\n                    // Identical delections\r\n                    this._local = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                    this._remote = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                    this._merged = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                    this.deleteCell = util_2.valueIn(md.action, ['local', 'remote', 'either']);\r\n                }\r\n            }\r\n            else {\r\n                // 3., by method of elimination\r\n                let ops = [md.localDiff[0].op, md.remoteDiff[0].op];\r\n                console.assert(util_2.valueIn('removerange', ops) && util_2.valueIn('patch', ops));\r\n                if (this.base === null) {\r\n                    throw new Error('Invalid merge decision, ' +\r\n                        'cannot have null base for deleted cell: ' + md);\r\n                }\r\n                if (ops[0] === 'removerange') {\r\n                    this._local = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                    this.deleteCell = md.action === 'local';\r\n                    // The patch op will be on cell level. Split it on sub keys!\r\n                    newDecisions = newDecisions.concat(this.splitPatch(md, null, md.remoteDiff[0]));\r\n                }\r\n                else {\r\n                    this._remote = model_1.createDeletedCellDiffModel(this.base, this.mimetype);\r\n                    this.deleteCell = md.action === 'remote';\r\n                    // The patch op will be on cell level. Split it on sub keys!\r\n                    newDecisions = newDecisions.concat(this.splitPatch(md, md.localDiff[0], null));\r\n                }\r\n                decisions_1.resolveCommonPaths(newDecisions);\r\n            }\r\n        }\r\n        return newDecisions;\r\n    }\r\n    /**\r\n     * Split a decision with a patch on one side into one decision\r\n     * for each sub entry in the patch.\r\n     */\r\n    splitPatch(md, localPatch, remotePatch) {\r\n        let local = !!localPatch && util_2.hasEntries(localPatch.diff);\r\n        let remote = !!remotePatch && util_2.hasEntries(remotePatch.diff);\r\n        if (!local && !remote) {\r\n            return [];\r\n        }\r\n        let localDiff = local ? localPatch.diff : null;\r\n        let remoteDiff = remote ? remotePatch.diff : null;\r\n        let split = [];\r\n        let keys = [];\r\n        if (local) {\r\n            for (let d of localDiff) {\r\n                keys.push(d.key);\r\n            }\r\n        }\r\n        if (remote) {\r\n            for (let d of remoteDiff) {\r\n                keys.push(d.key);\r\n            }\r\n        }\r\n        keys = keys.filter(util_2.unique);\r\n        if (local && remote) {\r\n            // Sanity check\r\n            if (localPatch.key !== remotePatch.key) {\r\n                throw new Error('Different keys of patch ops given to `splitPatch`.');\r\n            }\r\n        }\r\n        let patchKey = local ? localPatch.key : remotePatch.key;\r\n        for (let key of keys) {\r\n            if (this._whitelist && !util_2.valueIn(key, this._whitelist)) {\r\n                throw new exceptions_1.NotifyUserError('Currently not able to handle decisions on variable \\\"' +\r\n                    key + '\\\"');\r\n            }\r\n            let el = util_1.getDiffEntryByKey(localDiff, key);\r\n            let er = util_1.getDiffEntryByKey(remoteDiff, key);\r\n            let onsesided = !(el && er);\r\n            let action = md.action;\r\n            // If one-sided, change 'base' actions to present side\r\n            if (action === 'base' && onsesided) {\r\n                action = el ? 'local' : 'remote';\r\n            }\r\n            // Create new action:\r\n            split.push(new decisions_1.MergeDecision(md.absolutePath.concat([patchKey]), el ? [el] : null, er ? [er] : null, action, md.conflict));\r\n        }\r\n        let ret = this.splitOnSourceChunks(split);\r\n        decisions_1.resolveCommonPaths(ret);\r\n        return util_2.stableSort(ret, decisions_1.decisionSortKey);\r\n    }\r\n    /**\r\n     * Split decisions on 'source' by chunks.\r\n     *\r\n     * This prevents one decision from contributing to more than one chunk.\r\n     */\r\n    splitOnSourceChunks(decisions) {\r\n        let out = [];\r\n        for (let i = 0; i < decisions.length; ++i) {\r\n            let dec = decisions[i];\r\n            if (dec.absolutePath[2] === 'source') {\r\n                let base = this.base.source;\r\n                if (!Array.isArray(base)) {\r\n                    base = util_2.splitLines(base);\r\n                }\r\n                dec.level = 3;\r\n                let sub = chunking_1.splitMergeDecisionsOnChunks(base, [dec]);\r\n                decisions_1.resolveCommonPaths(sub);\r\n                out = out.concat(util_2.stableSort(sub, decisions_1.decisionSortKey));\r\n            }\r\n            else {\r\n                out.push(dec);\r\n            }\r\n        }\r\n        return out;\r\n    }\r\n    createDiffModel(diff) {\r\n        if (this.base === null) {\r\n            throw new Error('Cannot create a patched or unchanged diff model with null base!');\r\n        }\r\n        if (diff && diff.length > 0) {\r\n            return model_1.createPatchedCellDiffModel(this.base, diff, this.mimetype);\r\n        }\r\n        else {\r\n            return model_1.createUnchangedCellDiffModel(this.base, this.mimetype);\r\n        }\r\n    }\r\n    createMergedDiffModel() {\r\n        if (this.base === null) {\r\n            throw new Error('Cannot create a patched or unchanged merged diff model with null base!');\r\n        }\r\n        return createPatchedCellDecisionDiffModel(this.base, this.decisions, this.local, this.remote, this.mimetype);\r\n    }\r\n}\r\nexports.CellMergeModel = CellMergeModel;\r\n//# sourceMappingURL=cell.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ObjectMergeModel = exports.DecisionStringDiffModel = void 0;\r\nconst range_1 = require(\"../../diff/range\");\r\nconst model_1 = require(\"../../diff/model\");\r\nconst decisions_1 = require(\"../../merge/decisions\");\r\nconst chunking_1 = require(\"../../chunking\");\r\nconst patch_1 = require(\"../../patch\");\r\n/**\r\n * A string diff model based on merge decisions.\r\n */\r\nclass DecisionStringDiffModel extends model_1.StringDiffModel {\r\n    constructor(base, decisions, sourceModels, collapsible, header, collapsed) {\r\n        // Set up initial parameters for super call\r\n        let baseStr = patch_1.stringifyAndBlankNull(base);\r\n        super(baseStr, '', [], [], collapsible, header, collapsed);\r\n        this.rawBase = base;\r\n        this.decisions = decisions;\r\n        this._outdated = true;\r\n        this._sourceModels = sourceModels;\r\n        this._update();\r\n    }\r\n    get additions() {\r\n        if (this._outdated) {\r\n            this._update();\r\n        }\r\n        return this._additions;\r\n    }\r\n    set additions(value) {\r\n        this._additions = value;\r\n    }\r\n    get deletions() {\r\n        if (this._outdated) {\r\n            this._update();\r\n        }\r\n        return this._deletions;\r\n    }\r\n    set deletions(value) {\r\n        this._deletions = value;\r\n    }\r\n    get remote() {\r\n        if (this._outdated) {\r\n            this._update();\r\n        }\r\n        return this._remote;\r\n    }\r\n    set remote(value) {\r\n        this._remote = value;\r\n    }\r\n    invalidate() {\r\n        this._outdated = true;\r\n    }\r\n    get invalid() {\r\n        return this._outdated;\r\n    }\r\n    /**\r\n     * Chunk additions/deletions into line-based chunks, while also producing\r\n     * chunks from source models where the decision is a no-op (action 'base').\r\n     */\r\n    getLineChunks() {\r\n        let models = [this];\r\n        models = models.concat(this._sourceModels);\r\n        let chunker = new chunking_1.LineChunker();\r\n        let iter = new model_1.StringDiffModel.SyncedDiffIter(models);\r\n        for (let v = iter.next(); v !== undefined; v = iter.next()) {\r\n            if (iter.currentModel() === this) {\r\n                // Chunk diffs in own model normally\r\n                // (they should already be present in own model)\r\n                chunker.addDiff(v.range, v.isAddition);\r\n            }\r\n            else {\r\n                // Skip ops in other models that are not no-ops\r\n                if (!v.range.source || v.range.source.decision.action !== 'base') {\r\n                    continue;\r\n                }\r\n                // Other model\r\n                chunker.addGhost(v.range, v.isAddition, iter.currentOffset);\r\n            }\r\n        }\r\n        return chunker.chunks;\r\n    }\r\n    _update() {\r\n        this._outdated = false;\r\n        let diff = decisions_1.buildDiffs(this.rawBase, this.decisions, 'merged');\r\n        let out = patch_1.patchStringified(this.rawBase, diff);\r\n        this._additions = range_1.raw2Pos(out.additions, out.remote);\r\n        this._deletions = range_1.raw2Pos(out.deletions, this.base || '');\r\n        this._remote = out.remote;\r\n    }\r\n}\r\nexports.DecisionStringDiffModel = DecisionStringDiffModel;\r\n/**\r\n * Abstract base class for a merge model of objects of the type ObjectType,\r\n * which uses DiffModelType to model each side internally.\r\n *\r\n * Implementors need to define the abstract functions createDiffModel and\r\n * createMergedDiffModel.\r\n */\r\nclass ObjectMergeModel {\r\n    /**\r\n     *\r\n     */\r\n    constructor(base, decisions, mimetype, whitelist) {\r\n        this._finalized = false;\r\n        this.base = base;\r\n        this.mimetype = mimetype;\r\n        this._whitelist = whitelist || null;\r\n        this.decisions = decisions;\r\n    }\r\n    /**\r\n     * Apply merge decisions to create the merged cell\r\n     */\r\n    serialize() {\r\n        if (this.base === null) {\r\n            return null;\r\n        }\r\n        return decisions_1.applyDecisions(this.base, this.decisions);\r\n    }\r\n    /**\r\n     * Model of the local diff vs. base\r\n     */\r\n    get local() {\r\n        if (this._local === undefined) {\r\n            // We're builiding from decisions\r\n            this._finalizeDecisions();\r\n            let diff = decisions_1.buildDiffs(this.base, this.decisions, 'local');\r\n            this._local = this.createDiffModel(diff);\r\n        }\r\n        return this._local;\r\n    }\r\n    /**\r\n     * Model of the remote diff vs. base\r\n     */\r\n    get remote() {\r\n        if (this._remote === undefined) {\r\n            this._finalizeDecisions();\r\n            let diff = decisions_1.buildDiffs(this.base, this.decisions, 'remote');\r\n            this._remote = this.createDiffModel(diff);\r\n        }\r\n        return this._remote;\r\n    }\r\n    /**\r\n     * Model of the diff of the merged cell vs. base\r\n     */\r\n    get merged() {\r\n        if (this._merged === undefined) {\r\n            this._finalizeDecisions();\r\n            // Merge model needs access to local and remote models to also include\r\n            // chunks from them\r\n            this._merged = this.createMergedDiffModel();\r\n        }\r\n        return this._merged;\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    get subModels() {\r\n        return [this.local, this.remote, this.merged];\r\n    }\r\n    /**\r\n     * Prevent further changes to decisions, and label the diffs\r\n     *\r\n     * The labels are used for picking of decisions\r\n     */\r\n    _finalizeDecisions() {\r\n        if (!this._finalized) {\r\n            for (let md of this.decisions) {\r\n                if (md.action === 'either') {\r\n                    chunking_1.labelSource(md.localDiff, { decision: md, action: 'either' });\r\n                    chunking_1.labelSource(md.remoteDiff, { decision: md, action: 'either' });\r\n                }\r\n                else {\r\n                    chunking_1.labelSource(md.localDiff, { decision: md, action: 'local' });\r\n                    chunking_1.labelSource(md.remoteDiff, { decision: md, action: 'remote' });\r\n                }\r\n                chunking_1.labelSource(md.customDiff, { decision: md, action: 'custom' });\r\n            }\r\n            this._finalized = true;\r\n        }\r\n    }\r\n}\r\nexports.ObjectMergeModel = ObjectMergeModel;\r\n//# sourceMappingURL=common.js.map","\"use strict\";\r\n// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./cell\"), exports);\r\n__exportStar(require(\"./common\"), exports);\r\n__exportStar(require(\"./metadata\"), exports);\r\n__exportStar(require(\"./notebook\"), exports);\r\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MetadataMergeModel = void 0;\r\nconst model_1 = require(\"../../diff/model\");\r\nconst common_1 = require(\"./common\");\r\nconst coreutils_1 = require(\"@lumino/coreutils\");\r\n/**\r\n * Model of a merge of metadata with decisions\r\n */\r\nclass MetadataMergeModel extends common_1.ObjectMergeModel {\r\n    constructor(base, decisions) {\r\n        super(base, decisions, 'application/json');\r\n    }\r\n    serialize() {\r\n        if (!this.merged || this.merged.remote === null) {\r\n            throw new Error('Missing notebook metadata merge data.');\r\n        }\r\n        // This will check whether metadata is valid JSON.\r\n        // Validation of compatibility vs notebook format\r\n        // will happen on server side.\r\n        return JSON.parse(this.merged.remote);\r\n    }\r\n    createDiffModel(diff) {\r\n        if (diff && diff.length > 0) {\r\n            return model_1.createPatchStringDiffModel(this.base, diff);\r\n        }\r\n        else {\r\n            const baseCopy = coreutils_1.JSONExt.deepCopy(this.base);\r\n            return model_1.createDirectStringDiffModel(baseCopy, baseCopy);\r\n        }\r\n    }\r\n    createMergedDiffModel() {\r\n        return new common_1.DecisionStringDiffModel(this.base, this.decisions, [this.local, this.remote]);\r\n    }\r\n}\r\nexports.MetadataMergeModel = MetadataMergeModel;\r\n//# sourceMappingURL=metadata.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NotebookMergeModel = void 0;\r\nconst util_1 = require(\"../../common/util\");\r\nconst decisions_1 = require(\"../../merge/decisions\");\r\nconst chunking_1 = require(\"../../chunking\");\r\nconst patch_1 = require(\"../../patch\");\r\nconst cell_1 = require(\"./cell\");\r\nconst metadata_1 = require(\"./metadata\");\r\n/**\r\n * Diff model for a Jupyter Notebook\r\n */\r\nclass NotebookMergeModel {\r\n    /**\r\n     * Create a new NotebookMergeModel from a base notebook and a list of\r\n     * merge decisions.\r\n     *\r\n     * The base as well as the merge decisions are normally supplied by the\r\n     * nbdime server.\r\n     */\r\n    constructor(base, rawMergeDecisions) {\r\n        this.base = base;\r\n        let ctor = this.constructor;\r\n        let decisions = ctor.preprocessDecisions(rawMergeDecisions);\r\n        // The notebook metadata MIME type is used for determining the MIME type\r\n        // of source cells, so store it easily accessible:\r\n        let mimetype;\r\n        try {\r\n            mimetype = base.metadata.language_info.mimetype;\r\n        }\r\n        catch (e) {\r\n            // missing metadata(probably old notebook)\r\n        }\r\n        this.mimetype = mimetype || 'text/python';\r\n        this.cells = this.buildCellList(decisions);\r\n        let metadataDecs = decisions_1.filterDecisions(decisions, ['metadata']);\r\n        this.metadata = new metadata_1.MetadataMergeModel(base.metadata, metadataDecs);\r\n        this.unsavedChanges = false;\r\n    }\r\n    static preprocessDecisions(rawMergeDecisions) {\r\n        let mergeDecisions = [];\r\n        for (let rmd of rawMergeDecisions) {\r\n            mergeDecisions.push(new decisions_1.MergeDecision(rmd));\r\n        }\r\n        mergeDecisions = splitCellChunks(mergeDecisions);\r\n        mergeDecisions = splitCellRemovals(mergeDecisions);\r\n        mergeDecisions = splitCellInsertions(mergeDecisions);\r\n        mergeDecisions = splitCellListPatch(mergeDecisions);\r\n        decisions_1.resolveCommonPaths(mergeDecisions);\r\n        for (let md of mergeDecisions) {\r\n            if (md.action === 'either') {\r\n                chunking_1.labelSource(md.localDiff, { decision: md, action: 'either' });\r\n                chunking_1.labelSource(md.remoteDiff, { decision: md, action: 'either' });\r\n            }\r\n            else {\r\n                chunking_1.labelSource(md.localDiff, { decision: md, action: 'local' });\r\n                chunking_1.labelSource(md.remoteDiff, { decision: md, action: 'remote' });\r\n            }\r\n            chunking_1.labelSource(md.customDiff, { decision: md, action: 'custom' });\r\n        }\r\n        return mergeDecisions;\r\n    }\r\n    serialize() {\r\n        let nb = {};\r\n        // Simply copy all root-level fields except cells/metadata\r\n        for (let key in this.base) {\r\n            if (!util_1.valueIn(key, ['cells', 'metadata'])) {\r\n                nb[key] = this.base[key];\r\n            }\r\n        }\r\n        // Serialize metadata\r\n        nb['metadata'] = this.metadata.serialize();\r\n        // Serialzie cell list\r\n        let cells = [];\r\n        for (let c of this.cells) {\r\n            let s = c.serialize();\r\n            if (s !== null) {\r\n                cells.push(s);\r\n            }\r\n        }\r\n        nb['cells'] = cells;\r\n        // As long as base is a valid notebook, and sub-serialization is valid,\r\n        // this output should be a valid notebook.\r\n        return nb;\r\n    }\r\n    get decisions() {\r\n        let ret = [];\r\n        for (let c of this.cells) {\r\n            ret = ret.concat(c.decisions);\r\n        }\r\n        ret = ret.concat(this.metadata.decisions);\r\n        return ret;\r\n    }\r\n    get conflicts() {\r\n        let ret = [];\r\n        for (let md of this.decisions) {\r\n            if (md.conflict) {\r\n                ret.push(md);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    /**\r\n     * Correlate the different cells in the diff lists into a merge list\r\n     */\r\n    buildCellList(decisions) {\r\n        // We have to check for merge decisions on the `cells` object in\r\n        // order to check for added cells. This assumes that the common\r\n        // paths of the merge decisions have been resolved. It also assumes that\r\n        // no merge decision can have root as its common path.\r\n        // Create arrays of base value and decisions to match base cell list\r\n        let cellDecisions = [];\r\n        for (let bc of this.base.cells) {\r\n            // Create empty decisions array for now, add in below\r\n            cellDecisions.push({ base: bc, decisions: [] });\r\n        }\r\n        let insertOffset = 0;\r\n        // Assumes merge decisions come in order!\r\n        for (let md of decisions) {\r\n            let key = md.absolutePath;\r\n            if (key.length < 1 || key[0] !== 'cells') {\r\n                continue; // Only care about decisions on cells here\r\n            }\r\n            if (util_1.arraysEqual(key, ['cells'])) {\r\n                let idx = null;\r\n                let insertion = false;\r\n                for (let di of md.diffs) {\r\n                    // Ensure diff has exactly one item:\r\n                    if (!di || di.length === 0) {\r\n                        continue;\r\n                    }\r\n                    // All keys should be the same since we run splitCellChunks first\r\n                    idx = di[0].key;\r\n                    if (di[0].op === 'addrange') {\r\n                        // Insert entries into `cells` at idx\r\n                        let offsetIdx = insertOffset + idx;\r\n                        cellDecisions.splice(offsetIdx, 0, { base: null, decisions: [md] });\r\n                        insertOffset += 1;\r\n                        insertion = true; // flag to break outer loop\r\n                        break;\r\n                    }\r\n                    // Only checking for insertions in this loop, since insertions can\r\n                    // only be paired with other insertions.\r\n                }\r\n                if (insertion) {\r\n                    continue;\r\n                }\r\n                // If we reach this point, it is not an insertion merge!\r\n                if (idx === null) {\r\n                    throw new Error('No index could be found for merge decision!');\r\n                }\r\n                let cds = cellDecisions[idx + insertOffset].decisions;\r\n                cds.push(md);\r\n            }\r\n            else {\r\n                // Has a path into a cell\r\n                // Format specifies that these always comes before decisions that\r\n                // change the order of cells, so index is straight forward!\r\n                let idx = key[1];\r\n                let cds = cellDecisions[idx].decisions;\r\n                cds.push(md);\r\n            }\r\n        }\r\n        let cells = [];\r\n        for (let cellInfo of cellDecisions) {\r\n            cells.push(new cell_1.CellMergeModel(cellInfo.base, cellInfo.decisions, this.mimetype));\r\n        }\r\n        return cells;\r\n    }\r\n}\r\nexports.NotebookMergeModel = NotebookMergeModel;\r\nfunction isChunk(diff) {\r\n    return !!diff && diff.length === 2 &&\r\n        diff[0].key === diff[1].key;\r\n}\r\n/**\r\n * The merge format allows for chunking of sequence diffs such that one or more\r\n * entries in the diff lists have 2 entries, where the first is always an\r\n * insertion (addrange). For cells, we split these decisions in two, for easier\r\n * visualization. Note: When several diff entries have 2 entries, the second\r\n * entries are identical.\r\n */\r\nfunction splitCellChunks(mergeDecisions) {\r\n    let output = [];\r\n    for (let md of mergeDecisions) {\r\n        if (util_1.arraysEqual(md.absolutePath, ['cells'])) {\r\n            if (md.localDiff && !md.remoteDiff) {\r\n                for (let d of md.localDiff) {\r\n                    let nmd = new decisions_1.MergeDecision(md);\r\n                    nmd.localDiff = [d];\r\n                    output.push(nmd);\r\n                }\r\n            }\r\n            else if (md.remoteDiff && !md.localDiff) {\r\n                for (let d of md.remoteDiff) {\r\n                    let nmd = new decisions_1.MergeDecision(md);\r\n                    nmd.absolutePath = md.absolutePath.slice();\r\n                    nmd.remoteDiff = [d];\r\n                    output.push(nmd);\r\n                }\r\n            }\r\n            else if (isChunk(md.localDiff)) {\r\n                if (isChunk(md.remoteDiff)) {\r\n                    // Both diffs are chunks, split adds vs agreed removes\r\n                    let nmd = new decisions_1.MergeDecision(md);\r\n                    nmd.localDiff = md.localDiff.slice(0, 1);\r\n                    nmd.remoteDiff = md.remoteDiff.slice(0, 1);\r\n                    output.push(nmd);\r\n                    output.push(new decisions_1.MergeDecision(md.absolutePath.slice(), md.localDiff.slice(1), md.remoteDiff.slice(1), 'either'));\r\n                }\r\n                else {\r\n                    // Split off local\r\n                    let nmd = new decisions_1.MergeDecision(md);\r\n                    nmd.localDiff = md.localDiff.slice(0, 1);\r\n                    output.push(nmd);\r\n                    output.push(new decisions_1.MergeDecision(md.absolutePath.slice(), md.localDiff.slice(1), [], 'local', // Check for custom action first?\r\n                    md.conflict));\r\n                }\r\n            }\r\n            else if (isChunk(md.remoteDiff)) {\r\n                // Split off remote\r\n                let nmd = new decisions_1.MergeDecision(md);\r\n                nmd.remoteDiff = md.remoteDiff.slice(0, 1);\r\n                output.push(nmd);\r\n                output.push(new decisions_1.MergeDecision(md.absolutePath.slice(), [], md.remoteDiff.slice(1), 'remote', // Check for custom action first?\r\n                md.conflict));\r\n            }\r\n            else if (util_1.hasEntries(md.remoteDiff) && util_1.hasEntries(md.localDiff)) {\r\n                const ops = [md.remoteDiff[0].op, md.localDiff[0].op].sort();\r\n                if (ops.join(',') === 'addrange,removerange') {\r\n                    // Insertion and deletions on the same index are simply split\r\n                    // but both keep the conflict status\r\n                    // Just do local first (alt. do add first)\r\n                    let lmd = new decisions_1.MergeDecision(md);\r\n                    lmd.action = 'local';\r\n                    lmd.localDiff = md.localDiff.slice();\r\n                    lmd.remoteDiff = null;\r\n                    output.push(lmd);\r\n                    let rmd = new decisions_1.MergeDecision(md);\r\n                    rmd.action = 'remote';\r\n                    rmd.localDiff = null;\r\n                    rmd.remoteDiff = md.remoteDiff.slice();\r\n                    output.push(rmd);\r\n                }\r\n                else {\r\n                    output.push(md); // deepCopy?\r\n                }\r\n            }\r\n            else {\r\n                output.push(md); // deepCopy?\r\n            }\r\n        }\r\n        else {\r\n            output.push(md);\r\n        }\r\n    }\r\n    decisions_1.resolveCommonPaths(output);\r\n    return output;\r\n}\r\n/**\r\n * If any decisions have diffs on different cells, split them\r\n * up for one decision per cell.\r\n */\r\nfunction splitCellListPatch(mergeDecisions) {\r\n    let output = [];\r\n    for (let md of mergeDecisions) {\r\n        if (!util_1.arraysEqual(md.absolutePath, ['cells'])) {\r\n            output.push(md);\r\n            continue;\r\n        }\r\n        // Null out empty diffs\r\n        let dl = util_1.hasEntries(md.localDiff) ? md.localDiff : null;\r\n        let dr = util_1.hasEntries(md.remoteDiff) ? md.remoteDiff : null;\r\n        if (dl && dl.length < 2 && dr && dr.length < 2) {\r\n            // Single cell affected\r\n            output.push(md);\r\n            continue;\r\n        }\r\n        // Before this is called, we should have split up chunks\r\n        // as well as range addition/removal, so all diffs\r\n        // should have different keys\r\n        let maxlen = Math.max(dl ? dl.length : 0, dr ? dr.length : 0);\r\n        for (let i = 0; i < maxlen; ++i) {\r\n            let subdl = dl && i < dl.length ? [dl[i]] : null;\r\n            let subdr = dr && i < dr.length ? [dr[i]] : null;\r\n            output.push(new decisions_1.MergeDecision(md.absolutePath.slice(), subdl, subdr, md.action, md.conflict));\r\n        }\r\n    }\r\n    return util_1.stableSort(output, decisions_1.decisionSortKey);\r\n}\r\n/**\r\n * Split \"removerange\" diffs on cell list level into individual decisions!\r\n */\r\nfunction splitCellRemovals(mergeDecisions) {\r\n    let output = [];\r\n    let makeSplitPart = function (md, key, local, remote) {\r\n        let newMd = new decisions_1.MergeDecision(md.absolutePath.slice(), null, null, md.action, md.conflict);\r\n        let newDiff = [{\r\n                key: key,\r\n                op: 'removerange',\r\n                length: 1\r\n            }];\r\n        console.assert(local || remote);\r\n        if (local) {\r\n            newMd.localDiff = newDiff;\r\n        }\r\n        if (remote) {\r\n            newMd.remoteDiff = newDiff;\r\n        }\r\n        return newMd;\r\n    };\r\n    for (let md of mergeDecisions) {\r\n        if (!util_1.arraysEqual(md.absolutePath, ['cells'])) {\r\n            output.push(md);\r\n            continue;\r\n        }\r\n        let dl = util_1.hasEntries(md.localDiff) ? md.localDiff[md.localDiff.length - 1] : null;\r\n        let dr = util_1.hasEntries(md.remoteDiff) ? md.remoteDiff[md.remoteDiff.length - 1] : null;\r\n        // TODO: Does it make sense to split on custom?\r\n        if (dl && !dr || dr && !dl) {\r\n            // One-way diff\r\n            let d = (dl ? dl : dr);\r\n            if (d.op === 'removerange' && d.length > 1) {\r\n                // Found a one-way diff to split!\r\n                for (let i = 0; i < d.length; ++i) {\r\n                    output.push(makeSplitPart(md, d.key + i, !!dl, !!dr));\r\n                }\r\n            }\r\n            else {\r\n                // Not a removerange type:\r\n                output.push(md);\r\n                continue;\r\n            }\r\n        }\r\n        else if (dr && dl) {\r\n            // Two way diff, keys need to be matched\r\n            if (dl.op !== 'removerange' && dr.op !== 'removerange') {\r\n                // Not a removerange type:\r\n                output.push(md);\r\n                continue;\r\n            }\r\n            else if (dl.op === dr.op) {\r\n                // Both sides have removerange, just match keys/length\r\n                // Note: Assume that ranges have overlap, since they are in one decision\r\n                let klStart = dl.key;\r\n                let krStart = dr.key;\r\n                let start = Math.min(klStart, krStart);\r\n                let klEnd = klStart + dl.length;\r\n                let krEnd = krStart + dr.length;\r\n                let end = Math.max(klEnd, krEnd);\r\n                for (let i = start; i < end; ++i) {\r\n                    let local = i >= klStart && i < klEnd;\r\n                    let remote = i >= krStart && i < krEnd;\r\n                    output.push(makeSplitPart(md, i, local, remote));\r\n                }\r\n            }\r\n            else {\r\n                // One side has removerange, the other a patch op (implied)\r\n                let remLocal = dl.op === 'removerange';\r\n                let rOp = (remLocal ? dl : dr);\r\n                let pOp = (remLocal ? dr : dl);\r\n                console.assert(pOp.op === 'patch');\r\n                let pidx = pOp.key;\r\n                let start = rOp.key;\r\n                for (let i = start; i < start + rOp.length; ++i) {\r\n                    let newMd = makeSplitPart(md, i, remLocal, !remLocal);\r\n                    if (i === pidx) {\r\n                        if (remLocal) {\r\n                            newMd.remoteDiff = [pOp];\r\n                        }\r\n                        else {\r\n                            newMd.localDiff = [pOp];\r\n                        }\r\n                    }\r\n                    output.push(newMd);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Split \"addrange\" diffs on cell list level into individual decisions!\r\n * Also splits two-way insertions into two individual ones.\r\n */\r\nfunction splitCellInsertions(mergeDecisions) {\r\n    let output = [];\r\n    let makeSplitPart = function (md, value, local, remote) {\r\n        let newMd = new decisions_1.MergeDecision(md.absolutePath.slice(), null, null, md.action, md.conflict);\r\n        if ((local && !util_1.hasEntries(md.localDiff)) || (!local && !util_1.hasEntries(md.remoteDiff))) {\r\n            throw new Error('Invalid input: ' + md);\r\n        }\r\n        let key = (local ? md.localDiff : md.remoteDiff)[0].key;\r\n        let newDiff = [{\r\n                key: key,\r\n                op: 'addrange',\r\n                valuelist: [value]\r\n            }];\r\n        console.assert(local || remote);\r\n        if (local) {\r\n            newMd.localDiff = newDiff;\r\n        }\r\n        if (remote) {\r\n            newMd.remoteDiff = newDiff;\r\n        }\r\n        return newMd;\r\n    };\r\n    for (let md of mergeDecisions) {\r\n        // Just push decisions not on cells list:\r\n        if (!util_1.arraysEqual(md.absolutePath, ['cells'])) {\r\n            output.push(md);\r\n            continue;\r\n        }\r\n        // Check wether all diffs are pure addrange\r\n        let correctType = true;\r\n        if (md.localDiff) {\r\n            for (let dl of md.localDiff) {\r\n                if (dl.op !== 'addrange') {\r\n                    correctType = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (md.remoteDiff) {\r\n            for (let dl of md.remoteDiff) {\r\n                if (dl.op !== 'addrange') {\r\n                    correctType = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!correctType) {\r\n            output.push(md);\r\n            continue;\r\n        }\r\n        let dl = md.localDiff && md.localDiff.length === 1 ? md.localDiff[0] : null;\r\n        let dr = md.remoteDiff && md.remoteDiff.length === 1 ? md.remoteDiff[0] : null;\r\n        if (dl && !dr || dr && !dl) {\r\n            // One-way diff\r\n            let d = (dl ? dl : dr);\r\n            let insert = d.valuelist;\r\n            for (let v of insert) {\r\n                output.push(makeSplitPart(md, v, !!dl, !!dr));\r\n            }\r\n        }\r\n        else if (dl && dr) {\r\n            // Two way diff\r\n            // First, check if both insertions are equal!\r\n            let eq = patch_1.stringify(dl.valuelist) === patch_1.stringify(dr.valuelist);\r\n            if (eq) {\r\n                // Split to one decision per cell\r\n                for (let c of dl.valuelist) {\r\n                    output.push(makeSplitPart(md, c, true, true));\r\n                }\r\n            }\r\n            else {\r\n                // Next, check decision for ruling on order (e.g.\r\n                // local_then_remote, which we will use as the default).\r\n                let start = dl.key;\r\n                console.assert(start === dr.key);\r\n                if (md.action === 'remote_then_local') {\r\n                    // Only case where we need to switch order!\r\n                    for (let c of dr.valuelist) {\r\n                        const part = makeSplitPart(md, c, false, true);\r\n                        part.action = 'remote';\r\n                        output.push(part);\r\n                    }\r\n                    for (let c of dl.valuelist) {\r\n                        const part = makeSplitPart(md, c, true, false);\r\n                        part.action = 'local';\r\n                        output.push(part);\r\n                    }\r\n                }\r\n                else {\r\n                    for (let c of dl.valuelist) {\r\n                        const part = makeSplitPart(md, c, true, false);\r\n                        part.action = 'local';\r\n                        output.push(part);\r\n                    }\r\n                    for (let c of dr.valuelist) {\r\n                        const part = makeSplitPart(md, c, false, true);\r\n                        part.action = 'remote';\r\n                        output.push(part);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return output;\r\n}\r\n//# sourceMappingURL=notebook.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.PatchObjectHelper = void 0;\r\nconst util_1 = require(\"../common/util\");\r\nclass PatchObjectHelper {\r\n    constructor(base, diff) {\r\n        this._diffLUT = {};\r\n        let diffKeys = [];\r\n        if (diff) {\r\n            for (let d of diff) {\r\n                diffKeys.push(d.key);\r\n                this._diffLUT[d.key] = d;\r\n            }\r\n        }\r\n        this._diffKeys = diffKeys;\r\n        this.baseKeys = _objectKeys(base);\r\n    }\r\n    isDiffKey(key) {\r\n        return util_1.valueIn(key, this._diffKeys);\r\n    }\r\n    getDiffEntry(key) {\r\n        return this._diffLUT[key];\r\n    }\r\n    /**\r\n     * Whether there any dict entries after the current add/remove diff op.\r\n     *\r\n     * Note that if the current op is a remove op, it does not take into\r\n     * account any entries added below it. Similarly, if the current op is\r\n     * an add op it does not take into account any entries that are\r\n     * removed after it.\r\n     *\r\n     * Assumes current key is a diff key to either an add or remove op.\r\n     * @returns {boolean}\r\n     */\r\n    entriesAfterCurrentAddRem() {\r\n        if (this._currentIsAddition === undefined) {\r\n            throw new Error('Current op is not an add or remove op');\r\n        }\r\n        // Check for unchanged entries after, or any changed entries\r\n        // that are not of the OPPOSITE add/remove type:\r\n        let oppositeOp = this._currentIsAddition ? 'remove' : 'add';\r\n        for (let key of this._remainingKeys) {\r\n            if (!util_1.valueIn(key, this._diffKeys)) {\r\n                // There remains unchanged entries after\r\n                return true;\r\n            }\r\n            else if (this._diffLUT[key].op !== oppositeOp) {\r\n                // There remains entries that should not be ignored\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    iter() {\r\n        this._remainingKeys = this.baseKeys.concat(this._diffKeys).filter(util_1.unique).sort();\r\n        return this;\r\n    }\r\n    keys() {\r\n        return this;\r\n    }\r\n    next() {\r\n        let key = this._remainingKeys.shift();\r\n        if (key && util_1.valueIn(key, this._diffKeys)) {\r\n            let op = this._diffLUT[key].op;\r\n            if (op === 'add') {\r\n                this._currentIsAddition = true;\r\n            }\r\n            else if (op === 'remove') {\r\n                this._currentIsAddition = false;\r\n            }\r\n            else {\r\n                this._currentIsAddition = undefined;\r\n            }\r\n        }\r\n        return key;\r\n    }\r\n    clone() {\r\n        let c = new PatchObjectHelper({}, null);\r\n        c.baseKeys = this.baseKeys;\r\n        c._diffKeys = this._diffKeys;\r\n        c._currentIsAddition = this._currentIsAddition;\r\n        c._diffLUT = this._diffLUT;\r\n        c._remainingKeys = this._remainingKeys.slice();\r\n        return c;\r\n    }\r\n}\r\nexports.PatchObjectHelper = PatchObjectHelper;\r\n/**\r\n * The keys present in a Object class. Equivalent to Object.keys, but with a\r\n * fallback if not defined.\r\n */\r\nlet _objectKeys = Object.keys || function (obj) {\r\n    let has = Object.prototype.hasOwnProperty || function () { return true; };\r\n    let keys = [];\r\n    for (let key in obj) {\r\n        if (has.call(obj, key)) {\r\n            keys.push(key);\r\n        }\r\n    }\r\n    return keys;\r\n};\r\n//# sourceMappingURL=common.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.patch = void 0;\r\nconst coreutils_1 = require(\"@lumino/coreutils\");\r\nconst util_1 = require(\"../common/util\");\r\nconst diffentries_1 = require(\"../diff/diffentries\");\r\nconst stringified_1 = require(\"./stringified\");\r\nfunction patch(base, diff) {\r\n    if (typeof base === 'string') {\r\n        return stringified_1.patchString(base, diff, 0, false).remote;\r\n    }\r\n    else if (Array.isArray(base)) {\r\n        const baseCopy = coreutils_1.JSONExt.deepCopy(base);\r\n        return patchSequence(baseCopy, diff);\r\n    }\r\n    else if (typeof base === 'number' || typeof base === 'boolean') {\r\n        throw new TypeError('Cannot patch an atomic type: ' + typeof base);\r\n    }\r\n    else if (base === null) {\r\n        throw new TypeError('Cannot patch a null base!');\r\n    }\r\n    else {\r\n        const baseCopy = coreutils_1.JSONExt.deepCopy(base);\r\n        return patchObject(baseCopy, diff);\r\n    }\r\n}\r\nexports.patch = patch;\r\n/**\r\n * Patch an array according to the diff.\r\n */\r\nfunction patchSequence(base, diff) {\r\n    if (diff === null) {\r\n        return util_1.deepCopy(base);\r\n    }\r\n    // The patched sequence to build and return\r\n    let patched = [];\r\n    // Index into obj, the next item to take unless diff says otherwise\r\n    let take = 0;\r\n    let skip = 0;\r\n    for (let e of diff) {\r\n        // Check for valid entry first:\r\n        diffentries_1.validateSequenceOp(base, e);\r\n        let index = e.key;\r\n        // Take values from base not mentioned in diff, up to not including\r\n        // index\r\n        for (let value of base.slice(take, index)) {\r\n            patched.push(util_1.deepCopy(value));\r\n        }\r\n        if (e.op === 'addrange') {\r\n            // Extend with new values directly\r\n            patched = patched.concat(e.valuelist);\r\n            skip = 0;\r\n        }\r\n        else if (e.op === 'removerange') {\r\n            // Delete a number of values by skipping\r\n            skip = e.length;\r\n        }\r\n        else if (e.op === 'patch') {\r\n            patched.push(patch(base[index], e.diff));\r\n            skip = 1;\r\n        }\r\n        // Skip the specified number of elements, but never decrement take.\r\n        // Note that take can pass index in diffs with repeated +/- on the\r\n        // same index, i.e. [op_remove(index), op_add(index, value)]\r\n        take = Math.max(take, index + skip);\r\n    }\r\n    // Take values at end not mentioned in diff\r\n    for (let value of base.slice(take)) {\r\n        patched.push(util_1.deepCopy(value));\r\n    }\r\n    return patched;\r\n}\r\n/**\r\n * Patch an object (dictionary type) according to the diff.\r\n */\r\nfunction patchObject(base, diff) {\r\n    let patched = {};\r\n    let keysToCopy = Object.keys(base);\r\n    if (diff) {\r\n        for (let e of diff) {\r\n            // Check for valid entry first:\r\n            diffentries_1.validateObjectOp(base, e, keysToCopy);\r\n            let key = e.key;\r\n            if (e.op === 'add') {\r\n                patched[key] = e.value;\r\n            }\r\n            else if (e.op === 'remove') {\r\n                keysToCopy.splice(keysToCopy.indexOf(key), 1); // Remove key\r\n            }\r\n            else if (e.op === 'replace') {\r\n                keysToCopy.splice(keysToCopy.indexOf(key), 1); // Remove key\r\n                patched[key] = e.value;\r\n            }\r\n            else if (e.op === 'patch') {\r\n                keysToCopy.splice(keysToCopy.indexOf(key), 1); // Remove key\r\n                patched[key] = patch(base[key], e.diff);\r\n            }\r\n        }\r\n    }\r\n    // Take items not mentioned in diff\r\n    for (let key of keysToCopy) {\r\n        patched[key] = util_1.deepCopy(base[key]);\r\n    }\r\n    return patched;\r\n}\r\n//# sourceMappingURL=generic.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./common\"), exports);\r\n__exportStar(require(\"./generic\"), exports);\r\n__exportStar(require(\"./stringified\"), exports);\r\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.patchString = exports.patchStringified = exports.stringifyAndBlankNull = exports.stringify = void 0;\r\nconst algorithm_1 = require(\"@lumino/algorithm\");\r\nconst util_1 = require(\"../common/util\");\r\nconst util_2 = require(\"../diff/util\");\r\nconst diffentries_1 = require(\"../diff/diffentries\");\r\nconst range_1 = require(\"../diff/range\");\r\nconst common_1 = require(\"./common\");\r\nconst stableStringify = require(\"json-stable-stringify\");\r\n/**\r\n * Ordered stringify. Wraps stableStringify(), but handles indentation.\r\n *\r\n * indentFirst controls whether the first line is indented as well, and\r\n * defaults to true.\r\n */\r\nfunction stringify(values, level, indentFirst = true) {\r\n    let ret = stableStringify(values, { space: util_2.JSON_INDENT });\r\n    if (level) {\r\n        ret = _indent(ret, level, indentFirst);\r\n    }\r\n    return ret;\r\n}\r\nexports.stringify = stringify;\r\n/**\r\n * Ensure value is string, if not stringify.\r\n */\r\nfunction stringifyAndBlankNull(value) {\r\n    if (typeof value === 'string') {\r\n        return value;\r\n    }\r\n    else if (value === null) {\r\n        return '';\r\n    }\r\n    else {\r\n        return stringify(value);\r\n    }\r\n}\r\nexports.stringifyAndBlankNull = stringifyAndBlankNull;\r\n/**\r\n * Patch a stringified JSON object.\r\n *\r\n * Returns the stringified value of the patched JSON object, as well as\r\n * position ranges indicating which parts of the string that was added or\r\n * removed.\r\n *\r\n * Internally, this builds the ranges based on the actual supplied diff, which\r\n * can therefore differ from a straigh string-based diff of stringified JSON\r\n * objects.\r\n */\r\nfunction patchStringified(base, diff, level) {\r\n    if (level === undefined) {\r\n        level = 0;\r\n    }\r\n    if (typeof base === 'string') {\r\n        // Only stringify if level > 0\r\n        let stringifyPatch = level > 0;\r\n        return patchString(base, diff, level, stringifyPatch);\r\n    }\r\n    else if (Array.isArray(base)) {\r\n        return patchStringifiedList(base, diff, level);\r\n    }\r\n    else if (typeof base === 'number' || typeof base === 'boolean') {\r\n        throw new TypeError('Cannot patch an atomic type: ' + typeof base);\r\n    }\r\n    else if (base === null) {\r\n        throw new TypeError('Cannot patch a null base!');\r\n    }\r\n    else {\r\n        return patchStringifiedObject(base, diff, level);\r\n    }\r\n}\r\nexports.patchStringified = patchStringified;\r\n/**\r\n * Patch a string according to a line based diff\r\n */\r\nfunction patchString(base, diff, level, stringifyPatch) {\r\n    let additions = [];\r\n    let deletions = [];\r\n    let baseIndex = 0;\r\n    // Short-circuit if diff is empty\r\n    if (diff === null) {\r\n        return { remote: stringifyPatch ? stringify(base, level) : base,\r\n            additions: additions,\r\n            deletions: deletions };\r\n    }\r\n    // Diffs are line-based, so flatten to character based:\r\n    diff = util_2.flattenStringDiff(base, diff);\r\n    // Index into obj, the next item to take unless diff says otherwise\r\n    let take = 0;\r\n    let skip = 0;\r\n    let remote = '';\r\n    for (let e of diff) {\r\n        let index = e.key;\r\n        // Take values from obj not mentioned in diff, up to not including index\r\n        let unchanged = base.slice(take, index);\r\n        remote += unchanged;\r\n        baseIndex += unchanged.length;\r\n        if (e.op === 'addrange') {\r\n            let added = e.valuelist;\r\n            additions.push(new range_1.DiffRangeRaw(remote.length, added.length, e.source));\r\n            remote += added;\r\n            skip = 0;\r\n        }\r\n        else if (e.op === 'removerange') {\r\n            // Delete a number of values by skipping\r\n            skip = e.length;\r\n            deletions.push(new range_1.DiffRangeRaw(baseIndex, skip, e.source));\r\n            baseIndex += skip;\r\n        }\r\n        take = Math.max(take, index + skip);\r\n    }\r\n    remote += base.slice(take, base.length);\r\n    if (stringifyPatch) {\r\n        // The remote string should be stringified\r\n        remote = stringify(remote, level);\r\n        // Shift all indices by indentation + one to account for opening quote\r\n        _offsetRanges(level * util_2.JSON_INDENT.length + 1, additions, deletions);\r\n        // Offset ranges by JSON escaping\r\n        _adjustRangesByJSONEscapes(remote, additions);\r\n        _adjustRangesByJSONEscapes(stringify(base, level), deletions);\r\n    }\r\n    return { remote: remote, additions: additions, deletions: deletions };\r\n}\r\nexports.patchString = patchString;\r\n/**\r\n * Patch a stringified object according to the object diff\r\n */\r\nfunction patchStringifiedObject(base, diff, level) {\r\n    let remote = '';\r\n    let additions = [];\r\n    let deletions = [];\r\n    let postfix = ',\\n';\r\n    let baseIndex = 0;\r\n    // Short-circuit if diff is empty\r\n    if (diff === null) {\r\n        return { remote: stringify(base, level),\r\n            additions: additions,\r\n            deletions: deletions };\r\n    }\r\n    // Object is dict. As diff keys should be unique, create map for easy processing\r\n    let helper = new common_1.PatchObjectHelper(base, diff);\r\n    let baseKeys = helper.baseKeys.slice();\r\n    algorithm_1.each(helper.keys(), key => {\r\n        let keyString = _makeKeyString(key, level + 1);\r\n        if (helper.isDiffKey(key)) {\r\n            // Entry has a change\r\n            let e = helper.getDiffEntry(key);\r\n            // Check for valid entry first:\r\n            diffentries_1.validateObjectOp(base, e, baseKeys);\r\n            if (util_1.valueIn(e.op, ['add', 'replace', 'remove'])) {\r\n                // Replace is simply an add + remove, but without modifying keystring\r\n                let isReplace = e.op === 'replace';\r\n                if (e.op === 'add' || e.op === 'replace') {\r\n                    let valr = stringify(e.value, level + 1, false) +\r\n                        postfix;\r\n                    let start = remote.length;\r\n                    let length = valr.length;\r\n                    // Modify range depending on add or replace:\r\n                    if (isReplace) {\r\n                        start += keyString.length;\r\n                    }\r\n                    else {\r\n                        length += keyString.length;\r\n                    }\r\n                    // Check if postfix should be included or not\r\n                    if (isReplace || !helper.entriesAfterCurrentAddRem()) {\r\n                        length -= postfix.length;\r\n                        if (e.op === 'add') {\r\n                            length += 1; // Newline will still be added\r\n                        }\r\n                    }\r\n                    additions.push(new range_1.DiffRangeRaw(start, length, e.source));\r\n                    remote += keyString + valr;\r\n                }\r\n                if (e.op === 'remove' || e.op === 'replace') {\r\n                    let valb = stringify(base[key], level + 1, false) + postfix;\r\n                    let start = baseIndex;\r\n                    let length = valb.length;\r\n                    // Modify range depending on remove or replace:\r\n                    if (isReplace) {\r\n                        start += keyString.length;\r\n                    }\r\n                    else {\r\n                        length += keyString.length;\r\n                    }\r\n                    // Check if postfix should be included or not\r\n                    if (isReplace || !helper.entriesAfterCurrentAddRem()) {\r\n                        length -= postfix.length;\r\n                        if (e.op === 'remove') {\r\n                            length += 1; // Newline will still be removed\r\n                        }\r\n                    }\r\n                    deletions.push(new range_1.DiffRangeRaw(start, length, e.source));\r\n                    baseIndex += keyString.length + valb.length;\r\n                    baseKeys.splice(baseKeys.indexOf(key), 1);\r\n                }\r\n            }\r\n            else if (e.op === 'patch') {\r\n                let pd = patchStringified(base[key], e.diff, level + 1);\r\n                let valr = pd.remote;\r\n                // Insert key string:\r\n                valr = keyString + valr.slice((level + 1) * util_2.JSON_INDENT.length) +\r\n                    postfix;\r\n                let offset = remote.length + keyString.length -\r\n                    (level + 1) * util_2.JSON_INDENT.length;\r\n                _offsetRanges(offset, pd.additions, pd.deletions);\r\n                remote += valr;\r\n                additions = additions.concat(pd.additions);\r\n                deletions = deletions.concat(pd.deletions);\r\n                baseIndex += stringify(base[key], level + 1, false).length +\r\n                    keyString.length + postfix.length;\r\n                baseKeys.splice(baseKeys.indexOf(key), 1);\r\n            }\r\n        }\r\n        else {\r\n            // Entry unchanged\r\n            let val = keyString + stringify(base[key], level + 1, false) + postfix;\r\n            remote += val;\r\n            baseIndex += val.length;\r\n        }\r\n    });\r\n    // Stringify correctly\r\n    if (remote.slice(remote.length - postfix.length) === postfix) {\r\n        remote = remote.slice(0, remote.length - postfix.length);\r\n    }\r\n    let indent = util_1.repeatString(util_2.JSON_INDENT, level);\r\n    remote = indent + '{\\n' + remote + '\\n' + indent + '}';\r\n    _offsetRanges(indent.length + 2, additions, deletions);\r\n    return { remote: remote, additions: additions, deletions: deletions };\r\n}\r\n/**\r\n * Patch a stringified list according to the list diff\r\n */\r\nfunction patchStringifiedList(base, diff, level) {\r\n    let remote = '';\r\n    let additions = [];\r\n    let deletions = [];\r\n    let baseIndex = 0; // Position in base string\r\n    let postfix = ',\\n';\r\n    // Short-circuit if diff is empty\r\n    if (diff === null) {\r\n        return { remote: stringify(base, level),\r\n            additions: additions,\r\n            deletions: deletions };\r\n    }\r\n    // Index into obj, the next item to take unless diff says otherwise\r\n    let take = 0;\r\n    let skip = 0;\r\n    for (let e of diff) {\r\n        // Check for valid entry first:\r\n        diffentries_1.validateSequenceOp(base, e);\r\n        let index = e.key;\r\n        // Take values from obj not mentioned in diff, up to not including index\r\n        for (; index > take; take++) {\r\n            let unchanged = stringify(base[take], level + 1) + postfix;\r\n            remote += unchanged;\r\n            baseIndex += unchanged.length;\r\n        }\r\n        if (e.op === 'addrange') {\r\n            // Extend with new values directly\r\n            let val = '';\r\n            for (let v of e.valuelist) {\r\n                val += stringify(v, level + 1) + postfix;\r\n            }\r\n            let difflen = val.length;\r\n            if (index === base.length) {\r\n                difflen -= 1; // No comma if at end\r\n            }\r\n            additions.push(new range_1.DiffRangeRaw(remote.length, difflen, e.source));\r\n            remote += val;\r\n            skip = 0;\r\n        }\r\n        else if (e.op === 'removerange') {\r\n            // Delete a number of values by skipping\r\n            let val = '';\r\n            let len = e.length;\r\n            for (let i = index; i < index + len; i++) {\r\n                val += stringify(base[i], level + 1) + postfix;\r\n            }\r\n            let difflen = val.length;\r\n            if (len + index === base.length) {\r\n                difflen -= 1; // No comma if at end\r\n            }\r\n            deletions.push(new range_1.DiffRangeRaw(baseIndex, difflen, e.source));\r\n            baseIndex += val.length;\r\n            skip = e.length;\r\n        }\r\n        else if (e.op === 'patch') {\r\n            let pd = patchStringified(base[index], e.diff, level + 1);\r\n            skip = 1;\r\n            let val = pd.remote + postfix;\r\n            _offsetRanges(remote.length, pd.additions, pd.deletions);\r\n            additions = additions.concat(pd.additions);\r\n            deletions = deletions.concat(pd.deletions);\r\n            baseIndex += stringify(base[index], level + 1).length;\r\n            remote += val;\r\n        }\r\n        // Skip the specified number of elements, but never decrement take.\r\n        // Note that take can pass index in diffs with repeated +/- on the\r\n        // same index, i.e. [op_remove(index), op_add(index, value)]\r\n        take = Math.max(take, index + skip);\r\n    }\r\n    // Take unchanged values at end\r\n    for (; base.length > take; take++) {\r\n        remote += stringify(base[take], level + 1) + postfix;\r\n    }\r\n    // Stringify correctly\r\n    if (remote.slice(remote.length - postfix.length) === postfix) {\r\n        remote = remote.slice(0, remote.length - postfix.length);\r\n    }\r\n    let indent = util_1.repeatString(util_2.JSON_INDENT, level);\r\n    remote = indent + '[\\n' + remote + '\\n' + indent + ']';\r\n    _offsetRanges(indent.length + 2, additions, deletions);\r\n    return { remote: remote, additions: additions, deletions: deletions };\r\n}\r\n// Utility functions and variables:\r\n/**\r\n * Indent a (multiline) string with `JSON_INDENT` given number of times.\r\n *\r\n * indentFirst controls whether the first line is indented as well.\r\n */\r\nfunction _indent(str, levels, indentFirst) {\r\n    indentFirst = indentFirst !== false;\r\n    let lines = str.split('\\n');\r\n    let ret = new Array(lines.length);\r\n    if (!indentFirst) {\r\n        ret[0] = lines[0];\r\n    }\r\n    for (let i = indentFirst ? 0 : 1; i < lines.length; i++) {\r\n        ret[i] = util_1.repeatString(util_2.JSON_INDENT, levels) + lines[i];\r\n    }\r\n    return ret.join('\\n');\r\n}\r\n/** Make a string for a stringified dict key, with indentation */\r\nfunction _makeKeyString(key, level) {\r\n    return util_1.repeatString(util_2.JSON_INDENT, level) + '\"' + key + '\": ';\r\n}\r\n/** Shift all positions in given ranges by same amount */\r\nfunction _offsetRanges(offset, additions, deletions) {\r\n    for (let a of additions) {\r\n        a.offset(offset);\r\n    }\r\n    for (let d of deletions) {\r\n        d.offset(offset);\r\n    }\r\n}\r\n/**\r\n * Adjust diff ranges to compensate for increased length occupied by characters\r\n * escaped during JSON stringification.\r\n */\r\nfunction _adjustRangesByJSONEscapes(jsonString, ranges) {\r\n    // First find all escaped characters, and expansion coefficients\r\n    let simpleEscapes = [\r\n        '\\\\\\\"', '\\\\\\\\', '\\\\/', '\\\\b', '\\\\f', '\\\\n', '\\\\r', '\\\\t'\r\n    ];\r\n    let surrogateUnicodes = /\\\\uD[89A-Fa-f][0-9a-fA-F]{2}\\\\uD[c-fC-F][0-9a-fA-F]{2}/g;\r\n    // Look for unicodes that are not part of a surrogate:\r\n    let unicodes = /(?!\\\\uD[c-fC-F][0-9a-fA-F]{2})\\\\u(?!D[89A-Fa-f][0-9a-fA-F]{2})\\d{4}/g;\r\n    const SIMPLE_ESCAPE_LENGTH = 2;\r\n    const UNICODE_ESCAPE_LENGTH = 6;\r\n    const SURROGATE_ESCAPE_LENGTH = 12;\r\n    // Equal sized arrays identifying location and expansion\r\n    // factor of each escaped character:\r\n    let indices = [];\r\n    let expansions = [];\r\n    for (let e of simpleEscapes) {\r\n        let len = JSON.parse('\"' + e + '\"').length;\r\n        let i = 0;\r\n        while (1) {\r\n            i = jsonString.indexOf(e, i);\r\n            if (i < 0) {\r\n                break;\r\n            }\r\n            indices.push(i);\r\n            expansions.push(SIMPLE_ESCAPE_LENGTH - len);\r\n            i++;\r\n        }\r\n    }\r\n    let match;\r\n    while ((match = unicodes.exec(jsonString)) !== null) {\r\n        indices.push(match.index);\r\n        expansions.push(UNICODE_ESCAPE_LENGTH -\r\n            JSON.parse('\"' + match[0] + '\"').length);\r\n    }\r\n    while ((match = surrogateUnicodes.exec(jsonString)) !== null) {\r\n        indices.push(match.index);\r\n        expansions.push(SURROGATE_ESCAPE_LENGTH -\r\n            JSON.parse('\"' + match[0] + '\"').length);\r\n    }\r\n    // Now adjust differences\r\n    // TODO: Optimize this algorithm?\r\n    for (let i = 0; i < indices.length; i++) {\r\n        for (let r of ranges) {\r\n            let idx = indices[i];\r\n            let exp = expansions[i];\r\n            if (r.from > idx) {\r\n                r.from += exp;\r\n            }\r\n            if (r.to > idx) {\r\n                r.to += exp;\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=stringified.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FlexLayout = void 0;\r\n/*-----------------------------------------------------------------------------\r\n| Copyright (c) 2014-2016, PhosphorJS Contributors\r\n|\r\n| Distributed under the terms of the BSD 3-Clause License.\r\n|\r\n| The full license is in the file LICENSE, distributed with this software.\r\n|----------------------------------------------------------------------------*/\r\nconst algorithm_1 = require(\"@lumino/algorithm\");\r\nconst messaging_1 = require(\"@lumino/messaging\");\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\n/**\r\n * The class name added to left-to-right flex layout parents.\r\n */\r\nconst LEFT_TO_RIGHT_CLASS = 'p-mod-left-to-right';\r\n/**\r\n * The class name added to right-to-left flex layout parents.\r\n */\r\nconst RIGHT_TO_LEFT_CLASS = 'p-mod-right-to-left';\r\n/**\r\n * The class name added to top-to-bottom flex layout parents.\r\n */\r\nconst TOP_TO_BOTTOM_CLASS = 'p-mod-top-to-bottom';\r\n/**\r\n * The class name added to bottom-to-top flex layout parents.\r\n */\r\nconst BOTTOM_TO_TOP_CLASS = 'p-mod-bottom-to-top';\r\n/**\r\n * A layout which arranges its widgets in a single row or column.\r\n *\r\n * Use the direction attribute to specify the layout direction.\r\n *\r\n * The sizing and flow of the children can be specified in several ways:\r\n *  - The container level properties `minimumSpacing`,`wrap`,\r\n *    `justifyContent`, `alignItems` and `alignContent`.\r\n *  - The stretching of the children in the layout direction either by:\r\n *    - Setting individual values per widget of grow/shrink/basis by\r\n *      `setGrow`, `setShrink` and `setSizeBasis`.\r\n *    - Using the convenience attributes `evenSizes` or `stretchType`.\r\n *  - Manually by CSS using the flexbox CSS attribute for the classes\r\n *    `p-FlexPanel` and `p-FlexPanel-child`.\r\n */\r\nclass FlexLayout extends widgets_1.PanelLayout {\r\n    /**\r\n     * Construct a new flex layout.\r\n     *\r\n     * @param options - The options for initializing the layout.\r\n     */\r\n    constructor(options = {}) {\r\n        super();\r\n        /**\r\n         * Manage the display order of the widgets via the flexbox\r\n         * attribute `order`, while keeping the internal DOM order\r\n         * intact.\r\n         */\r\n        this.order = null;\r\n        this._wrap = false;\r\n        this._minimumSpacing = 4;\r\n        this._justifyContent = null;\r\n        this._alignItems = null;\r\n        this._alignContent = null;\r\n        this._dirty = false;\r\n        this._direction = 'top-to-bottom';\r\n        this._stretchType = null;\r\n        this._evenSizes = false;\r\n        if (options.direction !== void 0) {\r\n            this._direction = options.direction;\r\n        }\r\n        if (options.minimumSpacing !== void 0) {\r\n            this._minimumSpacing = Private.clampSpacing(options.minimumSpacing);\r\n        }\r\n        if (options.wrap !== void 0) {\r\n            this._wrap = options.wrap;\r\n        }\r\n        if (options.justifyContent !== void 0) {\r\n            this._justifyContent = options.justifyContent;\r\n        }\r\n        if (options.alignItems !== void 0) {\r\n            this._alignItems = options.alignItems;\r\n        }\r\n        if (options.alignContent !== void 0) {\r\n            this._alignContent = options.alignContent;\r\n        }\r\n        if (options.stretchType !== void 0) {\r\n            this._stretchType = options.stretchType;\r\n        }\r\n        if (options.evenSizes !== void 0) {\r\n            this._evenSizes = options.evenSizes;\r\n        }\r\n    }\r\n    /**\r\n     * Get the layout direction for the flex layout.\r\n     */\r\n    get direction() {\r\n        return this._direction;\r\n    }\r\n    /**\r\n     * Set the layout direction for the flex layout.\r\n     */\r\n    set direction(value) {\r\n        if (this._direction === value) {\r\n            return;\r\n        }\r\n        this._direction = value;\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        Private.toggleDirection(this.parent, value);\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * Get the minimum inter-element spacing for the flex layout.\r\n     */\r\n    get minimumSpacing() {\r\n        return this._minimumSpacing;\r\n    }\r\n    /**\r\n     * Set the minimum inter-element spacing for the flex layout.\r\n     */\r\n    set minimumSpacing(value) {\r\n        value = Private.clampSpacing(value);\r\n        if (this._minimumSpacing === value) {\r\n            return;\r\n        }\r\n        this._minimumSpacing = value;\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.node.style.flexWrap = value ? 'wrap' : 'nowrap';\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * Whether the layout should wrap its children if they do not all fit in\r\n     * column/row.\r\n     */\r\n    get wrap() {\r\n        return this._wrap;\r\n    }\r\n    set wrap(value) {\r\n        if (this._wrap === value) {\r\n            return;\r\n        }\r\n        this._wrap = value;\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.node.style.flexWrap = value ? 'wrap' : 'nowrap';\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * Controls how to align children in the direction of the layout.\r\n     */\r\n    get justifyContent() {\r\n        return this._justifyContent;\r\n    }\r\n    set justifyContent(value) {\r\n        if (this._justifyContent === value) {\r\n            return;\r\n        }\r\n        this._justifyContent = value;\r\n        let flex = Private.translateFlexString(value);\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.node.style.justifyContent = flex;\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * Controls how to align children in the direction perpendicular to that\r\n     * of the layout (for a horizontal layout the will be the vertical align,\r\n     * and vice-versa).\r\n     */\r\n    get alignItems() {\r\n        return this._alignItems;\r\n    }\r\n    set alignItems(value) {\r\n        if (this._alignItems === value) {\r\n            return;\r\n        }\r\n        this._alignItems = value;\r\n        let flex = Private.translateFlexString(value);\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.node.style.alignItems = flex;\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * If layout is set to wrap, this defines how the wrapped lines will be\r\n     * aligned in relation ro each other.\r\n     */\r\n    get alignContent() {\r\n        return this._alignContent;\r\n    }\r\n    set alignContent(value) {\r\n        if (this._alignContent === value) {\r\n            return;\r\n        }\r\n        this._alignContent = value;\r\n        let flex = Private.translateFlexString(value);\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.node.style.alignContent = flex;\r\n        // Setting has no effect unless wrap is true, but\r\n        // check against false to accomodate unset scenario\r\n        // where CSS rules might apply:\r\n        if (this._wrap !== false) {\r\n            this.parent.fit();\r\n        }\r\n    }\r\n    /**\r\n     * Describe how to stretch items to fit into flex panel.\r\n     */\r\n    get stretchType() {\r\n        return this._stretchType;\r\n    }\r\n    set stretchType(value) {\r\n        if (this._stretchType === value) {\r\n            return;\r\n        }\r\n        this._stretchType = value;\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * If set, the free space is distributed such that the\r\n     * children are all the same size. Defaults to `false`.\r\n     *\r\n     * ### Notes\r\n     * Setting this to `true` will make the layout\r\n     * ignore the setting of `stretchType`.\r\n     */\r\n    get evenSizes() {\r\n        return this._evenSizes;\r\n    }\r\n    set evenSizes(value) {\r\n        if (this._evenSizes === value) {\r\n            return;\r\n        }\r\n        this._evenSizes = value;\r\n        if (!this.parent) {\r\n            return;\r\n        }\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * Determine whether direction is a horizontal one\r\n     */\r\n    isHorizontal() {\r\n        return this.direction === 'right-to-left' || this.direction === 'left-to-right';\r\n    }\r\n    /**\r\n     * Determine whether direction is a vertical one\r\n     */\r\n    isVertical() {\r\n        return !this.isHorizontal();\r\n    }\r\n    /**\r\n     * Perform layout initialization which requires the parent widget.\r\n     */\r\n    init() {\r\n        Private.toggleDirection(this.parent, this.direction);\r\n        super.init();\r\n    }\r\n    /**\r\n     * Attach a widget to the parent's DOM node.\r\n     *\r\n     * @param index - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to attach to the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    attachWidget(index, widget) {\r\n        // Call super implmentation\r\n        super.attachWidget(index, widget);\r\n        // Set order, if applicable\r\n        if (this.order) {\r\n            algorithm_1.ArrayExt.insert(this.order, index, widget);\r\n        }\r\n        // Post a layout request for the parent widget.\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * Change a widget's display order.\r\n     *\r\n     * @param fromIndex - The previous index of the widget in the layout.\r\n     *\r\n     * @param toIndex - The current index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to move in the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    moveWidget(fromIndex, toIndex, widget) {\r\n        if (fromIndex !== toIndex) {\r\n            // Change the order of the widget.\r\n            if (!this.order) {\r\n                this.order = this.widgets.slice();\r\n            }\r\n            algorithm_1.ArrayExt.move(this.order, fromIndex, toIndex);\r\n            this._dirty = true;\r\n        }\r\n        // Post an update request for the parent widget.\r\n        this.parent.update();\r\n    }\r\n    /**\r\n     * Detach a widget from the parent's DOM node.\r\n     *\r\n     * @param index - The previous index of the widget in the layout.\r\n     *\r\n     * @param widget - The widget to detach from the parent.\r\n     *\r\n     * #### Notes\r\n     * This is a reimplementation of the superclass method.\r\n     */\r\n    detachWidget(index, widget) {\r\n        // Remove widget from order vector\r\n        if (this.order) {\r\n            let i = 0;\r\n            for (; i < this.order.length; ++i) {\r\n                if (widget === this.order[i]) {\r\n                    algorithm_1.ArrayExt.removeAt(this.order, i);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // Call super implmentation\r\n        super.detachWidget(index, widget);\r\n        // Post a layout request for the parent widget.\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * A message handler invoked on an `'after-show'` message.\r\n     */\r\n    onAfterShow(msg) {\r\n        super.onAfterShow(msg);\r\n        this.parent.update();\r\n    }\r\n    /**\r\n     * A message handler invoked on an `'after-attach'` message.\r\n     */\r\n    onAfterAttach(msg) {\r\n        super.onAfterAttach(msg);\r\n        Private.toggleDirection(this.parent, this._direction);\r\n        let style = this.parent.node.style;\r\n        style.flexWrap = this._wrap ? 'wrap' : 'nowrap';\r\n        style.justifyContent = Private.translateFlexString(this._justifyContent) || '';\r\n        style.alignContent = Private.translateFlexString(this._alignContent) || '';\r\n        style.alignItems = Private.translateFlexString(this._alignItems) || '';\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * A message handler invoked on a `'child-shown'` message.\r\n     */\r\n    onChildShown(msg) {\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * A message handler invoked on a `'child-hidden'` message.\r\n     */\r\n    onChildHidden(msg) {\r\n        this.parent.fit();\r\n    }\r\n    /**\r\n     * A message handler invoked on a `'resize'` message.\r\n     */\r\n    onResize(msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update();\r\n        }\r\n    }\r\n    /**\r\n     * A message handler invoked on an `'update-request'` message.\r\n     */\r\n    onUpdateRequest(msg) {\r\n        if (this.parent.isVisible) {\r\n            this._update();\r\n        }\r\n    }\r\n    /**\r\n     * A message handler invoked on a `'fit-request'` message.\r\n     */\r\n    onFitRequest(msg) {\r\n        if (this.parent.isAttached) {\r\n            this._fit();\r\n        }\r\n    }\r\n    /**\r\n     * Fit the layout to the total size required by the widgets.\r\n     */\r\n    _fit() {\r\n        // Set the dirty flag to ensure only a single update occurs.\r\n        this._dirty = true;\r\n        // Notify the ancestor that it should fit immediately. This may\r\n        // cause a resize of the parent, fulfilling the required update.\r\n        let ancestor = this.parent.parent;\r\n        if (ancestor) {\r\n            messaging_1.MessageLoop.sendMessage(ancestor, widgets_1.Widget.Msg.FitRequest);\r\n        }\r\n        // If the dirty flag is still set, the parent was not resized.\r\n        // Trigger the required update on the parent widget immediately.\r\n        if (this._dirty) {\r\n            messaging_1.MessageLoop.sendMessage(this.parent, widgets_1.Widget.Msg.UpdateRequest);\r\n        }\r\n    }\r\n    /**\r\n     * Update the layout position and size of the widgets.\r\n     *\r\n     * The parent offset dimensions should be `-1` if unknown.\r\n     */\r\n    _update() {\r\n        // Clear the dirty flag to indicate the update occurred.\r\n        this._dirty = false;\r\n        // Bail early if there are no widgets to layout.\r\n        let widgets = this.order || this.widgets;\r\n        if (widgets.length === 0) {\r\n            return;\r\n        }\r\n        // Set spacing by margins\r\n        let spacing = this.minimumSpacing.toString() + 'px';\r\n        if (this.isHorizontal()) {\r\n            for (let i = 0; i < widgets.length - 1; ++i) {\r\n                widgets[i].node.style.marginRight = spacing;\r\n            }\r\n        }\r\n        else {\r\n            for (let i = 0; i < widgets.length - 1; ++i) {\r\n                widgets[i].node.style.marginBottom = spacing;\r\n            }\r\n        }\r\n        // Update stretch styles if set\r\n        if (this._evenSizes || this.stretchType) {\r\n            let basis = null;\r\n            let grow = null;\r\n            let shrink = null;\r\n            if (this._evenSizes) {\r\n                basis = 0;\r\n                grow = 1;\r\n            }\r\n            else {\r\n                switch (this._stretchType) {\r\n                    case 'grow':\r\n                        // Allow items to grow from default size\r\n                        grow = 1;\r\n                        shrink = 0;\r\n                        break;\r\n                    case 'shrink':\r\n                        // Allow items to shrink from default size\r\n                        grow = 0;\r\n                        shrink = 1;\r\n                        break;\r\n                    case 'both':\r\n                        // Both growing and shrinking is allowed.\r\n                        grow = 1;\r\n                        shrink = 1;\r\n                        break;\r\n                    case 'fixed':\r\n                        // Disallow both growing and shrinking.\r\n                        grow = 0;\r\n                        shrink = 0;\r\n                        break;\r\n                    default:\r\n                        throw new TypeError('Invalid stretch type: ' + this._stretchType);\r\n                }\r\n            }\r\n            for (let i = 0; i < widgets.length; ++i) {\r\n                let style = widgets[i].node.style;\r\n                if (basis !== null) {\r\n                    // Can only be 0, so no unit needed\r\n                    style.flexBasis = basis.toString();\r\n                }\r\n                if (grow !== null) {\r\n                    style.flexGrow = grow.toString();\r\n                }\r\n                if (shrink !== null) {\r\n                    style.flexShrink = shrink.toString();\r\n                }\r\n            }\r\n        }\r\n        // Update display order\r\n        for (let i = 0; i < widgets.length; ++i) {\r\n            let widget = widgets[i];\r\n            widget.node.style.order = this.order ? i.toString() : '';\r\n        }\r\n    }\r\n}\r\nexports.FlexLayout = FlexLayout;\r\n/**\r\n * The namespace for the `FlexLayout` class statics.\r\n */\r\n(function (FlexLayout) {\r\n    /**\r\n     * Get the flex-grow number of the widget\r\n     */\r\n    function getGrow(widget) {\r\n        let value = widget.node.style.flexGrow;\r\n        return value ? parseInt(value, 10) : null;\r\n    }\r\n    FlexLayout.getGrow = getGrow;\r\n    /**\r\n     * Set the flex-grow number of the widget\r\n     */\r\n    function setGrow(widget, value, fit = true) {\r\n        widget.node.style.flexGrow = value === null ? '' : value.toString();\r\n        if (fit && widget.parent) {\r\n            widget.parent.fit();\r\n        }\r\n    }\r\n    FlexLayout.setGrow = setGrow;\r\n    /**\r\n     * Get the flex-shrink number of the widget\r\n     */\r\n    function getShrink(widget) {\r\n        let value = widget.node.style.flexShrink;\r\n        return value ? parseInt(value, 10) : null;\r\n    }\r\n    FlexLayout.getShrink = getShrink;\r\n    /**\r\n     * Set the flex-shrink number of the widget\r\n     */\r\n    function setShrink(widget, value, fit = true) {\r\n        widget.node.style.flexShrink = value === null ? '' : value.toString();\r\n        if (fit && widget.parent) {\r\n            widget.parent.fit();\r\n        }\r\n    }\r\n    FlexLayout.setShrink = setShrink;\r\n    /**\r\n     * Get the size basis of the widget.\r\n     */\r\n    function getSizeBasis(widget) {\r\n        let value = widget.node.style.flexBasis;\r\n        if (value === 'auto') {\r\n            return 'auto';\r\n        }\r\n        else {\r\n            return value ? parseInt(value.replace('px', ''), 10) : null;\r\n        }\r\n    }\r\n    FlexLayout.getSizeBasis = getSizeBasis;\r\n    /**\r\n     * Set the size basis of the widget.\r\n     *\r\n     * This is the value used for calculating how to distribute positive\r\n     * (grow) or negatie (shrink) free space in a flex box. The value\r\n     * `'auto'` uses the `width`/`height` field of the box as the basis.\r\n     */\r\n    function setSizeBasis(widget, value, fit = true) {\r\n        if (value === 'auto') {\r\n            widget.node.style.flexBasis = value;\r\n        }\r\n        else if (value === null) {\r\n            widget.node.style.flexBasis = '';\r\n        }\r\n        else {\r\n            widget.node.style.flexBasis = value.toString() + 'px';\r\n        }\r\n        if (fit && widget.parent) {\r\n            widget.parent.fit();\r\n        }\r\n    }\r\n    FlexLayout.setSizeBasis = setSizeBasis;\r\n})(FlexLayout = exports.FlexLayout || (exports.FlexLayout = {}));\r\n/**\r\n * The namespace for the private module data.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Test whether a direction has horizontal orientation.\r\n     */\r\n    function isHorizontal(dir) {\r\n        return dir === 'left-to-right' || dir === 'right-to-left';\r\n    }\r\n    Private.isHorizontal = isHorizontal;\r\n    function translateFlexString(value) {\r\n        if (value === 'start' || value === 'end') {\r\n            value = 'flex-' + value;\r\n        }\r\n        return value;\r\n    }\r\n    Private.translateFlexString = translateFlexString;\r\n    /**\r\n     * Toggle the CSS direction class for the given widget.\r\n     */\r\n    function toggleDirection(widget, dir) {\r\n        widget.toggleClass(LEFT_TO_RIGHT_CLASS, dir === 'left-to-right');\r\n        widget.toggleClass(RIGHT_TO_LEFT_CLASS, dir === 'right-to-left');\r\n        widget.toggleClass(TOP_TO_BOTTOM_CLASS, dir === 'top-to-bottom');\r\n        widget.toggleClass(BOTTOM_TO_TOP_CLASS, dir === 'bottom-to-top');\r\n    }\r\n    Private.toggleDirection = toggleDirection;\r\n    /**\r\n     * Clamp a spacing value to an integer >= 0.\r\n     */\r\n    function clampSpacing(value) {\r\n        return Math.max(0, Math.floor(value));\r\n    }\r\n    Private.clampSpacing = clampSpacing;\r\n})(Private || (Private = {}));\r\n//# sourceMappingURL=flexlayout.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FlexPanel = void 0;\r\nconst flexlayout_1 = require(\"./flexlayout\");\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\n/**\r\n * The class name added to FlexPanel instances.\r\n */\r\nconst FLEX_PANEL_CLASS = 'p-FlexPanel';\r\n/**\r\n * The class name added to a FlexPanel child.\r\n */\r\nconst CHILD_CLASS = 'p-FlexPanel-child';\r\n/**\r\n * A panel which arranges its widgets in a single row or column.\r\n *\r\n * Use the direction attribute to specify the layout direction.\r\n *\r\n * The sizing and flow of the children can be specified in several ways:\r\n *  - The container level properties `minimumSpacing`,`wrap`,\r\n *    `justifyContent`, `alignItems` and `alignContent`.\r\n *  - The stretching of the children in the layout direction either by:\r\n *    - Setting individual values per widget of grow/shrink/basis by\r\n *      `setGrow`, `setShrink` and `setSizeBasis`.\r\n *    - Using the convenience attributes `evenSizes` or `stretchType`.\r\n *  - Manually by CSS using the flexbox CSS attribute for the classes\r\n *    `p-FlexPanel` and `p-FlexPanel-child`.\r\n *\r\n * #### Notes\r\n * This class provides a convenience wrapper around a [[FlexLayout]].\r\n */\r\nclass FlexPanel extends widgets_1.Panel {\r\n    /**\r\n     * Construct a new flex panel.\r\n     *\r\n     * @param options - The options for initializing the flex panel.\r\n     */\r\n    constructor(options = {}) {\r\n        super({ layout: Private.createLayout(options) });\r\n        if (!options.layout) {\r\n            if (options.minimumSpacing !== void 0) {\r\n                this.minimumSpacing = options.minimumSpacing;\r\n            }\r\n            if (options.direction !== void 0) {\r\n                this.direction = options.direction;\r\n            }\r\n        }\r\n        this.addClass(FLEX_PANEL_CLASS);\r\n    }\r\n    /**\r\n     * The layout direction for the flex panel.\r\n     */\r\n    get direction() {\r\n        return this.layout.direction;\r\n    }\r\n    ;\r\n    set direction(value) {\r\n        this.layout.direction = value;\r\n    }\r\n    /**\r\n     * The minimum inter-element spacing for the flex panel.\r\n     */\r\n    get minimumSpacing() {\r\n        return this.layout.minimumSpacing;\r\n    }\r\n    ;\r\n    set minimumSpacing(value) {\r\n        this.layout.minimumSpacing = value;\r\n    }\r\n    /**\r\n     * Whether the layout should wrap its children if they do not all fit in\r\n     * column/row.\r\n     */\r\n    get wrap() {\r\n        return this.layout.wrap;\r\n    }\r\n    ;\r\n    set wrap(value) {\r\n        this.layout.wrap = value;\r\n    }\r\n    /**\r\n     * Controls how to align children in the direction of the layout.\r\n     */\r\n    get justifyContent() {\r\n        return this.layout.justifyContent;\r\n    }\r\n    ;\r\n    set justifyContent(value) {\r\n        this.layout.justifyContent = value;\r\n    }\r\n    /**\r\n     * Controls how to align children in the direction perpendicular to that\r\n     * of the layout (for a horizontal layout the will be the vertical align,\r\n     * and vice-versa).\r\n     */\r\n    get alignItems() {\r\n        return this.layout.alignItems;\r\n    }\r\n    ;\r\n    set alignItems(value) {\r\n        this.layout.alignItems = value;\r\n    }\r\n    /**\r\n     * If layout is set to wrap, this defines how the wrapped lines will be\r\n     * aligned in relation ro each other.\r\n     */\r\n    get alignContent() {\r\n        return this.layout.alignContent;\r\n    }\r\n    ;\r\n    set alignContent(value) {\r\n        this.layout.alignContent = value;\r\n    }\r\n    /**\r\n     * Describe how to stretch items to fit into flex panel.\r\n     */\r\n    get stretchType() {\r\n        return this.layout.stretchType;\r\n    }\r\n    ;\r\n    set stretchType(value) {\r\n        this.layout.stretchType = value;\r\n    }\r\n    /**\r\n     * If set, the free space is distributed such that the\r\n     * children are all the same size. Defaults to `false`.\r\n     *\r\n     * ### Notes\r\n     * Setting this to `true` will make the layout\r\n     * ignore the setting of `stretchType`.\r\n     */\r\n    get evenSizes() {\r\n        return this.layout.evenSizes;\r\n    }\r\n    ;\r\n    set evenSizes(value) {\r\n        this.layout.evenSizes = value;\r\n    }\r\n    ;\r\n    /**\r\n     * A message handler invoked on a `'child-added'` message.\r\n     */\r\n    onChildAdded(msg) {\r\n        msg.child.addClass(CHILD_CLASS);\r\n    }\r\n    /**\r\n     * A message handler invoked on a `'child-removed'` message.\r\n     */\r\n    onChildRemoved(msg) {\r\n        msg.child.removeClass(CHILD_CLASS);\r\n    }\r\n    /**\r\n     * A message handler invoked on an `'after-attach'` message.\r\n     */\r\n    onAfterAttach(msg) {\r\n        super.onAfterAttach(msg);\r\n        this.fit();\r\n    }\r\n}\r\nexports.FlexPanel = FlexPanel;\r\n/**\r\n * The namespace for the `FlexPanel` class statics.\r\n */\r\n(function (FlexPanel) {\r\n    /**\r\n     * Get the flex panel grow factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The flex panel grow factor for the widget.\r\n     */\r\n    function getGrow(widget) {\r\n        return flexlayout_1.FlexLayout.getGrow(widget);\r\n    }\r\n    FlexPanel.getGrow = getGrow;\r\n    /**\r\n     * Set the flex panel grow factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the grow factor.\r\n     */\r\n    function setGrow(widget, value) {\r\n        flexlayout_1.FlexLayout.setGrow(widget, value);\r\n    }\r\n    FlexPanel.setGrow = setGrow;\r\n    /**\r\n     * Get the flex panel shrink factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The flex panel shrink factor for the widget.\r\n     */\r\n    function getShrink(widget) {\r\n        return flexlayout_1.FlexLayout.getShrink(widget);\r\n    }\r\n    FlexPanel.getShrink = getShrink;\r\n    /**\r\n     * Set the flex panel shrink factor for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the shrink factor.\r\n     */\r\n    function setShrink(widget, value) {\r\n        flexlayout_1.FlexLayout.setShrink(widget, value);\r\n    }\r\n    FlexPanel.setShrink = setShrink;\r\n    /**\r\n     * Get the flex panel size basis for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @returns The flex panel size basis for the widget.\r\n     */\r\n    function getSizeBasis(widget) {\r\n        return flexlayout_1.FlexLayout.getSizeBasis(widget);\r\n    }\r\n    FlexPanel.getSizeBasis = getSizeBasis;\r\n    /**\r\n     * Set the flex panel size basis for the given widget.\r\n     *\r\n     * @param widget - The widget of interest.\r\n     *\r\n     * @param value - The value for the size basis.\r\n     */\r\n    function setSizeBasis(widget, value) {\r\n        flexlayout_1.FlexLayout.setSizeBasis(widget, value);\r\n    }\r\n    FlexPanel.setSizeBasis = setSizeBasis;\r\n})(FlexPanel = exports.FlexPanel || (exports.FlexPanel = {}));\r\n/**\r\n * The namespace for the private module data.\r\n */\r\nvar Private;\r\n(function (Private) {\r\n    /**\r\n     * Create a flex layout for the given panel options.\r\n     */\r\n    function createLayout(options) {\r\n        return options.layout || new flexlayout_1.FlexLayout(options);\r\n    }\r\n    Private.createLayout = createLayout;\r\n})(Private || (Private = {}));\r\n//# sourceMappingURL=flexpanel.js.map"],"sourceRoot":""}