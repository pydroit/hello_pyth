{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/@babel/runtime/helpers/interopRequireDefault.js","webpack://@jupyterlab/application-top/./node_modules/@babel/runtime/helpers/interopRequireWildcard.js","webpack://@jupyterlab/application-top/./node_modules/@babel/runtime/helpers/typeof.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/icons/Clear.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/icons/utils/createSvgIcon.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/lab/esm/internal/svg-icons/SuccessOutlined.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/lab/esm/internal/svg-icons/ReportProblemOutlined.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/lab/esm/internal/svg-icons/ErrorOutline.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/lab/esm/internal/svg-icons/InfoOutlined.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/lab/esm/internal/svg-icons/Close.js","webpack://@jupyterlab/application-top/./node_modules/@material-ui/lab/esm/Alert/Alert.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/common/dragpanel.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/cell.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/common.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/dragdrop.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/index.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/metadata.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/notebook.js","webpack://@jupyterlab/application-top/./node_modules/nbdime/lib/merge/widget/output.js"],"names":["_interopRequireDefault","obj","__esModule","module","exports","_typeof","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Symbol","iterator","constructor","value","React","_createSvgIcon","_default","default","createElement","d","enumerable","_utils","createSvgIcon","styles","theme","getColor","palette","type","getBackgroundColor","root","typography","body2","borderRadius","shape","backgroundColor","display","padding","standardSuccess","color","success","main","standardInfo","info","standardWarning","warning","standardError","error","outlinedSuccess","border","concat","outlinedInfo","outlinedWarning","outlinedError","filledSuccess","fontWeight","fontWeightMedium","filledInfo","filledWarning","filledError","icon","marginRight","fontSize","opacity","message","action","alignItems","marginLeft","paddingLeft","defaultIconMapping","SuccessOutlined","ReportProblemOutlined","ErrorOutline","InfoOutlined","_ref","Close","Alert","props","ref","children","classes","className","_props$closeText","closeText","_props$iconMapping","iconMapping","onClose","_props$role","role","_props$severity","severity","_props$variant","variant","other","Paper","square","elevation","capitalize","IconButton","size","title","onClick","withStyles","name","FriendlyDragDrop","DragDropPanel","DragPanel","DragDropPanelBase","DropPanel","findChild","belongsToUs","MIME_INDEX","widgets_1","coreutils_1","dragdrop_1","DROP_WIDGET_CLASS","DRAG_WIDGET_CLASS","DRAG_HANDLE","DEFAULT_DRAG_HANDLE_CLASS","DROP_TARGET_CLASS","DRAG_THRESHOLD","node","parentClass","parentNode","candidate","classList","contains","parentElement","parent","child","parentIsArray","Array","isArray","isDirectChild","indexOf","Panel","options","super","this","acceptDropsFromExternalSource","addClass","handleEvent","event","_evtDragEnter","_evtDragLeave","_evtDragOver","evtDrop","validateSource","source","findDropTarget","input","mimeData","hasData","target","remove","dropAction","preventDefault","stopPropagation","processDrop","onAfterAttach","msg","addEventListener","onBeforeDetach","removeEventListener","_clearDropTarget","add","proposedAction","elements","getElementsByClassName","length","drag","dragHandleClass","_clickData","childrenAreDragHandles","dispose","_evtDragMousedown","_evtDragMouseup","_evtDragMousemove","findDragTarget","handle","getDragImage","cloneNode","onDragComplete","document","startDrag","clientX","clientY","dragImage","Drag","undefined","MimeData","supportedActions","addMimeData","start","then","bind","_findDragHandle","button","pressX","pressY","data","Error","dx","Math","abs","dy","dropTarget","move","from","to","insertWidget","widgets","getIndexOfChildNode","layout","i","setData","isValidAction","sourceKey","getData","targetKey","supported","makeHandle","unmakeHandle","removeClass","createDefaultHandle","widget","Widget","id","_counter","_groups","setFriendlyGroup","_groupId","push","addToFriendlyGroup","friends","panel","CellMergeWidget","CELLMERGE_CLASS","nbformat","collapsiblepanel_1","dragpanel_1","mergeview_1","util_1","model_1","widget_1","flexpanel_1","output_1","common_1","CELL_HEADER_CLASS","CELL_HEADER_TITLE_CLASS","MARKED_DELETE","MARKED_CLEAR_OUTPUTS","CLEAR_OUTPUT_TOGGLE_CLASS","DELETE_CELL_TOGGLE_CLASS","EXECUTIONCOUNT_ROW_CLASS","SOURCE_ROW_CLASS","METADATA_ROW_CLASS","OUTPUTS_ROW_CLASS","OUTPUTS_CONFLICTED_CLASS","MARK_OUTPUTS_RESOLVED_CLASS","model","rendermime","mimetype","sourceView","metadataView","outputViews","_model","_rendermime","init","local","remote","merged","editorClasses","readOnly","view","StringDiffModel","createNbdimeMergeView","models","base","raw","m","validateMerged","MergeView","text","getMergedValue","lines","splitLines","JSON","stringify","metadata","parse","isCode","outputs","toJSON","CURR_CLASSES","MERGE_CLASSES","slice","createHeader","unchanged","UNCHANGED_MERGE_CLASS","ladd","added","ldel","deleted","radd","rdel","headerTitle","agreedCell","CellDiffWidget","createView","ONEWAY_LOCAL_CLASS","ONEWAY_REMOTE_CLASS","TWOWAY_DELETION_CLASS","TWOWAY_ADDITION_CLASS","addWidget","hasEntries","container","execDec","getExecutionCountDecision","row","FlexPanel","direction","textWidget","innerText","createMergeView","metadataChanged","outputsChanged","subModels","o","header","collapser","CollapsiblePanel","baseOut","getOutputs","localOut","remoteOut","mergedOut","RenderableOutputsMergeView","outputsConflicted","conflictClearBtn","btn","onclick","ev","clearOutputConflicts","appendChild","w","headerTitleWidget","clearOutputToggle","_createClearOutputToggle","deleteToggle","_createDeleteToggle","checkbox","createCheckbox","clearOutputs","onchange","checked","toggleClass","clearOutputsChanged","connect","deleteCell","deleteCellChanged","BASE_MERGE_CLASS","LOCAL_MERGE_CLASS","REMOTE_MERGE_CLASS","MERGED_MERGE_CLASS","indeterminate","setAttribute","label","innerHTML","insertBefore","childNodes","ChunkedCellsWidget","CellsDragDrop","signaling_1","CELL_DRAG_DROP_CLASS","MARK_CHUNK_RESOLVED_CLASS","CHUNK_HEADER_CLASS","CONLICTED_CELL_CHUNK_CLASS","_moved","Signal","friendFromId","friendToId","widgetFromId","widgetToId","adjustedTo","toPanel","fromPanel","cell","emit","oldParent","before","after","_resolved","onResolve","cells","onesided","conflicted","decisions","conflict","__createBinding","create","k","k2","__exportStar","p","MetadataMergeWidget","ROOT_METADATA_CLASS","wrapper","NotebookMergeWidget","metadata_1","cell_1","NBMERGE_CLASS","NB_MERGE_CONTROLS_CLASS","metadataWidget","work","Promise","resolve","NotebookMergeControls","cellContainer","makeGroup","moved","onDragDropMove","cellWidgets","chunk","c","resolved","onChunkResolved","requestAnimationFrame","validated","deepCopy","sender","args","splice","index","anyOutputs","init_controls","chk","clearOutputsToggle","clearConflictedOutputsToggle","updateOutputsToggles","connectOutputsToggles","disconnectOutputsToggles","disconnect","currentTarget","onClearAllOutputsChanged","onClearConflictedOutputsChanged","all","current","disabled","removeAttribute","ReorderableOutputWidget","ReorderableOutputModel","outputarea_1","REORDERABLE_OUTPUT_CLASS","REORDERABLE_OUTPUT_DRAGIMAGE_CLASS","DELETE_DROP_ZONE_CLASS","OutputAreaModel","insert","item","list","fromIndex","toIndex","OutputArea","onModelChanged","newIndex","oldIndex","removeWidgetAt","DisconnectedDropTarget","callback","output","panes","area","iter","next","_deleteDrop","style","position","evenSizes","leftPane","basePane","rightPane","mergePane","makeOutputsDraggable","pane","paneIndex","paneFrom","paneTo","outputFrom","outputTo","toModel","fromModel","deleteDrop","paneIdx","outputIdx","image","width","offsetWidth","toString","dd","ourRect","getBoundingClientRect","left","window","pageXOffset","top","pageYOffset","height","attach","body","isAttached","detach"],"mappings":"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","file":"3486.579e0fcd509cad07b99f.js?v=579e0fcd509cad07b99f","sourcesContent":["function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj[\"default\"] = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nmodule.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Clear');\n\nexports.default = _default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function get() {\n    return _utils.createSvgIcon;\n  }\n});\n\nvar _utils = require(\"@material-ui/core/utils\");","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\"\n}), 'SuccessOutlined');","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z\"\n}), 'ReportProblemOutlined');","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'ErrorOutline');","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z\"\n}), 'InfoOutlined');","import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles, lighten, darken } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport SuccessOutlinedIcon from '../internal/svg-icons/SuccessOutlined';\nimport ReportProblemOutlinedIcon from '../internal/svg-icons/ReportProblemOutlined';\nimport ErrorOutlineIcon from '../internal/svg-icons/ErrorOutline';\nimport InfoOutlinedIcon from '../internal/svg-icons/InfoOutlined';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport { capitalize } from '@material-ui/core/utils';\nexport var styles = function styles(theme) {\n  var getColor = theme.palette.type === 'light' ? darken : lighten;\n  var getBackgroundColor = theme.palette.type === 'light' ? lighten : darken;\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.body2, {\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: 'transparent',\n      display: 'flex',\n      padding: '6px 16px'\n    }),\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"success\"`. */\n    standardSuccess: {\n      color: getColor(theme.palette.success.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.success.main, 0.9),\n      '& $icon': {\n        color: theme.palette.success.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"info\"`. */\n    standardInfo: {\n      color: getColor(theme.palette.info.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.info.main, 0.9),\n      '& $icon': {\n        color: theme.palette.info.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"warning\"`. */\n    standardWarning: {\n      color: getColor(theme.palette.warning.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.warning.main, 0.9),\n      '& $icon': {\n        color: theme.palette.warning.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"standard\"` and `color=\"error\"`. */\n    standardError: {\n      color: getColor(theme.palette.error.main, 0.6),\n      backgroundColor: getBackgroundColor(theme.palette.error.main, 0.9),\n      '& $icon': {\n        color: theme.palette.error.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"success\"`. */\n    outlinedSuccess: {\n      color: getColor(theme.palette.success.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.success.main),\n      '& $icon': {\n        color: theme.palette.success.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"info\"`. */\n    outlinedInfo: {\n      color: getColor(theme.palette.info.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.info.main),\n      '& $icon': {\n        color: theme.palette.info.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"warning\"`. */\n    outlinedWarning: {\n      color: getColor(theme.palette.warning.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.warning.main),\n      '& $icon': {\n        color: theme.palette.warning.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"` and `color=\"error\"`. */\n    outlinedError: {\n      color: getColor(theme.palette.error.main, 0.6),\n      border: \"1px solid \".concat(theme.palette.error.main),\n      '& $icon': {\n        color: theme.palette.error.main\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"success\"`. */\n    filledSuccess: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.success.main\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"info\"`. */\n    filledInfo: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.info.main\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"warning\"`. */\n    filledWarning: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.warning.main\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"` and `color=\"error\"`. */\n    filledError: {\n      color: '#fff',\n      fontWeight: theme.typography.fontWeightMedium,\n      backgroundColor: theme.palette.error.main\n    },\n\n    /* Styles applied to the icon wrapper element. */\n    icon: {\n      marginRight: 12,\n      padding: '7px 0',\n      display: 'flex',\n      fontSize: 22,\n      opacity: 0.9\n    },\n\n    /* Styles applied to the message wrapper element. */\n    message: {\n      padding: '8px 0'\n    },\n\n    /* Styles applied to the action wrapper element if `action` is provided. */\n    action: {\n      display: 'flex',\n      alignItems: 'center',\n      marginLeft: 'auto',\n      paddingLeft: 16,\n      marginRight: -8\n    }\n  };\n};\nvar defaultIconMapping = {\n  success: /*#__PURE__*/React.createElement(SuccessOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  warning: /*#__PURE__*/React.createElement(ReportProblemOutlinedIcon, {\n    fontSize: \"inherit\"\n  }),\n  error: /*#__PURE__*/React.createElement(ErrorOutlineIcon, {\n    fontSize: \"inherit\"\n  }),\n  info: /*#__PURE__*/React.createElement(InfoOutlinedIcon, {\n    fontSize: \"inherit\"\n  })\n};\n\nvar _ref = /*#__PURE__*/React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar Alert = /*#__PURE__*/React.forwardRef(function Alert(props, ref) {\n  var action = props.action,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$closeText = props.closeText,\n      closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n      color = props.color,\n      icon = props.icon,\n      _props$iconMapping = props.iconMapping,\n      iconMapping = _props$iconMapping === void 0 ? defaultIconMapping : _props$iconMapping,\n      onClose = props.onClose,\n      _props$role = props.role,\n      role = _props$role === void 0 ? 'alert' : _props$role,\n      _props$severity = props.severity,\n      severity = _props$severity === void 0 ? 'success' : _props$severity,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'standard' : _props$variant,\n      other = _objectWithoutProperties(props, [\"action\", \"children\", \"classes\", \"className\", \"closeText\", \"color\", \"icon\", \"iconMapping\", \"onClose\", \"role\", \"severity\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    role: role,\n    square: true,\n    elevation: 0,\n    className: clsx(classes.root, classes[\"\".concat(variant).concat(capitalize(color || severity))], className),\n    ref: ref\n  }, other), icon !== false ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.icon\n  }, icon || iconMapping[severity] || defaultIconMapping[severity]) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.message\n  }, children), action != null ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.action\n  }, action) : null, action == null && onClose ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.action\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    size: \"small\",\n    \"aria-label\": closeText,\n    title: closeText,\n    color: \"inherit\",\n    onClick: onClose\n  }, _ref)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action: PropTypes.node,\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   */\n  closeText: PropTypes.string,\n\n  /**\n   * The main color for the alert. Unless provided, the value is taken from the `severity` prop.\n   */\n  color: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping: PropTypes.shape({\n    error: PropTypes.node,\n    info: PropTypes.node,\n    success: PropTypes.node,\n    warning: PropTypes.node\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * The ARIA role attribute of the element.\n   */\n  role: PropTypes.string,\n\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   */\n  severity: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAlert'\n})(Alert);","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.FriendlyDragDrop = exports.DragDropPanel = exports.DragPanel = exports.DragDropPanelBase = exports.DropPanel = exports.findChild = exports.belongsToUs = exports.MIME_INDEX = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst coreutils_1 = require(\"@lumino/coreutils\");\r\nconst dragdrop_1 = require(\"@lumino/dragdrop\");\r\n/**\r\n * The class name added to the DropPanel\r\n */\r\nconst DROP_WIDGET_CLASS = 'jp-DropPanel';\r\n/**\r\n * The class name added to the DragPanel\r\n */\r\nconst DRAG_WIDGET_CLASS = 'jp-DragPanel';\r\n/**\r\n * The class name added to something which can be used to drag a box\r\n */\r\nconst DRAG_HANDLE = 'jp-mod-dragHandle';\r\n/**\r\n * The class name of the default drag handle\r\n */\r\nconst DEFAULT_DRAG_HANDLE_CLASS = 'jp-DragPanel-dragHandle';\r\n/**\r\n * The class name added to a drop target.\r\n */\r\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\r\n/**\r\n * MIME type representing drag data by index\r\n */\r\nexports.MIME_INDEX = 'application/vnd.jupyter.dragindex';\r\n/**\r\n * The threshold in pixels to start a drag event.\r\n */\r\nconst DRAG_THRESHOLD = 5;\r\n/**\r\n * Determine whether node is equal to or a decendant of our panel, and that is does\r\n * not belong to a nested drag panel.\r\n */\r\nfunction belongsToUs(node, parentClass, parentNode) {\r\n    let candidate = node;\r\n    // Traverse DOM until drag panel encountered:\r\n    while (candidate && !candidate.classList.contains(parentClass)) {\r\n        candidate = candidate.parentElement;\r\n    }\r\n    return !!candidate && candidate === parentNode;\r\n}\r\nexports.belongsToUs = belongsToUs;\r\n/**\r\n * Find the direct child node of `parent`, which has `node` as a descendant.\r\n * Alternatively, parent can be a collection of children.\r\n *\r\n * Returns null if not found.\r\n */\r\nfunction findChild(parent, node) {\r\n    // Work our way up the DOM to an element which has this node as parent\r\n    let child = null;\r\n    let parentIsArray = Array.isArray(parent);\r\n    let isDirectChild = (child) => {\r\n        if (parentIsArray) {\r\n            return parent.indexOf(child) > -1;\r\n        }\r\n        else {\r\n            return child.parentElement === parent;\r\n        }\r\n    };\r\n    let candidate = node;\r\n    while (candidate && candidate !== parent) {\r\n        if (isDirectChild(candidate)) {\r\n            child = candidate;\r\n            break;\r\n        }\r\n        candidate = candidate.parentElement;\r\n    }\r\n    return child;\r\n}\r\nexports.findChild = findChild;\r\n/**\r\n * A panel class which allows the user to drop mime data onto it.\r\n *\r\n * To complete the class, the following functions need to be implemented:\r\n *  - processDrop: Process pre-screened drop events\r\n *\r\n * The functionallity of the class can be extended by overriding the following\r\n * functions:\r\n *  - findDropTarget(): Override if anything other than the direct children\r\n *    of the widget's node are to be the drop targets.\r\n *\r\n * For maximum control, `evtDrop` can be overriden.\r\n */\r\nclass DropPanel extends widgets_1.Panel {\r\n    /**\r\n     * Construct a drop widget.\r\n     */\r\n    constructor(options = {}) {\r\n        super(options);\r\n        this.acceptDropsFromExternalSource =\r\n            options.acceptDropsFromExternalSource === true;\r\n        this.addClass(DROP_WIDGET_CLASS);\r\n    }\r\n    /**\r\n     * Handle the DOM events for the widget.\r\n     *\r\n     * @param event - The DOM event sent to the widget.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the drop widget's node. It should\r\n     * not be called directly by user code.\r\n     */\r\n    handleEvent(event) {\r\n        switch (event.type) {\r\n            case 'p-dragenter':\r\n                this._evtDragEnter(event);\r\n                break;\r\n            case 'p-dragleave':\r\n                this._evtDragLeave(event);\r\n                break;\r\n            case 'p-dragover':\r\n                this._evtDragOver(event);\r\n                break;\r\n            case 'p-drop':\r\n                this.evtDrop(event);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    validateSource(event) {\r\n        return this.acceptDropsFromExternalSource || event.source === this;\r\n    }\r\n    /**\r\n     * Find a drop target from a given drag event target.\r\n     *\r\n     * Returns null if no valid drop target was found.\r\n     *\r\n     * The default implementation returns the direct child that is the parent of\r\n     * `node`, or `node` if it is itself a direct child. It also checks that the\r\n     * needed mime type is included\r\n     */\r\n    findDropTarget(input, mimeData) {\r\n        if (!mimeData.hasData(exports.MIME_INDEX)) {\r\n            return null;\r\n        }\r\n        return findChild(this.node, input);\r\n    }\r\n    /**\r\n     * Handle the `'p-drop'` event for the widget.\r\n     *\r\n     * Responsible for pre-processing event before calling `processDrop`.\r\n     *\r\n     * Should normally only be overriden if you cannot achive your goal by\r\n     * other overrides.\r\n     */\r\n    evtDrop(event) {\r\n        let target = event.target;\r\n        while (target && target.parentElement) {\r\n            if (target.classList.contains(DROP_TARGET_CLASS)) {\r\n                target.classList.remove(DROP_TARGET_CLASS);\r\n                break;\r\n            }\r\n            target = target.parentElement;\r\n        }\r\n        if (!target || !belongsToUs(target, DROP_WIDGET_CLASS, this.node)) {\r\n            // Ignore event\r\n            return;\r\n        }\r\n        // If configured to, only accept internal moves:\r\n        if (!this.validateSource(event)) {\r\n            event.dropAction = 'none';\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            return;\r\n        }\r\n        this.processDrop(target, event);\r\n    }\r\n    /**\r\n     * Handle `after_attach` messages for the widget.\r\n     */\r\n    onAfterAttach(msg) {\r\n        let node = this.node;\r\n        node.addEventListener('p-dragenter', this);\r\n        node.addEventListener('p-dragleave', this);\r\n        node.addEventListener('p-dragover', this);\r\n        node.addEventListener('p-drop', this);\r\n    }\r\n    /**\r\n     * Handle `before_detach` messages for the widget.\r\n     */\r\n    onBeforeDetach(msg) {\r\n        let node = this.node;\r\n        node.removeEventListener('p-dragenter', this);\r\n        node.removeEventListener('p-dragleave', this);\r\n        node.removeEventListener('p-dragover', this);\r\n        node.removeEventListener('p-drop', this);\r\n    }\r\n    /**\r\n     * Handle the `'p-dragenter'` event for the widget.\r\n     */\r\n    _evtDragEnter(event) {\r\n        if (!this.validateSource(event)) {\r\n            return;\r\n        }\r\n        let target = this.findDropTarget(event.target, event.mimeData);\r\n        if (target === null) {\r\n            return;\r\n        }\r\n        this._clearDropTarget();\r\n        target.classList.add(DROP_TARGET_CLASS);\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * Handle the `'p-dragleave'` event for the widget.\r\n     */\r\n    _evtDragLeave(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this._clearDropTarget();\r\n    }\r\n    /**\r\n     * Handle the `'p-dragover'` event for the widget.\r\n     */\r\n    _evtDragOver(event) {\r\n        if (!this.validateSource(event)) {\r\n            return;\r\n        }\r\n        this._clearDropTarget();\r\n        let target = this.findDropTarget(event.target, event.mimeData);\r\n        if (target === null) {\r\n            return;\r\n        }\r\n        target.classList.add(DROP_TARGET_CLASS);\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        event.dropAction = event.proposedAction;\r\n    }\r\n    /**\r\n     * Clear existing drop target from out children.\r\n     *\r\n     * #### Notes\r\n     * This function assumes there are only one active drop target\r\n     */\r\n    _clearDropTarget() {\r\n        let elements = this.node.getElementsByClassName(DROP_TARGET_CLASS);\r\n        if (elements.length) {\r\n            elements[0].classList.remove(DROP_TARGET_CLASS);\r\n        }\r\n    }\r\n}\r\nexports.DropPanel = DropPanel;\r\n;\r\n/**\r\n * An internal base class for implementing drag operations on top\r\n * of drop class.\r\n */\r\nclass DragDropPanelBase extends DropPanel {\r\n    /**\r\n     * Construct a drag and drop base widget.\r\n     */\r\n    constructor(options = {}) {\r\n        super(options);\r\n        /**\r\n         * Drag data stored in _startDrag\r\n         */\r\n        this.drag = null;\r\n        this.dragHandleClass = DRAG_HANDLE;\r\n        /**\r\n         * Data stored on mouse down to determine if drag treshold has\r\n         * been overcome, and to initialize drag once it has.\r\n         */\r\n        this._clickData = null;\r\n        this.childrenAreDragHandles = options.childrenAreDragHandles === true;\r\n        this.addClass(DRAG_WIDGET_CLASS);\r\n    }\r\n    /**\r\n     * Dispose of the resources held by the directory listing.\r\n     */\r\n    dispose() {\r\n        this.drag = null;\r\n        this._clickData = null;\r\n        super.dispose();\r\n    }\r\n    /**\r\n     * Handle the DOM events for the widget.\r\n     *\r\n     * @param event - The DOM event sent to the widget.\r\n     *\r\n     * #### Notes\r\n     * This method implements the DOM `EventListener` interface and is\r\n     * called in response to events on the drag widget's node. It should\r\n     * not be called directly by user code.\r\n     */\r\n    handleEvent(event) {\r\n        switch (event.type) {\r\n            case 'mousedown':\r\n                this._evtDragMousedown(event);\r\n                break;\r\n            case 'mouseup':\r\n                this._evtDragMouseup(event);\r\n                break;\r\n            case 'mousemove':\r\n                this._evtDragMousemove(event);\r\n                break;\r\n            default:\r\n                super.handleEvent(event);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Finds the drag target (the node to move) from a drag handle.\r\n     *\r\n     * Returns null if no valid drag target was found.\r\n     *\r\n     * The default implementation returns the direct child that is the ancestor of\r\n     * (or equal to) the handle.\r\n     */\r\n    findDragTarget(handle) {\r\n        return findChild(this.node, handle);\r\n    }\r\n    /**\r\n     * Returns the drag image to use when dragging using the given handle.\r\n     *\r\n     * The default implementation returns a clone of the drag target.\r\n     */\r\n    getDragImage(handle) {\r\n        let target = this.findDragTarget(handle);\r\n        if (target) {\r\n            return target.cloneNode(true);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Called when a drag has completed with this panel as a source\r\n     */\r\n    onDragComplete(action) {\r\n        this.drag = null;\r\n    }\r\n    /**\r\n     * Handle `after_attach` messages for the widget.\r\n     */\r\n    onAfterAttach(msg) {\r\n        let node = this.node;\r\n        node.addEventListener('mousedown', this);\r\n        super.onAfterAttach(msg);\r\n    }\r\n    /**\r\n     * Handle `before_detach` messages for the widget.\r\n     */\r\n    onBeforeDetach(msg) {\r\n        let node = this.node;\r\n        node.removeEventListener('click', this);\r\n        node.removeEventListener('dblclick', this);\r\n        document.removeEventListener('mousemove', this, true);\r\n        document.removeEventListener('mouseup', this, true);\r\n        super.onBeforeDetach(msg);\r\n    }\r\n    /**\r\n     * Start a drag event.\r\n     *\r\n     * Called when dragginging and DRAG_THRESHOLD is met.\r\n     *\r\n     * Should normally only be overriden if you cannot achieve your goal by\r\n     * other overrides.\r\n     */\r\n    startDrag(handle, clientX, clientY) {\r\n        // Create the drag image.\r\n        let dragImage = this.getDragImage(handle);\r\n        // Set up the drag event.\r\n        this.drag = new dragdrop_1.Drag({\r\n            dragImage: dragImage || undefined,\r\n            mimeData: new coreutils_1.MimeData(),\r\n            supportedActions: 'all',\r\n            proposedAction: 'copy',\r\n            source: this\r\n        });\r\n        this.addMimeData(handle, this.drag.mimeData);\r\n        // Start the drag and remove the mousemove listener.\r\n        this.drag.start(clientX, clientY).then(this.onDragComplete.bind(this));\r\n        document.removeEventListener('mousemove', this, true);\r\n        document.removeEventListener('mouseup', this, true);\r\n    }\r\n    /**\r\n     * Check if node, or any of nodes ancestors are a drag handle\r\n     *\r\n     * If it is a drag handle, it returns the handle, if not returns null.\r\n     */\r\n    _findDragHandle(node) {\r\n        let handle = null;\r\n        if (this.childrenAreDragHandles) {\r\n            // Simple scenario, just look for node among children\r\n            if (belongsToUs(node, DRAG_WIDGET_CLASS, this.node)) {\r\n                handle = node;\r\n            }\r\n        }\r\n        else {\r\n            // Otherwise, traverse up DOM to check if click is on a drag handle\r\n            let candidate = node;\r\n            while (candidate && candidate !== this.node) {\r\n                if (candidate.classList.contains(this.dragHandleClass)) {\r\n                    handle = candidate;\r\n                    break;\r\n                }\r\n                candidate = candidate.parentElement;\r\n            }\r\n            // Finally, check that handle does not belong to a nested drag panel\r\n            if (handle !== null && !belongsToUs(handle, DRAG_WIDGET_CLASS, this.node)) {\r\n                // Handle belongs to a nested drag panel:\r\n                handle = null;\r\n            }\r\n        }\r\n        return handle;\r\n    }\r\n    /**\r\n     * Handle the `'mousedown'` event for the widget.\r\n     */\r\n    _evtDragMousedown(event) {\r\n        let target = event.target;\r\n        let handle = this._findDragHandle(target);\r\n        if (handle === null) {\r\n            return;\r\n        }\r\n        // Left mouse press for drag start.\r\n        if (event.button === 0) {\r\n            this._clickData = { pressX: event.clientX, pressY: event.clientY,\r\n                handle: handle };\r\n            document.addEventListener('mouseup', this, true);\r\n            document.addEventListener('mousemove', this, true);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    /**\r\n     * Handle the `'mouseup'` event for the widget.\r\n     */\r\n    _evtDragMouseup(event) {\r\n        if (event.button !== 0 || !this.drag) {\r\n            document.removeEventListener('mousemove', this, true);\r\n            document.removeEventListener('mouseup', this, true);\r\n            this.drag = null;\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * Handle the `'mousemove'` event for the widget.\r\n     */\r\n    _evtDragMousemove(event) {\r\n        // Bail if we are already dragging.\r\n        if (this.drag) {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        // Check for a drag initialization.\r\n        let data = this._clickData;\r\n        if (!data) {\r\n            throw new Error('Missing drag data');\r\n        }\r\n        let dx = Math.abs(event.clientX - data.pressX);\r\n        let dy = Math.abs(event.clientY - data.pressY);\r\n        if (dx < DRAG_THRESHOLD && dy < DRAG_THRESHOLD) {\r\n            return;\r\n        }\r\n        this.startDrag(data.handle, event.clientX, event.clientY);\r\n        this._clickData = null;\r\n    }\r\n}\r\nexports.DragDropPanelBase = DragDropPanelBase;\r\n/**\r\n * A panel which allows the user to initiate drag operations.\r\n *\r\n * Any descendant element with the drag handle class `'jp-mod-dragHandle'`\r\n * will serve as a handle that can be used for dragging. If DragPanels are\r\n * nested, handles will only belong to the closest parent DragPanel. For\r\n * convenience, the functions `makeHandle`, `unmakeHandle` and\r\n * `createDefaultHandle` can be used to indicate which elements should be\r\n * made handles. `createDefaultHandle` will create a new element as a handle\r\n * with a default styling class applied. Optionally, `childrenAreDragHandles`\r\n * can be set to indicate that all direct children are themselve drag handles.\r\n *\r\n * To complete the class, the following functions need to be implemented:\r\n * - addMimeData: Adds mime data to new drag events\r\n *\r\n * The functionallity of the class can be extended by overriding the following\r\n * functions:\r\n *  - findDragTarget(): Override if anything other than the direct children\r\n *    of the widget's node are to be drag targets.\r\n *  - getDragImage: Override to change the drag image (the default is a\r\n *    copy of the drag target).\r\n *  - onDragComplete(): Callback on drag source when a drag has completed.\r\n */\r\nclass DragPanel extends DragDropPanelBase {\r\n    /**\r\n     * Construct a drag widget.\r\n     */\r\n    constructor(options = {}) {\r\n        // Implementation removes DropPanel options\r\n        super(options);\r\n    }\r\n    /**\r\n     * No-op on DragPanel, as it does not support dropping\r\n     */\r\n    processDrop(dropTarget, event) {\r\n        // Intentionally empty\r\n    }\r\n    /**\r\n     * Simply returns null for DragPanel, as it does not support dropping\r\n     */\r\n    findDropTarget(input, mimeData) {\r\n        return null;\r\n    }\r\n}\r\nexports.DragPanel = DragPanel;\r\n/**\r\n * A widget which allows the user to rearrange widgets in the panel by\r\n * drag and drop. An internal drag and drop of a widget will cause it\r\n * to be inserted (by `insertWidget`) in the index of the widget it was\r\n * dropped on.\r\n *\r\n * Any descendant element with the drag handle class `'jp-mod-dragHandle'`\r\n * will serve as a handle that can be used for dragging. If DragPanels are\r\n * nested, handles will only belong to the closest parent DragPanel. For\r\n * convenience, the functions `makeHandle`, `unmakeHandle` and\r\n * `createDefaultHandle` can be used to indicate which elements should be\r\n * made handles. `createDefaultHandle` will create a new element as a handle\r\n * with a default styling class applied. Optionally, `childrenAreDragHandles`\r\n * can be set to indicate that all direct children are themselve drag handles.\r\n *\r\n * The functionallity of the class can be extended by overriding the following\r\n * functions:\r\n *  - addMimeData: Override to add other drag data to the mime bundle.\r\n *    This is often a necessary step for allowing dragging to external\r\n *    drop targets.\r\n *  - processDrop: Override if you need to handle other mime data than the\r\n *    default. For allowing drops from external sources, the field\r\n *    `acceptDropsFromExternalSource` should be set as well.\r\n *  - findDragTarget(): Override if anything other than the direct children\r\n *    of the widget's node are to be drag targets.\r\n *  - findDropTarget(): Override if anything other than the direct children\r\n *    of the widget's node are to be the drop targets.\r\n *  - getIndexOfChildNode(): Override to change the key used to represent\r\n *    the drag and drop target (default is index of child widget).\r\n *  - move(): Override to change how a move is handled.\r\n *  - getDragImage: Override to change the drag image (the default is a\r\n *    copy of the drag target).\r\n *  - onDragComplete(): Callback on drag source when a drag has completed.\r\n *\r\n * To drag and drop other things than all direct children, the following functions\r\n * should be overriden: `findDragTarget`, `findDropTarget` and possibly\r\n * `getIndexOfChildNode` and `move` to allow for custom to/from keys.\r\n *\r\n * For maximum control, `startDrag` and `evtDrop` can be overriden.\r\n */\r\nclass DragDropPanel extends DragDropPanelBase {\r\n    /**\r\n     * Called when a widget should be moved as a consequence of an internal drag event.\r\n     *\r\n     * The default implementation assumes the keys `from` and `to` are numbers\r\n     * indexing the drag panel's direct children. It then moves the child at the\r\n     * `to` key to the location of the `from` key.\r\n     */\r\n    move(from, to) {\r\n        if (to !== from) {\r\n            // Adjust for the shifting of elements once 'from' is removed\r\n            if (to > from) {\r\n                to -= 1;\r\n            }\r\n            this.insertWidget(to, this.widgets[from]);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a key used to represent the child node.\r\n     *\r\n     * The default implementation returns the index of node in\r\n     * `this.layout.widgets`.\r\n     *\r\n     * Returns null if not found.\r\n     */\r\n    getIndexOfChildNode(node, parent) {\r\n        parent = parent || this.layout;\r\n        for (let i = 0; i < parent.widgets.length; i++) {\r\n            if (parent.widgets[i].node === node) {\r\n                return i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Adds mime data represeting the drag data to the drag event's MimeData bundle.\r\n     *\r\n     * The default implementation adds mime data indicating the index of the direct\r\n     * child being dragged (as indicated by findDragTarget).\r\n     *\r\n     * Override this method if you have data that cannot be communicated well by an\r\n     * index, for example if the data should be able to be dropped on an external\r\n     * target that only understands direct mime data.\r\n     *\r\n     * As the method simply adds mime data for a specific key, overriders can call\r\n     * this method before/after adding their own mime data to still support default\r\n     * dragging behavior.\r\n     */\r\n    addMimeData(handle, mimeData) {\r\n        let target = this.findDragTarget(handle);\r\n        let key = this.getIndexOfChildNode(target);\r\n        if (key !== null) {\r\n            mimeData.setData(exports.MIME_INDEX, key);\r\n        }\r\n    }\r\n    /**\r\n     * Processes a drop event.\r\n     *\r\n     * This function is called after checking:\r\n     *  - That the `dropTarget` is a valid drop target\r\n     *  - The value of `event.source` if `acceptDropsFromExternalSource` is false\r\n     *\r\n     * The default implementation assumes calling `getIndexOfChildNode` with\r\n     * `dropTarget` will be valid. It will call `move` with that index as `to`,\r\n     * and the index stored in the mime data as `from`.\r\n     *\r\n     * Override this if you need to handle other mime data than the default.\r\n     */\r\n    processDrop(dropTarget, event) {\r\n        if (!DropPanel.isValidAction(event.supportedActions, 'move') ||\r\n            event.proposedAction === 'none') {\r\n            // The default implementation only handles move action\r\n            // OR Accept proposed none action, and perform no-op\r\n            event.dropAction = 'none';\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            return;\r\n        }\r\n        if (!this.validateSource(event)) {\r\n            // Source indicates external drop, incorrect use in subclass\r\n            throw new Error('Invalid source!');\r\n        }\r\n        let sourceKey = event.mimeData.getData(exports.MIME_INDEX);\r\n        let targetKey = this.getIndexOfChildNode(dropTarget);\r\n        if (targetKey === null) {\r\n            // Invalid target somehow\r\n            return;\r\n        }\r\n        // We have an acceptable drop, handle:\r\n        this.move(sourceKey, targetKey);\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        event.dropAction = 'move';\r\n    }\r\n}\r\nexports.DragDropPanel = DragDropPanel;\r\n/**\r\n * The namespace for the `DropPanel` class statics.\r\n */\r\n(function (DropPanel) {\r\n    /**\r\n     * Validate a drop action against a SupportedActions type\r\n     */\r\n    function isValidAction(supported, action) {\r\n        switch (supported) {\r\n            case 'all':\r\n                return true;\r\n            case 'link-move':\r\n                return action === 'move' || action === 'link';\r\n            case 'copy-move':\r\n                return action === 'move' || action === 'copy';\r\n            case 'copy-link':\r\n                return action === 'link' || action === 'copy';\r\n            default:\r\n                return action === supported;\r\n        }\r\n    }\r\n    DropPanel.isValidAction = isValidAction;\r\n})(DropPanel = exports.DropPanel || (exports.DropPanel = {}));\r\n/**\r\n * The namespace for the `DragPanel` class statics.\r\n */\r\n(function (DragPanel) {\r\n    /**\r\n     * Mark a widget as a drag handle.\r\n     *\r\n     * Using this, any child-widget can be a drag handle, as long as mouse events\r\n     * are propagated from it to the DragPanel.\r\n     */\r\n    function makeHandle(handle) {\r\n        handle.addClass(DRAG_HANDLE);\r\n    }\r\n    DragPanel.makeHandle = makeHandle;\r\n    /**\r\n     * Unmark a widget as a drag handle\r\n     */\r\n    function unmakeHandle(handle) {\r\n        handle.removeClass(DRAG_HANDLE);\r\n    }\r\n    DragPanel.unmakeHandle = unmakeHandle;\r\n    /**\r\n     * Create a default handle widget for dragging (see styling in DragPanel.css).\r\n     *\r\n     * The handle will need to be styled to ensure a minimum size\r\n     */\r\n    function createDefaultHandle() {\r\n        let widget = new widgets_1.Widget();\r\n        widget.addClass(DEFAULT_DRAG_HANDLE_CLASS);\r\n        makeHandle(widget);\r\n        return widget;\r\n    }\r\n    DragPanel.createDefaultHandle = createDefaultHandle;\r\n})(DragPanel = exports.DragPanel || (exports.DragPanel = {}));\r\nclass FriendlyDragDrop extends DragDropPanel {\r\n    static makeGroup() {\r\n        const id = this._counter++;\r\n        FriendlyDragDrop._groups[id] = [];\r\n        return id;\r\n    }\r\n    setFriendlyGroup(id) {\r\n        this._groupId = id;\r\n        FriendlyDragDrop._groups[id].push(this);\r\n    }\r\n    addToFriendlyGroup(other) {\r\n        other.setFriendlyGroup(this._groupId);\r\n    }\r\n    get friends() {\r\n        if (this._groupId === undefined) {\r\n            throw new Error('Uninitialized drag-drop group');\r\n        }\r\n        return FriendlyDragDrop._groups[this._groupId];\r\n    }\r\n    getIndexOfChildNode(node, parent) {\r\n        const friends = this.friends;\r\n        for (let panel of friends) {\r\n            if (!belongsToUs(node, DROP_WIDGET_CLASS, panel.node)) {\r\n                continue;\r\n            }\r\n            let child = findChild(panel.node, node);\r\n            if (child !== null) {\r\n                return [panel.friends.indexOf(panel), super.getIndexOfChildNode(child, panel.layout)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    validateSource(event) {\r\n        if (this.acceptDropsFromExternalSource) {\r\n            return this.friends.indexOf(event.source) !== -1;\r\n        }\r\n        return super.validateSource(event);\r\n    }\r\n}\r\nexports.FriendlyDragDrop = FriendlyDragDrop;\r\nFriendlyDragDrop._counter = 0;\r\nFriendlyDragDrop._groups = {};\r\n//# sourceMappingURL=dragpanel.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CellMergeWidget = exports.CELLMERGE_CLASS = void 0;\r\nconst nbformat = require(\"@jupyterlab/nbformat\");\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst collapsiblepanel_1 = require(\"../../common/collapsiblepanel\");\r\nconst dragpanel_1 = require(\"../../common/dragpanel\");\r\nconst mergeview_1 = require(\"../../common/mergeview\");\r\nconst util_1 = require(\"../../common/util\");\r\nconst model_1 = require(\"../../diff/model\");\r\nconst widget_1 = require(\"../../diff/widget\");\r\nconst flexpanel_1 = require(\"../../upstreaming/flexpanel\");\r\nconst output_1 = require(\"./output\");\r\nconst common_1 = require(\"./common\");\r\nexports.CELLMERGE_CLASS = 'jp-Cell-merge';\r\nconst CELL_HEADER_CLASS = 'jp-Merge-cellHeader';\r\nconst CELL_HEADER_TITLE_CLASS = 'jp-Merge-cellHeader-title';\r\nconst MARKED_DELETE = 'jp-mod-todelete';\r\nconst MARKED_CLEAR_OUTPUTS = 'jp-mod-clearoutputs';\r\nconst CLEAR_OUTPUT_TOGGLE_CLASS = 'jp-Merge-clearOutput-toggle';\r\nconst DELETE_CELL_TOGGLE_CLASS = 'jp-Merge-delete-cell-toggle';\r\nconst EXECUTIONCOUNT_ROW_CLASS = 'jp-Cellrow-executionCount';\r\nconst SOURCE_ROW_CLASS = 'jp-Cellrow-source';\r\nconst METADATA_ROW_CLASS = 'jp-Cellrow-metadata';\r\nconst OUTPUTS_ROW_CLASS = 'jp-Cellrow-outputs';\r\nconst OUTPUTS_CONFLICTED_CLASS = 'jp-conflicted-outputs';\r\nconst MARK_OUTPUTS_RESOLVED_CLASS = 'jp-conflicted-outputs-button';\r\n/**\r\n * CellMergeWidget for cell changes\r\n */\r\nclass CellMergeWidget extends widgets_1.Panel {\r\n    /**\r\n     *\r\n     */\r\n    constructor(model, rendermime, mimetype) {\r\n        super();\r\n        this.sourceView = null;\r\n        this.metadataView = null;\r\n        this.outputViews = null;\r\n        this.addClass(exports.CELLMERGE_CLASS);\r\n        this._model = model;\r\n        this._rendermime = rendermime;\r\n        this.mimetype = mimetype;\r\n        this.init();\r\n    }\r\n    static createMergeView(local, remote, merged, editorClasses, readOnly = false) {\r\n        let view = null;\r\n        if (merged instanceof model_1.StringDiffModel) {\r\n            view = mergeview_1.createNbdimeMergeView(remote, local, merged, readOnly);\r\n        }\r\n        return view;\r\n    }\r\n    static getOutputs(models, base) {\r\n        let raw = [];\r\n        for (let m of models) {\r\n            if (base === true) {\r\n                if (m.base) {\r\n                    raw.push(m.base);\r\n                }\r\n            }\r\n            else {\r\n                if (m.remote) {\r\n                    raw.push(m.remote);\r\n                }\r\n            }\r\n        }\r\n        return raw;\r\n    }\r\n    validateMerged(candidate) {\r\n        if (this.sourceView && this.sourceView instanceof mergeview_1.MergeView) {\r\n            let text = this.sourceView.getMergedValue();\r\n            let lines = util_1.splitLines(text);\r\n            if (candidate.source !== lines) {\r\n                candidate.source = lines;\r\n            }\r\n        }\r\n        if (this.metadataView && this.metadataView instanceof mergeview_1.MergeView) {\r\n            let text = this.metadataView.getMergedValue();\r\n            if (JSON.stringify(candidate.metadata) !== text) {\r\n                // This will need to be validated server side,\r\n                // and should not be touched by client side\r\n                // (structure might differ from assumed form)\r\n                candidate.metadata = JSON.parse(text);\r\n            }\r\n        }\r\n        if (nbformat.isCode(candidate) && this.outputViews) {\r\n            let model = this.outputViews.merged;\r\n            let outputs = model.toJSON();\r\n            candidate.outputs = outputs;\r\n        }\r\n        return candidate;\r\n    }\r\n    init() {\r\n        let model = this.model;\r\n        let CURR_CLASSES = common_1.MERGE_CLASSES.slice(); // copy\r\n        this.createHeader();\r\n        // Mark cells that have no changes:\r\n        if (model.merged.unchanged &&\r\n            model.local && model.local.unchanged &&\r\n            model.remote && model.remote.unchanged) {\r\n            this.addClass(common_1.UNCHANGED_MERGE_CLASS);\r\n        }\r\n        /*\r\n         Two different display layouts depending on cell merge type:\r\n         1. Unchanged or one way insert/delete of cell, or identical insert/delete:\r\n            Single r/w editor (merged), with appropriate coloring for insert/delete\r\n         2. Everything else:\r\n            Full 4x merge view\r\n        */\r\n        let ladd = model.local && model.local.added;\r\n        let ldel = model.local && model.local.deleted;\r\n        let radd = model.remote && model.remote.added;\r\n        let rdel = model.remote && model.remote.deleted;\r\n        if (ladd && !radd || ldel && !rdel) {\r\n            this.headerTitle = ladd ? 'Cell added locally' : 'Cell deleted locally';\r\n        }\r\n        else if (radd && !ladd || rdel && !ldel) {\r\n            this.headerTitle = radd ? 'Cell added remotely' : 'Cell deleted remotely';\r\n        }\r\n        if (model.local === null || model.remote === null || ( // One sided change\r\n        model.local.unchanged && model.remote.unchanged &&\r\n            model.merged.unchanged) || // Unchanged\r\n            model.local.added !== model.remote.added || // Onesided addition\r\n            model.local.deleted && model.remote.unchanged || // Onesided deletion (other side unchanged)\r\n            model.local.unchanged && model.remote.deleted || // Onesided deletion (other side unchanged)\r\n            model.local.added && model.agreedCell || // Identical additions\r\n            model.local.deleted && model.remote.deleted // Deletion on both\r\n        ) {\r\n            CURR_CLASSES = CURR_CLASSES.slice(1, 3);\r\n            // Add single view of source:\r\n            let view = widget_1.CellDiffWidget.createView(model.merged.source, model.merged, CURR_CLASSES, this._rendermime);\r\n            if (ladd && !radd || ldel && !rdel) {\r\n                this.addClass(common_1.ONEWAY_LOCAL_CLASS);\r\n            }\r\n            else if (radd && !ladd || rdel && !ldel) {\r\n                this.addClass(common_1.ONEWAY_REMOTE_CLASS);\r\n            }\r\n            else if (ldel && rdel) {\r\n                this.headerTitle = 'Deleted on both sides';\r\n                this.addClass(common_1.TWOWAY_DELETION_CLASS);\r\n            }\r\n            else if (ladd && radd) {\r\n                this.headerTitle = 'Added on both sides';\r\n                this.addClass(common_1.TWOWAY_ADDITION_CLASS);\r\n            }\r\n            view.addClass(SOURCE_ROW_CLASS);\r\n            this.addWidget(view);\r\n            if (util_1.hasEntries(model.merged.outputs)) {\r\n                // Add single view of rendered output\r\n                let container = new widgets_1.Panel();\r\n                for (let m of model.merged.outputs) {\r\n                    view = widget_1.CellDiffWidget.createView(m, model.merged, CURR_CLASSES, this._rendermime);\r\n                    container.addWidget(view);\r\n                }\r\n                container.addClass(OUTPUTS_ROW_CLASS);\r\n                this.addWidget(container);\r\n            }\r\n        }\r\n        else {\r\n            // Setup full 4-way mergeview of source, metadata and outputs\r\n            // as needed (if changed). Source/metadata/output are each a \"row\"\r\n            let execDec = model.getExecutionCountDecision();\r\n            if (execDec && execDec.action === 'clear') {\r\n                let row = new flexpanel_1.FlexPanel({ direction: 'left-to-right' });\r\n                row.addClass(EXECUTIONCOUNT_ROW_CLASS);\r\n                let textWidget = new widgets_1.Widget();\r\n                textWidget.node.innerText = 'Execution count will be cleared.';\r\n                row.addWidget(textWidget);\r\n                this.addWidget(row);\r\n            }\r\n            let sourceView = null;\r\n            if (model.local && model.local.source.unchanged &&\r\n                model.remote && model.remote.source.unchanged &&\r\n                model.merged.source.unchanged) {\r\n                // Use single unchanged view of source\r\n                sourceView = widget_1.CellDiffWidget.createView(model.merged.source, model.merged, CURR_CLASSES, this._rendermime);\r\n            }\r\n            else {\r\n                sourceView = CellMergeWidget.createMergeView(model.local ? model.local.source : null, model.remote ? model.remote.source : null, model.merged.source, CURR_CLASSES);\r\n            }\r\n            if (sourceView === null) {\r\n                throw new Error('Was not able to create merge view for cell!');\r\n            }\r\n            this.sourceView = sourceView;\r\n            sourceView.addClass(SOURCE_ROW_CLASS);\r\n            this.addWidget(sourceView);\r\n            let metadataChanged = false;\r\n            let outputsChanged = false;\r\n            for (let m of model.subModels) {\r\n                if (!m || m.deleted) {\r\n                    // Don't consider deleted cells\r\n                    continue;\r\n                }\r\n                metadataChanged = metadataChanged || (!!m.metadata && !m.metadata.unchanged);\r\n                if (m.outputs && m.outputs.length > 0) {\r\n                    for (let o of m.outputs) {\r\n                        outputsChanged = outputsChanged || !o.unchanged;\r\n                    }\r\n                }\r\n            }\r\n            if (metadataChanged) {\r\n                let metadataView = CellMergeWidget.createMergeView(model.local ? model.local.metadata : null, model.remote ? model.remote.metadata : null, model.merged.metadata, CURR_CLASSES, true); // Do not allow manual edit of metadata\r\n                if (metadataView === null) {\r\n                    throw new Error('Was not able to create merge view for cell metadata!');\r\n                }\r\n                this.metadataView = metadataView;\r\n                let container = new widgets_1.Panel();\r\n                container.addWidget(metadataView);\r\n                let header = 'Metadata changed';\r\n                let collapser = new collapsiblepanel_1.CollapsiblePanel(container, header, true);\r\n                collapser.addClass(METADATA_ROW_CLASS);\r\n                this.addWidget(collapser);\r\n            }\r\n            if (outputsChanged || util_1.hasEntries(model.merged.outputs)) {\r\n                // We know here that we have code cell\r\n                // -> all have outputs !== null\r\n                let baseOut = CellMergeWidget.getOutputs(model.local ? model.local.outputs : [], true);\r\n                let localOut = CellMergeWidget.getOutputs(model.local ? model.local.outputs : []);\r\n                let remoteOut = CellMergeWidget.getOutputs(model.remote ? model.remote.outputs : []);\r\n                let mergedOut = CellMergeWidget.getOutputs(model.merged.outputs);\r\n                let view = new output_1.RenderableOutputsMergeView(mergedOut, common_1.MERGE_CLASSES, this._rendermime, baseOut, remoteOut, localOut);\r\n                this.outputViews = view;\r\n                let header = outputsChanged ?\r\n                    (model.outputsConflicted ?\r\n                        'Outputs conflicted' :\r\n                        'Outputs changed') :\r\n                    'Outputs unchanged';\r\n                let collapser = new collapsiblepanel_1.CollapsiblePanel(view, header, !outputsChanged);\r\n                collapser.addClass(OUTPUTS_ROW_CLASS);\r\n                if (model.outputsConflicted) {\r\n                    collapser.addClass(OUTPUTS_CONFLICTED_CLASS);\r\n                    let conflictClearBtn = new widgets_1.Widget();\r\n                    conflictClearBtn.addClass(MARK_OUTPUTS_RESOLVED_CLASS);\r\n                    let node = conflictClearBtn.node;\r\n                    let btn = document.createElement('button');\r\n                    btn.onclick = (ev) => {\r\n                        if (ev.button !== 0) {\r\n                            return; // Only main button clicks\r\n                        }\r\n                        model.clearOutputConflicts();\r\n                        collapser.removeClass(OUTPUTS_CONFLICTED_CLASS);\r\n                        collapser.headerTitle = 'Outputs changed';\r\n                        ev.preventDefault();\r\n                        ev.stopPropagation();\r\n                        conflictClearBtn.parent = null;\r\n                    };\r\n                    btn.innerText = 'Mark resolved';\r\n                    node.appendChild(btn);\r\n                    collapser.header.insertWidget(1, conflictClearBtn);\r\n                }\r\n                this.addWidget(collapser);\r\n            }\r\n        }\r\n    }\r\n    createHeader() {\r\n        let header = new widgets_1.Panel();\r\n        header.addClass(CELL_HEADER_CLASS);\r\n        // Add drag handle\r\n        let w = dragpanel_1.DragPanel.createDefaultHandle();\r\n        header.addWidget(w);\r\n        // Add title widget\r\n        w = new widgets_1.Widget();\r\n        this.headerTitleWidget = w;\r\n        w.addClass(CELL_HEADER_TITLE_CLASS);\r\n        header.addWidget(w);\r\n        if (util_1.hasEntries(this.model.merged.outputs)) {\r\n            // Add \"clear outputs\" checkbox\r\n            let clearOutputToggle = this._createClearOutputToggle();\r\n            header.addWidget(clearOutputToggle);\r\n        }\r\n        // Add \"delete cell\" checkbox\r\n        let deleteToggle = this._createDeleteToggle();\r\n        header.addWidget(deleteToggle);\r\n        // Add header to widget\r\n        this.addWidget(header);\r\n        this.header = header;\r\n    }\r\n    _createClearOutputToggle() {\r\n        let { checkbox, widget } = common_1.createCheckbox(this.model.clearOutputs, 'Clear outputs');\r\n        if (this.model.clearOutputs) {\r\n            this.addClass(MARKED_CLEAR_OUTPUTS);\r\n        }\r\n        // Map checkbox -> model\r\n        checkbox.onchange = (event) => {\r\n            this.model.clearOutputs = checkbox.checked;\r\n            this.toggleClass(MARKED_CLEAR_OUTPUTS, checkbox.checked);\r\n        };\r\n        // Map model -> checkbox\r\n        this.model.clearOutputsChanged.connect((_model, value) => {\r\n            checkbox.checked = value;\r\n            this.toggleClass(MARKED_CLEAR_OUTPUTS, value);\r\n        });\r\n        widget.addClass(CLEAR_OUTPUT_TOGGLE_CLASS);\r\n        return widget;\r\n    }\r\n    _createDeleteToggle() {\r\n        let { checkbox, widget } = common_1.createCheckbox(this.model.deleteCell, 'Delete cell');\r\n        if (this.model.deleteCell) {\r\n            this.addClass(MARKED_DELETE);\r\n        }\r\n        // Map checkbox -> model\r\n        checkbox.onchange = (event) => {\r\n            this.model.deleteCell = checkbox.checked;\r\n            this.toggleClass(MARKED_DELETE, checkbox.checked);\r\n        };\r\n        // Map model -> checkbox\r\n        this.model.deleteCellChanged.connect((_model, value) => {\r\n            checkbox.checked = value;\r\n            this.toggleClass(MARKED_DELETE, value);\r\n        });\r\n        widget.addClass(DELETE_CELL_TOGGLE_CLASS);\r\n        return widget;\r\n    }\r\n    set headerTitle(value) {\r\n        this.headerTitleWidget.node.innerText = value;\r\n    }\r\n    /**\r\n     * Get the model for the widget.\r\n     *\r\n     * #### Notes\r\n     * This is a read-only property.\r\n     */\r\n    get model() {\r\n        return this._model;\r\n    }\r\n}\r\nexports.CellMergeWidget = CellMergeWidget;\r\n//# sourceMappingURL=cell.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createCheckbox = exports.MERGE_CLASSES = exports.TWOWAY_DELETION_CLASS = exports.TWOWAY_ADDITION_CLASS = exports.ONEWAY_REMOTE_CLASS = exports.ONEWAY_LOCAL_CLASS = exports.UNCHANGED_MERGE_CLASS = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\n// Merge classes:\r\nexports.UNCHANGED_MERGE_CLASS = 'jp-Merge-unchanged';\r\nexports.ONEWAY_LOCAL_CLASS = 'jp-Merge-oneway-local';\r\nexports.ONEWAY_REMOTE_CLASS = 'jp-Merge-oneway-remote';\r\nexports.TWOWAY_ADDITION_CLASS = 'jp-Merge-twoway-addition';\r\nexports.TWOWAY_DELETION_CLASS = 'jp-Merge-twoway-deletion';\r\nconst BASE_MERGE_CLASS = 'jp-Merge-base';\r\nconst LOCAL_MERGE_CLASS = 'jp-Merge-local';\r\nconst REMOTE_MERGE_CLASS = 'jp-Merge-remote';\r\nconst MERGED_MERGE_CLASS = 'jp-Merge-merged';\r\nexports.MERGE_CLASSES = [BASE_MERGE_CLASS, LOCAL_MERGE_CLASS,\r\n    REMOTE_MERGE_CLASS, MERGED_MERGE_CLASS];\r\n/**\r\n * Create a widget containing a checkbox with a label.\r\n *\r\n * @export\r\n * @param {boolean} value - The initial check state (true = checked)\r\n * @param {string} text - The text of the label\r\n * @returns {{checkbox: HTMLInputElement, widget: Widget }}\r\n */\r\nfunction createCheckbox(value, text, indeterminate = false) {\r\n    let checkbox = document.createElement('input');\r\n    checkbox.setAttribute('type', 'checkbox');\r\n    checkbox.checked = value;\r\n    checkbox.indeterminate = indeterminate;\r\n    // Create label for checkbox:\r\n    let widget = new widgets_1.Widget();\r\n    let label = document.createElement('label');\r\n    label.innerHTML = text;\r\n    // Combine checkbox and label:\r\n    label.insertBefore(checkbox, label.childNodes[0]);\r\n    // Add checkbox to header:\r\n    widget.node.appendChild(label);\r\n    return { checkbox, widget };\r\n}\r\nexports.createCheckbox = createCheckbox;\r\n//# sourceMappingURL=common.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ChunkedCellsWidget = exports.CellsDragDrop = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst signaling_1 = require(\"@lumino/signaling\");\r\nconst dragpanel_1 = require(\"../../common/dragpanel\");\r\nconst CELL_DRAG_DROP_CLASS = 'jp-merge-celldragdrop';\r\nconst MARK_CHUNK_RESOLVED_CLASS = 'jp-conflicted-cells-button';\r\nconst CHUNK_HEADER_CLASS = 'jp-conflicted-cells-header';\r\nconst CONLICTED_CELL_CHUNK_CLASS = 'jp-conflicted-cells';\r\nclass CellsDragDrop extends dragpanel_1.FriendlyDragDrop {\r\n    /**\r\n     *\r\n     */\r\n    constructor(options) {\r\n        super(options);\r\n        this._moved = new signaling_1.Signal(this);\r\n        this.addClass(CELL_DRAG_DROP_CLASS);\r\n    }\r\n    /**\r\n     * Called when something has been dropped in the panel.\r\n     *\r\n     * As only internal moves are supported, we know the type of the keys\r\n     */\r\n    move(from, to) {\r\n        let friendFromId = from[0];\r\n        let friendToId = to[0];\r\n        let widgetFromId = from[1];\r\n        let widgetToId = to[1];\r\n        let adjustedTo = widgetToId;\r\n        if (friendFromId === friendToId) {\r\n            if (widgetToId > widgetFromId) {\r\n                // Have to adjust index for insertWidget in same instance\r\n                adjustedTo -= 1;\r\n                to[1] = adjustedTo;\r\n            }\r\n            else if (widgetFromId === widgetToId) {\r\n                // No-op, same position\r\n                return;\r\n            }\r\n        }\r\n        let toPanel = this.friends[friendToId];\r\n        let fromPanel = this.friends[friendFromId];\r\n        const cell = fromPanel.widgets[widgetFromId];\r\n        toPanel.insertWidget(adjustedTo, cell);\r\n        this._moved.emit({\r\n            widget: cell,\r\n            oldParent: fromPanel,\r\n            before: adjustedTo > 0 ?\r\n                toPanel.widgets[adjustedTo - 1] : null,\r\n            after: adjustedTo < toPanel.widgets.length ?\r\n                toPanel.widgets[adjustedTo + 1] : null,\r\n        });\r\n    }\r\n    get moved() {\r\n        return this._moved;\r\n    }\r\n}\r\nexports.CellsDragDrop = CellsDragDrop;\r\nclass ChunkedCellsWidget extends widgets_1.Panel {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._resolved = new signaling_1.Signal(this);\r\n        this.addClass(CONLICTED_CELL_CHUNK_CLASS);\r\n        this.header = new widgets_1.Widget();\r\n        this.header.addClass(CHUNK_HEADER_CLASS);\r\n        this.header.node.innerText = 'Conflicting cell operations';\r\n        let button = document.createElement('button');\r\n        button.innerText = 'Resolve Conflict';\r\n        button.onclick = this.onResolve.bind(this);\r\n        button.className = MARK_CHUNK_RESOLVED_CLASS;\r\n        this.header.node.appendChild(button);\r\n        this.addWidget(this.header);\r\n        this.cells = new CellsDragDrop();\r\n        this.addWidget(this.cells);\r\n    }\r\n    onResolve(event) {\r\n        for (let cell of this.cells.widgets) {\r\n            let model = cell.model;\r\n            if (model.onesided && model.conflicted) {\r\n                for (let d of model.decisions) {\r\n                    d.conflict = false;\r\n                }\r\n            }\r\n        }\r\n        this.removeClass(CONLICTED_CELL_CHUNK_CLASS);\r\n        this.header.parent = null;\r\n        this.header.dispose();\r\n        this._resolved.emit(undefined);\r\n    }\r\n    dispose() {\r\n        this.cells.parent = null;\r\n        this.cells = null;\r\n        if (this.header) {\r\n            this.header.parent = null;\r\n        }\r\n        this.header = null;\r\n        super.dispose();\r\n    }\r\n    get resolved() {\r\n        return this._resolved;\r\n    }\r\n}\r\nexports.ChunkedCellsWidget = ChunkedCellsWidget;\r\n//# sourceMappingURL=dragdrop.js.map","\"use strict\";\r\n// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__exportStar(require(\"./cell\"), exports);\r\n__exportStar(require(\"./notebook\"), exports);\r\n__exportStar(require(\"./metadata\"), exports);\r\n//# sourceMappingURL=index.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.MetadataMergeWidget = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst mergeview_1 = require(\"../../common/mergeview\");\r\nconst collapsiblepanel_1 = require(\"../../common/collapsiblepanel\");\r\nconst ROOT_METADATA_CLASS = 'jp-Metadata-diff';\r\n/**\r\n * MetadataWidget for changes to Notebook-level metadata\r\n */\r\nclass MetadataMergeWidget extends widgets_1.Panel {\r\n    constructor(model) {\r\n        super();\r\n        this._model = model;\r\n        this.addClass(ROOT_METADATA_CLASS);\r\n        this.init();\r\n    }\r\n    init() {\r\n        let model = this._model;\r\n        // We know/assume that MetadataMergeModel never has\r\n        // null values for local/remote:\r\n        this.view = mergeview_1.createNbdimeMergeView(model.remote, model.local, model.merged);\r\n        let wrapper = new collapsiblepanel_1.CollapsiblePanel(this.view, 'Notebook metadata changed', true);\r\n        this.addWidget(wrapper);\r\n    }\r\n    validateMerged(candidate) {\r\n        let text = this.view.getMergedValue();\r\n        if (JSON.stringify(candidate) !== text) {\r\n            // This will need to be validated server side,\r\n            // and should not be touched by client side\r\n            // (structure might differ from assumed form)\r\n            candidate = JSON.parse(text);\r\n        }\r\n        return candidate;\r\n    }\r\n}\r\nexports.MetadataMergeWidget = MetadataMergeWidget;\r\n//# sourceMappingURL=metadata.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NotebookMergeWidget = void 0;\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst util_1 = require(\"../../common/util\");\r\nconst flexpanel_1 = require(\"../../upstreaming/flexpanel\");\r\nconst metadata_1 = require(\"./metadata\");\r\nconst cell_1 = require(\"./cell\");\r\nconst common_1 = require(\"./common\");\r\nconst dragdrop_1 = require(\"./dragdrop\");\r\nconst NBMERGE_CLASS = 'jp-Notebook-merge';\r\nconst NB_MERGE_CONTROLS_CLASS = 'jp-Merge-notebook-controls';\r\n/**\r\n * NotebookMergeWidget\r\n */\r\nclass NotebookMergeWidget extends widgets_1.Panel {\r\n    constructor(model, rendermime) {\r\n        super();\r\n        this.metadataWidget = null;\r\n        this._model = model;\r\n        this._rendermime = rendermime;\r\n        this.addClass(NBMERGE_CLASS);\r\n    }\r\n    /**\r\n     * Start adding sub-widgets.\r\n     *\r\n     * Separated from constructor to allow 'live' adding of widgets\r\n     */\r\n    init() {\r\n        let model = this._model;\r\n        let rendermime = this._rendermime;\r\n        let work = Promise.resolve();\r\n        this.addWidget(new NotebookMergeControls(model));\r\n        work = work.then(() => {\r\n            if (model.metadata) {\r\n                this.metadataWidget = new metadata_1.MetadataMergeWidget(model.metadata);\r\n                this.addWidget(this.metadataWidget);\r\n            }\r\n        });\r\n        work = work.then(() => {\r\n            this.cellContainer = new dragdrop_1.CellsDragDrop({ acceptDropsFromExternalSource: true });\r\n            this.cellContainer.setFriendlyGroup(dragdrop_1.CellsDragDrop.makeGroup());\r\n            this.cellContainer.moved.connect(this.onDragDropMove, this);\r\n            this.addWidget(this.cellContainer);\r\n        });\r\n        this.cellWidgets = [];\r\n        let chunk = null;\r\n        for (let c of model.cells) {\r\n            work = work.then(() => {\r\n                return new Promise((resolve) => {\r\n                    let w = new cell_1.CellMergeWidget(c, rendermime, model.mimetype);\r\n                    this.cellWidgets.push(w);\r\n                    if (c.onesided && c.conflicted) {\r\n                        if (chunk === null) {\r\n                            chunk = new dragdrop_1.ChunkedCellsWidget();\r\n                            chunk.cells.moved.connect(this.onDragDropMove, this);\r\n                            chunk.resolved.connect(this.onChunkResolved, this);\r\n                            this.cellContainer.addToFriendlyGroup(chunk.cells);\r\n                        }\r\n                        chunk.cells.addWidget(w);\r\n                    }\r\n                    else {\r\n                        if (chunk !== null) {\r\n                            this.cellContainer.addWidget(chunk);\r\n                            chunk = null;\r\n                        }\r\n                        this.cellContainer.addWidget(w);\r\n                    }\r\n                    // This limits us to drawing 60 cells per second, which shouldn't\r\n                    // be a problem...\r\n                    requestAnimationFrame(() => {\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        work = work.then(() => {\r\n            if (chunk !== null) {\r\n                this.cellContainer.addWidget(chunk);\r\n            }\r\n        });\r\n        return work;\r\n    }\r\n    validateMerged(candidate) {\r\n        let validated = util_1.deepCopy(candidate);\r\n        // Validate metadata\r\n        if (this.metadataWidget) {\r\n            validated.metadata = this.metadataWidget.validateMerged(candidate.metadata);\r\n        }\r\n        // Validate cells\r\n        let i = 0;\r\n        for (let c of this.cellWidgets) {\r\n            if (!c.model.deleteCell) {\r\n                validated.cells[i] = c.validateMerged(candidate.cells[i]);\r\n                ++i;\r\n            }\r\n        }\r\n        return validated;\r\n    }\r\n    /**\r\n     * Get the model for the widget.\r\n     *\r\n     * #### Notes\r\n     * This is a read-only property.\r\n     */\r\n    get model() {\r\n        return this._model;\r\n    }\r\n    onDragDropMove(sender, args) {\r\n        // Move cell in model list\r\n        let { widget, oldParent, before, after } = args;\r\n        let from = this._model.cells.indexOf(widget.model);\r\n        let to;\r\n        if (after) {\r\n            to = this._model.cells.indexOf(after.model);\r\n        }\r\n        else if (before) {\r\n            to = this._model.cells.indexOf(before.model) + 1;\r\n        }\r\n        else {\r\n            throw new Error('Need either before or after');\r\n        }\r\n        if (to > from) {\r\n            to -= 1;\r\n        }\r\n        this._model.cells.splice(to, 0, this._model.cells.splice(from, 1)[0]);\r\n        if (oldParent.widgets.length === 0) {\r\n            let chunk = oldParent.parent;\r\n            chunk.onResolve();\r\n        }\r\n        // Mark any conflict on a cell moved from chunk as resolved\r\n        if (oldParent !== this.cellContainer && widget.parent === this.cellContainer) {\r\n            for (let d of widget.model.decisions) {\r\n                d.conflict = false;\r\n            }\r\n        }\r\n    }\r\n    onChunkResolved(sender, args) {\r\n        let index = this.cellContainer.widgets.indexOf(sender);\r\n        while (sender.cells.widgets.length > 0) {\r\n            this.cellContainer.insertWidget(index++, sender.cells.widgets[0]);\r\n        }\r\n        sender.parent = null;\r\n        sender.dispose();\r\n    }\r\n}\r\nexports.NotebookMergeWidget = NotebookMergeWidget;\r\n/**\r\n * Collection of notebook-wide controls\r\n */\r\nclass NotebookMergeControls extends flexpanel_1.FlexPanel {\r\n    constructor(model) {\r\n        super({\r\n            direction: 'left-to-right'\r\n        });\r\n        this.model = model;\r\n        this.addClass(NB_MERGE_CONTROLS_CLASS);\r\n        let anyOutputs = false;\r\n        for (let cell of model.cells) {\r\n            if (util_1.hasEntries(cell.merged.outputs)) {\r\n                anyOutputs = true;\r\n                break;\r\n            }\r\n        }\r\n        if (anyOutputs) {\r\n            this.init_controls();\r\n        }\r\n    }\r\n    init_controls() {\r\n        // Add \"Clear all outputs\" checkbox\r\n        let chk = common_1.createCheckbox(false, 'Clear <i>all</i> cell outputs');\r\n        this.clearOutputsToggle = chk.checkbox;\r\n        this.addWidget(chk.widget);\r\n        // Add \"Clear all conflicted outputs\" checkbox\r\n        chk = common_1.createCheckbox(false, 'Clear <i>conflicted</i> cell outputs');\r\n        this.clearConflictedOutputsToggle = chk.checkbox;\r\n        this.addWidget(chk.widget);\r\n        this.updateOutputsToggles();\r\n        this.connectOutputsToggles();\r\n    }\r\n    connectOutputsToggles() {\r\n        for (let cell of this.model.cells) {\r\n            if (util_1.hasEntries(cell.merged.outputs)) {\r\n                cell.clearOutputsChanged.connect(this.updateOutputsToggles, this);\r\n            }\r\n        }\r\n        this.clearOutputsToggle.addEventListener('change', this);\r\n        this.clearConflictedOutputsToggle.addEventListener('change', this);\r\n    }\r\n    disconnectOutputsToggles() {\r\n        for (let cell of this.model.cells) {\r\n            if (util_1.hasEntries(cell.merged.outputs)) {\r\n                cell.clearOutputsChanged.disconnect(this.updateOutputsToggles, this);\r\n            }\r\n        }\r\n        this.clearOutputsToggle.removeEventListener('change', this);\r\n        this.clearConflictedOutputsToggle.removeEventListener('change', this);\r\n    }\r\n    handleEvent(event) {\r\n        switch (event.type) {\r\n            case 'change':\r\n                if (event.currentTarget === this.clearOutputsToggle) {\r\n                    this.onClearAllOutputsChanged();\r\n                }\r\n                else if (event.currentTarget === this.clearConflictedOutputsToggle) {\r\n                    this.onClearConflictedOutputsChanged();\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    onClearAllOutputsChanged() {\r\n        this.disconnectOutputsToggles();\r\n        try {\r\n            let value = this.clearOutputsToggle.checked;\r\n            for (let cell of this.model.cells) {\r\n                if (util_1.hasEntries(cell.merged.outputs)) {\r\n                    cell.clearOutputs = value;\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this.updateOutputsToggles();\r\n            this.connectOutputsToggles();\r\n        }\r\n    }\r\n    onClearConflictedOutputsChanged() {\r\n        this.disconnectOutputsToggles();\r\n        try {\r\n            let value = this.clearConflictedOutputsToggle.checked;\r\n            for (let cell of this.model.cells) {\r\n                if (util_1.hasEntries(cell.merged.outputs) && cell.outputsConflicted) {\r\n                    cell.clearOutputs = value;\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this.updateOutputsToggles();\r\n            this.connectOutputsToggles();\r\n        }\r\n    }\r\n    updateOutputsToggles() {\r\n        // null = indeterminate\r\n        let all = undefined;\r\n        let conflicted = undefined;\r\n        for (let cell of this.model.cells) {\r\n            if (util_1.hasEntries(cell.merged.outputs)) {\r\n                let current = cell.clearOutputs;\r\n                if (all === null) {\r\n                    // Indeterminate, current value won't change it\r\n                }\r\n                else if (all === undefined) {\r\n                    all = current;\r\n                }\r\n                else if (all !== current) {\r\n                    all = null;\r\n                }\r\n                if (cell.outputsConflicted) {\r\n                    if (conflicted === null) {\r\n                        // Indeterminate, current value won't change it\r\n                    }\r\n                    else if (conflicted === undefined) {\r\n                        conflicted = current;\r\n                    }\r\n                    else if (conflicted !== current) {\r\n                        conflicted = null;\r\n                    }\r\n                }\r\n            }\r\n            if (conflicted === null && all === null) {\r\n                // Both indeterminate, short circuit\r\n                break;\r\n            }\r\n        }\r\n        this.clearOutputsToggle.checked = all === true;\r\n        this.clearOutputsToggle.indeterminate = all === null;\r\n        this.clearConflictedOutputsToggle.checked = conflicted === true;\r\n        this.clearConflictedOutputsToggle.indeterminate = conflicted === null;\r\n        this.clearConflictedOutputsToggle.disabled = conflicted === undefined;\r\n        if (conflicted === undefined) {\r\n            this.clearConflictedOutputsToggle.parentElement.setAttribute('disabled', '');\r\n        }\r\n        else {\r\n            this.clearConflictedOutputsToggle.parentElement.removeAttribute('disabled');\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=notebook.js.map","// Copyright (c) Jupyter Development Team.\r\n// Distributed under the terms of the Modified BSD License.\r\n'use strict';\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.RenderableOutputsMergeView = exports.ReorderableOutputWidget = exports.ReorderableOutputModel = void 0;\r\nconst outputarea_1 = require(\"@jupyterlab/outputarea\");\r\nconst widgets_1 = require(\"@lumino/widgets\");\r\nconst dragpanel_1 = require(\"../../common/dragpanel\");\r\nconst flexpanel_1 = require(\"../../upstreaming/flexpanel\");\r\nconst REORDERABLE_OUTPUT_CLASS = 'jp-Merge-reorder-outputs';\r\nconst REORDERABLE_OUTPUT_DRAGIMAGE_CLASS = 'jp-Merge-dragimage-output';\r\nconst DELETE_DROP_ZONE_CLASS = 'jp-Merge-output-drop-delete';\r\n/**\r\n * An OutputAreaModel which allows for reordering of its\r\n * outputs.\r\n */\r\nclass ReorderableOutputModel extends outputarea_1.OutputAreaModel {\r\n    insert(index, item) {\r\n        // Note: We do not need worry about consolidating outputs\r\n        // like the `add` method in parent class.\r\n        this.list.insert(index, item);\r\n    }\r\n    move(fromIndex, toIndex) {\r\n        // Note: We do not need worry about consolidating outputs\r\n        // like the `add` method in parent class.\r\n        this.list.move(fromIndex, toIndex);\r\n    }\r\n    remove(index) {\r\n        return this.list.remove(index);\r\n    }\r\n}\r\nexports.ReorderableOutputModel = ReorderableOutputModel;\r\n/**\r\n * An OutputArea which supports the reordering\r\n * capabilities of ReorderableOutputModel\r\n */\r\nclass ReorderableOutputWidget extends outputarea_1.OutputArea {\r\n    /**\r\n     * Follow changes on the model state.\r\n     */\r\n    onModelChanged(sender, args) {\r\n        let layout = this.layout;\r\n        switch (args.type) {\r\n            case 'move':\r\n                layout.insertWidget(args.newIndex, layout.widgets[args.oldIndex]);\r\n                break;\r\n            case 'remove':\r\n                layout.removeWidgetAt(args.oldIndex);\r\n                break;\r\n            default:\r\n                return super.onModelChanged(sender, args);\r\n        }\r\n    }\r\n}\r\nexports.ReorderableOutputWidget = ReorderableOutputWidget;\r\nclass DisconnectedDropTarget extends dragpanel_1.DropPanel {\r\n    constructor() {\r\n        super({ acceptDropsFromExternalSource: true });\r\n        this.callback = null;\r\n    }\r\n    findDropTarget(input) {\r\n        if (input === this.node || this.node.contains(input)) {\r\n            return this.node;\r\n        }\r\n        return null;\r\n    }\r\n    processDrop(dropTarget, event) {\r\n        if (this.callback) {\r\n            this.callback(dropTarget, event);\r\n        }\r\n    }\r\n    ;\r\n}\r\n/**\r\n * Widget for showing side by side comparison and picking of merge outputs\r\n */\r\nclass RenderableOutputsMergeView extends dragpanel_1.DragDropPanel {\r\n    /**\r\n     *\r\n     */\r\n    constructor(merged, classes, rendermime, base, remote, local) {\r\n        super();\r\n        this.base = null;\r\n        this.remote = null;\r\n        this.local = null;\r\n        this.addClass(REORDERABLE_OUTPUT_CLASS);\r\n        if (!base !== !remote || !base !== !local) {\r\n            // Assert that either none, or all of base/remote/local are given\r\n            throw new Error('Renderable outputs merge-view either takes only merged output ' +\r\n                'or a full set of four output lists.');\r\n        }\r\n        if (base) {\r\n            this.base = new outputarea_1.OutputAreaModel();\r\n            for (let output of base) {\r\n                this.base.add(output);\r\n            }\r\n            this.remote = new outputarea_1.OutputAreaModel();\r\n            for (let output of remote) {\r\n                this.remote.add(output);\r\n            }\r\n            this.local = new outputarea_1.OutputAreaModel();\r\n            for (let output of local) {\r\n                this.local.add(output);\r\n            }\r\n        }\r\n        this.merged = new ReorderableOutputModel();\r\n        for (let output of merged) {\r\n            this.merged.add(output);\r\n        }\r\n        this.rendermime = rendermime;\r\n        this.panes = [];\r\n        this.init(classes);\r\n    }\r\n    static makeOutputsDraggable(area) {\r\n        let i = area.layout.iter();\r\n        for (let w = i.next(); w !== undefined; w = i.next()) {\r\n            dragpanel_1.DragPanel.makeHandle(w);\r\n        }\r\n    }\r\n    static get deleteDrop() {\r\n        if (!RenderableOutputsMergeView._deleteDrop) {\r\n            let widget = new DisconnectedDropTarget();\r\n            widget.addClass(DELETE_DROP_ZONE_CLASS);\r\n            let icon = document.createElement('i');\r\n            icon.className = 'fa fa-lg fa-trash-o';\r\n            icon.setAttribute('aria-hidden', 'true');\r\n            widget.node.appendChild(icon);\r\n            widget.node.style.position = 'absolute';\r\n            RenderableOutputsMergeView._deleteDrop = widget;\r\n        }\r\n        return RenderableOutputsMergeView._deleteDrop;\r\n    }\r\n    init(classes) {\r\n        let row = new flexpanel_1.FlexPanel({ direction: 'left-to-right', evenSizes: true });\r\n        if (this.local) {\r\n            let leftPane = new outputarea_1.OutputArea({ model: this.local, rendermime: this.rendermime });\r\n            leftPane.addClass(classes[1]);\r\n            row.addWidget(leftPane);\r\n            this.panes.push(leftPane);\r\n        }\r\n        if (this.base) {\r\n            let basePane = new outputarea_1.OutputArea({ model: this.base, rendermime: this.rendermime });\r\n            basePane.addClass(classes[0]);\r\n            row.addWidget(basePane);\r\n            this.panes.push(basePane);\r\n        }\r\n        if (this.remote) {\r\n            let rightPane = new outputarea_1.OutputArea({ model: this.remote, rendermime: this.rendermime });\r\n            rightPane.addClass(classes[2]);\r\n            row.addWidget(rightPane);\r\n            this.panes.push(rightPane);\r\n        }\r\n        if (row.widgets.length > 0) {\r\n            this.addWidget(row);\r\n            row = new flexpanel_1.FlexPanel({ direction: 'left-to-right', evenSizes: true });\r\n        }\r\n        this.mergePane = new ReorderableOutputWidget({ model: this.merged, rendermime: this.rendermime });\r\n        this.mergePane.addClass(classes[3]);\r\n        row.addWidget(this.mergePane);\r\n        this.panes.push(this.mergePane);\r\n        this.addWidget(row);\r\n        for (let p of this.panes) {\r\n            RenderableOutputsMergeView.makeOutputsDraggable(p);\r\n        }\r\n    }\r\n    /**\r\n     * Overrided version to allow drag and drop from source lists to merged list\r\n     */\r\n    findDragTarget(handle) {\r\n        // First check for a drag handle\r\n        if (handle === null) {\r\n            return null;\r\n        }\r\n        // Next find out which pane it belongs to, and which output it belongs to\r\n        for (let pane of this.panes) {\r\n            let child = dragpanel_1.findChild(pane.node, handle);\r\n            if (child !== null) {\r\n                return child;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    getIndexOfChildNode(node, parent) {\r\n        for (let pane of this.panes) {\r\n            let child = dragpanel_1.findChild(pane.node, node);\r\n            if (child !== null) {\r\n                let paneIndex = this.panes.indexOf(pane);\r\n                return [paneIndex, super.getIndexOfChildNode(child, pane.layout)];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Called when something has been dropped in the panel.\r\n     *\r\n     * As only internal moves are supported, we know the type of the keys\r\n     */\r\n    move(from, to) {\r\n        let paneFrom = from[0];\r\n        let paneTo = to[0];\r\n        if (this.panes[paneTo] !== this.mergePane) {\r\n            // Shouldn't happen if drop target code is correct...\r\n            return;\r\n        }\r\n        let outputFrom = from[1];\r\n        let outputTo = to[1];\r\n        let adjustedTo = outputTo;\r\n        if (paneFrom === paneTo) {\r\n            if (outputTo > outputFrom) {\r\n                // Have to adjust index for insertWidget in same instance\r\n                adjustedTo -= 1;\r\n                to[1] = adjustedTo;\r\n            }\r\n            else if (outputFrom === outputTo) {\r\n                // No-op, same position\r\n                return;\r\n            }\r\n        }\r\n        let toModel = this.mergePane.model;\r\n        let fromModel = this.panes[paneFrom].model;\r\n        if (paneTo !== paneFrom) {\r\n            toModel.insert(adjustedTo, fromModel.get(outputFrom));\r\n        }\r\n        else {\r\n            toModel.move(outputFrom, adjustedTo);\r\n        }\r\n        RenderableOutputsMergeView.makeOutputsDraggable(this.mergePane);\r\n    }\r\n    /**\r\n     * Find a drop target from a given node\r\n     *\r\n     * Returns null if no valid drop target was found.\r\n     */\r\n    findDropTarget(node) {\r\n        if (node === this.mergePane.node && this.mergePane.model.length === 0) {\r\n            // If empty, use pane as target\r\n            return this.mergePane.node;\r\n        }\r\n        // Only valid drop target is in merge pane!\r\n        return dragpanel_1.findChild(this.mergePane.node, node);\r\n    }\r\n    processDrop(dropTarget, event) {\r\n        if (dropTarget === RenderableOutputsMergeView.deleteDrop.node) {\r\n            // Simply remove output\r\n            let [paneIdx, outputIdx] = event.mimeData.getData(dragpanel_1.MIME_INDEX);\r\n            if (this.panes[paneIdx] !== this.mergePane) {\r\n                // Shouldn't happen if drop target code is correct...\r\n                return;\r\n            }\r\n            this.mergePane.model.remove(outputIdx);\r\n            // Event cleanup\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            event.dropAction = 'move';\r\n        }\r\n        else if (dropTarget === this.mergePane.node && this.mergePane.model.length === 0) {\r\n            // Dropping on empty merge pane\r\n            let sourceKey = event.mimeData.getData(dragpanel_1.MIME_INDEX);\r\n            this.move(sourceKey, [this.panes.indexOf(this.mergePane), 0]);\r\n            // Event cleanup\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            event.dropAction = 'copy';\r\n        }\r\n        else {\r\n            super.processDrop(dropTarget, event);\r\n        }\r\n    }\r\n    getDragImage(handle) {\r\n        let target = this.findDragTarget(handle);\r\n        if (target) {\r\n            let image = target.cloneNode(true);\r\n            image.style.width = target.offsetWidth.toString() + 'px';\r\n            image.classList.add(REORDERABLE_OUTPUT_DRAGIMAGE_CLASS);\r\n            return image;\r\n        }\r\n        return null;\r\n    }\r\n    startDrag(handle, clientX, clientY) {\r\n        super.startDrag(handle, clientX, clientY);\r\n        // After starting drag, show delete drop-zone ('trash')\r\n        if (dragpanel_1.findChild(this.mergePane.node, handle)) {\r\n            let dd = RenderableOutputsMergeView.deleteDrop;\r\n            dd.callback = this.processDrop.bind(this);\r\n            // Calculate position and size:\r\n            let ourRect = this.mergePane.node.getBoundingClientRect();\r\n            dd.node.style.left = '0';\r\n            dd.node.style.width = (ourRect.left + window.pageXOffset).toString() + 'px';\r\n            dd.node.style.top = (ourRect.top + window.pageYOffset).toString() + 'px';\r\n            dd.node.style.height = ourRect.height.toString() + 'px';\r\n            // Attach to document\r\n            widgets_1.Widget.attach(dd, document.body);\r\n        }\r\n    }\r\n    onDragComplete(action) {\r\n        super.onDragComplete(action);\r\n        // After finishing drag, hide delete drop-zone ('trash')\r\n        if (RenderableOutputsMergeView.deleteDrop.isAttached) {\r\n            widgets_1.Widget.detach(RenderableOutputsMergeView.deleteDrop);\r\n        }\r\n    }\r\n}\r\nexports.RenderableOutputsMergeView = RenderableOutputsMergeView;\r\nRenderableOutputsMergeView._deleteDrop = null;\r\n//# sourceMappingURL=output.js.map"],"sourceRoot":""}