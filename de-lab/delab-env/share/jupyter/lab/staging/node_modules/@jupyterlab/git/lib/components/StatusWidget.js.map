{"version":3,"file":"StatusWidget.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/StatusWidget.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ReactWidget, UseSignal } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { TranslationBundle } from '@jupyterlab/translation';\nimport { Badge } from '@material-ui/core';\nimport React from 'react';\nimport { classes } from 'typestyle';\nimport { Operation, showGitOperationDialog } from '../commandsAndMenu';\nimport { gitIcon } from '../style/icons';\nimport {\n  badgeClass,\n  statusAnimatedIconClass,\n  statusIconClass,\n  currentBranchNameClass\n} from '../style/StatusWidget';\nimport { toolbarButtonClass } from '../style/Toolbar';\nimport { IGitExtension } from '../tokens';\nimport { sleep } from '../utils';\nimport { ActionButton } from './ActionButton';\n\nexport class StatusWidget extends ReactWidget {\n  /**\n   * Returns a status bar widget.\n   * @param trans - The language translator\n   * @returns widget\n   */\n  constructor(model: IGitExtension, trans: TranslationBundle) {\n    super();\n    this._model = model;\n    this._trans = trans;\n\n    this.addClass('jp-git-StatusWidget');\n  }\n\n  /**\n   * Sets the current status.\n   */\n  set status(text: string) {\n    this._status = text;\n    if (!this._locked) {\n      this._animate();\n    }\n  }\n\n  render(): JSX.Element {\n    return (\n      <>\n        <UseSignal\n          signal={this._model.credentialsRequiredChanged}\n          initialArgs={false}\n        >\n          {(_, needsCredentials) => (\n            <Badge\n              className={badgeClass}\n              variant=\"dot\"\n              invisible={!needsCredentials}\n              data-test-id=\"git-credential-badge\"\n            >\n              <ActionButton\n                className={classes(\n                  toolbarButtonClass,\n                  this._status !== 'idle'\n                    ? statusAnimatedIconClass\n                    : statusIconClass\n                )}\n                icon={gitIcon}\n                onClick={\n                  needsCredentials\n                    ? async () => this._showGitOperationDialog()\n                    : undefined\n                }\n                title={\n                  needsCredentials\n                    ? `Git: ${this._trans.__('credentials required')}`\n                    : `Git: ${this._trans.__(this._status)}`\n                }\n              />\n            </Badge>\n          )}\n        </UseSignal>\n\n        <UseSignal signal={this._model.headChanged}>\n          {() =>\n            this._model.currentBranch && (\n              <span className={currentBranchNameClass}>\n                {this._model.currentBranch.name}\n              </span>\n            )\n          }\n        </UseSignal>\n      </>\n    );\n  }\n\n  async _showGitOperationDialog(): Promise<void> {\n    try {\n      await showGitOperationDialog(this._model, Operation.Fetch, this._trans);\n    } catch (error) {\n      console.error('Encountered an error when fetching. Error:', error);\n    }\n  }\n\n  /**\n   * Locks the status widget to prevent updates.\n   *\n   * ## Notes\n   *\n   * -   This is used to throttle updates in order to prevent \"flashing\" messages.\n   */\n  async _animate(): Promise<void> {\n    this._locked = true;\n    this.update();\n    await sleep(500);\n    this._locked = false;\n    this.update();\n  }\n\n  /**\n   * Boolean indicating whether the status widget is accepting updates.\n   */\n  private _locked = false;\n\n  /**\n   * Status string.\n   */\n  private _status = '';\n\n  private _model: IGitExtension;\n  private _trans: TranslationBundle;\n}\n\nexport function addStatusBarWidget(\n  statusBar: IStatusBar,\n  model: IGitExtension,\n  settings: ISettingRegistry.ISettings,\n  trans: TranslationBundle\n): void {\n  // Add a status bar widget to provide Git status updates:\n  const statusWidget = new StatusWidget(model, trans);\n  statusBar.registerStatusItem('git-status', {\n    align: 'left',\n    item: statusWidget,\n    isActive: Private.isStatusWidgetActive(settings),\n    activeStateChanged: settings && settings.changed\n  });\n\n  const callback = Private.createEventCallback(statusWidget);\n  model.taskChanged.connect(callback);\n\n  statusWidget.disposed.connect(() => {\n    model.taskChanged.disconnect(callback);\n  });\n}\n/* eslint-disable no-inner-declarations */\nnamespace Private {\n  /**\n   * Returns a callback for updating a status widget upon receiving model events.\n   *\n   * @private\n   * @param widget - status widget\n   * @returns callback\n   */\n  export function createEventCallback(\n    widget: StatusWidget\n  ): (model: IGitExtension, event: string) => void {\n    return onEvent;\n\n    /**\n     * Callback invoked upon a model event.\n     *\n     * @private\n     * @param model - extension model\n     * @param event - event name\n     */\n    function onEvent(model: IGitExtension, event: string) {\n      let status;\n      switch (event) {\n        case 'empty':\n          status = 'idle';\n          break;\n        case 'git:checkout':\n          status = 'checking out…';\n          break;\n        case 'git:clone':\n          status = 'cloning repository…';\n          break;\n        case 'git:commit:create':\n          status = 'committing changes…';\n          break;\n        case 'git:commit:revert':\n          status = 'reverting changes…';\n          break;\n        case 'git:init':\n          status = 'initializing repository…';\n          break;\n        case 'git:merge':\n          status = 'merging…';\n          break;\n        case 'git:pull':\n          status = 'pulling changes…';\n          break;\n        case 'git:pushing':\n          status = 'pushing changes…';\n          break;\n        case 'git:refresh':\n          status = 'refreshing…';\n          break;\n        case 'git:reset:changes':\n          status = 'resetting changes…';\n          break;\n        case 'git:reset:hard':\n          status = 'discarding changes…';\n          break;\n        default:\n          if (/git:add:files/.test(event)) {\n            status = 'adding files…';\n          } else {\n            status = 'working…';\n          }\n          break;\n      }\n      widget.status = status;\n    }\n  }\n\n  /**\n   * Returns a callback which returns a boolean indicating whether the extension should display status updates.\n   *\n   * @private\n   * @param settings - extension settings\n   * @returns callback\n   */\n  export function isStatusWidgetActive(\n    settings?: ISettingRegistry.ISettings\n  ): () => boolean {\n    return settings ? isActive : inactive;\n\n    /**\n     * Returns a boolean indicating that the extension should not display status updates.\n     *\n     * @private\n     * @returns boolean indicating that the extension should not display status updates\n     */\n    function inactive(): boolean {\n      return false;\n    }\n\n    /**\n     * Returns a boolean indicating whether the extension should display status updates.\n     *\n     * @private\n     * @returns boolean indicating whether the extension should display status updates\n     */\n    function isActive(): boolean {\n      return settings.composite.displayStatus as boolean;\n    }\n  }\n}\n/* eslint-enable no-inner-declarations */\n"]}