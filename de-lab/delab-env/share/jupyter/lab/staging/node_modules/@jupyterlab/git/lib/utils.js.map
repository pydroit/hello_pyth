{"version":3,"file":"utils.js","sourceRoot":"./@jupyterlab/git/src/","sources":["utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAGhD,OAAO,EAAE,iBAAiB,EAAO,MAAM,UAAU,CAAC;AAElD,mCAAmC;AACnC,MAAM,UAAU,eAAe,CAAC,IAAY;IAC1C,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;QACjC,OAAO,IAAI,CAAC;KACb;SAAM;QACL,OAAO,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC/B;AACH,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,CAAS,EAAE,CAAS;;IAC9C;;;OAGG;IACH,MAAM,oBAAoB,GAA6B;QACrD,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;QACb,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;QACb,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;KACnB,CAAC;IAEF,mCAAmC;IACnC,IAAI,OAAC,oBAAoB,CAAC,CAAC,CAAC,mCAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;QAC/C,OAAO,UAAU,CAAC;KACnB;IAED,uBAAuB;IACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,EAAE;QAC1B,OAAO,WAAW,CAAC;KACpB;SAAM;QACL,oBAAoB;QACpB,IAAI,CAAC,KAAK,GAAG,EAAE;YACb,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,CAAC;SAClD;QACD,kCAAkC;QAClC,IAAI,CAAC,KAAK,GAAG,EAAE;YACb,OAAO,UAAU,CAAC;SACnB;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,KAAK,CAAC,EAAU;IAC9B,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AACzD,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,MAAM,YAAY,GACvB,CAAC,QAAyB,EAAE,EAAE;AAC9B;;;;;;;GAOG;AACH,CAAC,MAA6B,EAAE,cAAsC,EAAE,EAAE;AAC1E;;;;;;;GAOG;AACH,CAAC,QAAgB,EAAE,MAAe,EAAE,gBAAyB,EAAE,EAAE;AACjE;;;;GAIG;AACH,KAAK,EAAE,KAAkD,EAAiB,EAAE;;IAC1E,qDAAqD;IACrD,KAAK,CAAC,eAAe,EAAE,CAAC;IAExB,IAAI,MAAM,EAAE;QACV,IAAI;YACF,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC,WAAW,EAAE;gBAC9C,KAAK,EAAE;oBACL;wBACE,QAAQ;wBACR,gBAAgB;wBAChB,MAAM;wBACN,OAAO,EAAE;4BACP,WAAW,QAAE,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,MAAM,mCAAI,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;4BAC5D,UAAU,EAAE,MAAM,CAAC,MAAM;yBAC1B;qBACF;iBACF;aACsC,CAAC,CAAC;SAC5C;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,CAAC,KAAK,CAAC,gCAAgC,QAAQ,MAAM,GAAG,EAAE,CAAC,CAAC;SACpE;KACF;AACH,CAAC,CAAC","sourcesContent":["import { PathExt } from '@jupyterlab/coreutils';\nimport { CommandRegistry } from '@lumino/commands';\nimport { CommandArguments } from './commandsAndMenu';\nimport { ContextCommandIDs, Git } from './tokens';\n\n/** Get the filename from a path */\nexport function extractFilename(path: string): string {\n  if (path[path.length - 1] === '/') {\n    return path;\n  } else {\n    return PathExt.basename(path);\n  }\n}\n\nexport function decodeStage(x: string, y: string): Git.Status {\n  /**\n   * All combinations of statuses for merge conflicts\n   * @see https://git-scm.com/docs/git-status#_short_format\n   */\n  const unmergedCombinations: Record<string, string[]> = {\n    D: ['D', 'U'],\n    A: ['U', 'A'],\n    U: ['D', 'A', 'U']\n  };\n\n  // If the file has a merge conflict\n  if ((unmergedCombinations[x] ?? []).includes(y)) {\n    return 'unmerged';\n  }\n\n  // If file is untracked\n  if (x === '?' && y === '?') {\n    return 'untracked';\n  } else {\n    // If file is staged\n    if (x !== ' ') {\n      return y !== ' ' ? 'partially-staged' : 'staged';\n    }\n    // If file is unstaged but tracked\n    if (y !== ' ') {\n      return 'unstaged';\n    }\n  }\n\n  return null;\n}\n\n/**\n * Returns a promise which resolves after a specified duration.\n *\n * @param ms - duration (in milliseconds)\n * @returns a promise\n */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * A callback function to display a file diff between two commits.\n * @param commands the command registry.\n * @returns a callback function to display a file diff.\n */\nexport const openFileDiff =\n  (commands: CommandRegistry) =>\n  /**\n   * A callback function to display a file diff between two commits.\n   *\n   * @param commit Commit data.\n   * @param previousCommit Previous commit data to display the diff against. If not specified, the diff will be against the preceding commit.\n   *\n   * @returns A callback function.\n   */\n  (commit: Git.ISingleCommitInfo, previousCommit?: Git.ISingleCommitInfo) =>\n  /**\n   * Returns a callback to be invoked on click to display a file diff.\n   *\n   * @param filePath file path.\n   * @param isText indicates whether the file supports displaying a diff.\n   * @param previousFilePath when file has been relocated.\n   * @returns callback.\n   */\n  (filePath: string, isText: boolean, previousFilePath?: string) =>\n  /**\n   * Callback invoked upon clicking to display a file diff.\n   *\n   * @param event - event object\n   */\n  async (event: React.MouseEvent<HTMLLIElement, MouseEvent>): Promise<void> => {\n    // Prevent the commit component from being collapsed:\n    event.stopPropagation();\n\n    if (isText) {\n      try {\n        commands.execute(ContextCommandIDs.gitFileDiff, {\n          files: [\n            {\n              filePath,\n              previousFilePath,\n              isText,\n              context: {\n                previousRef: previousCommit?.commit ?? commit.pre_commits[0], // not sure\n                currentRef: commit.commit\n              }\n            }\n          ]\n        } as CommandArguments.IGitFileDiff as any);\n      } catch (err) {\n        console.error(`Failed to open diff view for ${filePath}.\\n${err}`);\n      }\n    }\n  };\n"]}