import { caretDownIcon, caretRightIcon, closeIcon } from '@jupyterlab/ui-components';
import * as React from 'react';
import { commitComparisonBoxStyle, commitComparisonDiffStyle } from '../style/CommitComparisonBox';
import { changeStageButtonStyle, sectionAreaStyle, sectionHeaderLabelStyle } from '../style/GitStageStyle';
import { Level } from '../tokens';
import { ActionButton } from './ActionButton';
import { CommitDiff } from './CommitDiff';
/**
 * A component which displays a comparison between two commits.
 */
export function CommitComparisonBox(props) {
    const [collapsed, setCollapsed] = React.useState(false);
    const [files, setFiles] = React.useState([]);
    const { referenceCommit, challengerCommit, model } = props;
    const hasDiff = referenceCommit !== null && challengerCommit !== null;
    const totalInsertions = files.reduce((acc, file) => {
        const insertions = Number.parseInt(file.insertion, 10);
        return acc + (Number.isNaN(insertions) ? 0 : insertions);
    }, 0);
    const totalDeletions = files.reduce((acc, file) => {
        const deletions = Number.parseInt(file.deletion, 10);
        return acc + (Number.isNaN(deletions) ? 0 : deletions);
    }, 0);
    React.useEffect(() => {
        (async () => {
            if (referenceCommit === null || challengerCommit === null) {
                setFiles([]);
                return;
            }
            let diffResult = null;
            try {
                diffResult = await model.diff(referenceCommit.commit, challengerCommit.commit);
                if (diffResult.code !== 0) {
                    throw new Error(diffResult.message);
                }
            }
            catch (err) {
                const msg = `Failed to get the diff for ${referenceCommit.commit} and ${challengerCommit.commit}.`;
                console.error(msg, err);
                props.logger.log({
                    level: Level.ERROR,
                    message: msg,
                    error: err
                });
                return;
            }
            if (diffResult) {
                setFiles(diffResult.result.map(changedFile => {
                    const pathParts = changedFile.filename.split('/');
                    const fileName = pathParts[pathParts.length - 1];
                    const filePath = changedFile.filename;
                    return {
                        deletion: changedFile.deletions,
                        insertion: changedFile.insertions,
                        is_binary: changedFile.deletions === '-' || changedFile.insertions === '-',
                        modified_file_name: fileName,
                        modified_file_path: filePath,
                        type: changedFile.filetype
                    };
                }));
            }
            else {
                setFiles([]);
            }
        })();
    }, [referenceCommit, challengerCommit]);
    return (React.createElement("div", { className: commitComparisonBoxStyle },
        React.createElement("div", { className: sectionAreaStyle, onClick: () => setCollapsed(!collapsed) },
            React.createElement("button", { className: changeStageButtonStyle }, collapsed ? React.createElement(caretRightIcon.react, null) : React.createElement(caretDownIcon.react, null)),
            React.createElement("span", { className: sectionHeaderLabelStyle }, props.header),
            React.createElement(ActionButton, { title: props.trans.__('Close'), icon: closeIcon, onClick: (event) => {
                    props.onClose(event);
                } })),
        !collapsed &&
            (files.length ? (React.createElement(CommitDiff, { className: commitComparisonDiffStyle, deletions: `${totalDeletions}`, files: files, insertions: `${totalInsertions}`, numFiles: `${files.length}`, onOpenDiff: props.onOpenDiff, trans: props.trans })) : (React.createElement("p", null, hasDiff
                ? props.trans.__('No changes')
                : props.trans.__('No challenger commit selected.'))))));
}
//# sourceMappingURL=CommitComparisonBox.js.map