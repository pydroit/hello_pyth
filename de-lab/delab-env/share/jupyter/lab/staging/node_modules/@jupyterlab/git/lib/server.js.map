{"version":3,"file":"server.js","sourceRoot":"./@jupyterlab/git/src/","sources":["server.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AAC/C,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AACxD,OAAO,EAAE,GAAG,EAAE,MAAM,UAAU,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AACnC,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAGpC;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,KAAwB;IAExB,IAAI;QACF,MAAM,QAAQ,GAAG,UAAU,GAAG,MAAM,CAAC,mBAAmB,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QACtE,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAsB,QAAQ,EAAE,KAAK,CAAC,CAAC;QACxE,OAAO,QAAQ,CAAC;KACjB;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,KAAK,YAAY,GAAG,CAAC,gBAAgB,EAAE;YACzC,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;YAChC,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;gBAC3B,MAAM,OAAO,GAAG,KAAK,CAAC,EAAE,CACtB,4EAA4E;oBAC1E,oFAAoF;oBACpF,wFAAwF,CAC3F,CAAC;gBACF,MAAM,IAAI,gBAAgB,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;aAC7D;iBAAM;gBACL,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;gBAC9B,OAAO,CAAC,KAAK,CAAC,6CAA6C,EAAE,OAAO,CAAC,CAAC;gBACtE,MAAM,IAAI,gBAAgB,CAAC,aAAa,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;aAC7D;SACF;aAAM;YACL,MAAM,KAAK,CAAC;SACb;KACF;AACH,CAAC","sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { Git } from './tokens';\nimport { requestAPI } from './git';\nimport { version } from './version';\nimport { TranslationBundle } from '@jupyterlab/translation';\n\n/**\n * Obtain the server settings or provide meaningful error message for the end user\n *\n * @returns The server settings\n *\n * @throws {ServerConnection.ResponseError} If the response was not ok\n * @throws {ServerConnection.NetworkError} If the request failed to reach the server\n */\nexport async function getServerSettings(\n  trans: TranslationBundle\n): Promise<Git.IServerSettings> {\n  try {\n    const endpoint = 'settings' + URLExt.objectToQueryString({ version });\n    const settings = await requestAPI<Git.IServerSettings>(endpoint, 'GET');\n    return settings;\n  } catch (error) {\n    if (error instanceof Git.GitResponseError) {\n      const response = error.response;\n      if (response.status === 404) {\n        const message = trans.__(\n          'Git server extension is unavailable. Please ensure you have installed the ' +\n            'JupyterLab Git server extension by running: pip install --upgrade jupyterlab-git. ' +\n            'To confirm that the server extension is installed, run: jupyter server extension list.'\n        );\n        throw new ServerConnection.ResponseError(response, message);\n      } else {\n        const message = error.message;\n        console.error('Failed to get the server extension settings', message);\n        throw new ServerConnection.ResponseError(response, message);\n      }\n    } else {\n      throw error;\n    }\n  }\n}\n"]}