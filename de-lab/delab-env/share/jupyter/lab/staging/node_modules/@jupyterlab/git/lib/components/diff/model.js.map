{"version":3,"file":"model.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/diff/model.ts"],"names":[],"mappings":"AACA,OAAO,EAAW,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAGpD;;GAEG;AACH,MAAM,OAAO,SAAS;IACpB,YAAY,KAAuD;QAyH3D,gBAAW,GAAG,KAAK,CAAC;QAxH1B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,cAAc,CAAC;QAC5C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;QAExB,IAAI,CAAC,QAAQ,GAAG,IAAI,MAAM,CAAmC,IAAI,CAAC,CAAC;IACrE,CAAC;IAED;;;;;;OAMG;IACH,IAAI,OAAO;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;OAEG;IACK,iBAAiB,CACvB,CAAoB,EACpB,CAAoB;QAEpB,OAAO,CACL,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,QAAQ,KAAK,CAAC,CAAC,QAAQ,CAC1E,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IACD,IAAI,UAAU,CAAC,CAAoB;QACjC,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAE/D,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;YACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;SAC5C;IACH,CAAC;IAED;;;;OAIG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IACD,IAAI,SAAS,CAAC,CAAoB;QAChC,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAE9D,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;SAC3C;IACH,CAAC;IAED;;;;OAIG;IACH,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED;;;;;OAKG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC;IAClC,CAAC;IAED;;OAEG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED;;OAEG;IACH,OAAO;QACL,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,OAAO;SACR;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;CAUF","sourcesContent":["import { IDisposable } from '@lumino/disposable';\nimport { ISignal, Signal } from '@lumino/signaling';\nimport { Git } from '../../tokens';\n\n/**\n * Base DiffModel class\n */\nexport class DiffModel implements IDisposable, Git.Diff.IModel {\n  constructor(props: Omit<Git.Diff.IModel, 'changed' | 'hasConflict'>) {\n    this._challenger = props.challenger;\n    this._filename = props.filename;\n    this._reference = props.reference;\n    this._repositoryPath = props.repositoryPath;\n    this._base = props.base;\n\n    this._changed = new Signal<DiffModel, Git.Diff.IModelChange>(this);\n  }\n\n  /**\n   * A signal emitted when the model changed.\n   *\n   * Note: The signal is emitted for any set on reference or\n   * on challenger change except for the content; i.e. the content\n   * is not fetch to check if it changed.\n   */\n  get changed(): ISignal<DiffModel, Git.Diff.IModelChange> {\n    return this._changed;\n  }\n\n  /**\n   * Helper to compare diff contents.\n   */\n  private _didContentChange(\n    a: Git.Diff.IContent,\n    b: Git.Diff.IContent\n  ): boolean {\n    return (\n      a.label !== b.label || a.source !== b.source || a.updateAt !== b.updateAt\n    );\n  }\n\n  /**\n   * Challenger description\n   */\n  get challenger(): Git.Diff.IContent {\n    return this._challenger;\n  }\n  set challenger(v: Git.Diff.IContent) {\n    const emitSignal = this._didContentChange(this._challenger, v);\n\n    if (emitSignal) {\n      this._challenger = v;\n      this._changed.emit({ type: 'challenger' });\n    }\n  }\n\n  /**\n   * File to be compared\n   *\n   * Note: This path is relative to the repository path\n   */\n  get filename(): string {\n    return this._filename;\n  }\n\n  /**\n   * Reference description\n   */\n  get reference(): Git.Diff.IContent {\n    return this._reference;\n  }\n  set reference(v: Git.Diff.IContent) {\n    const emitSignal = this._didContentChange(this._reference, v);\n\n    if (emitSignal) {\n      this._reference = v;\n      this._changed.emit({ type: 'reference' });\n    }\n  }\n\n  /**\n   * Git repository path\n   *\n   * Note: This path is relative to the server root\n   */\n  get repositoryPath(): string | undefined {\n    return this._repositoryPath;\n  }\n\n  /**\n   * Base description\n   *\n   * Note: The base diff content is only provided during\n   * merge conflicts (three-way diff).\n   */\n  get base(): Git.Diff.IContent | undefined {\n    return this._base;\n  }\n\n  /**\n   * Helper to check if the file has conflicts.\n   */\n  get hasConflict(): boolean {\n    return this._base !== undefined;\n  }\n\n  /**\n   * Boolean indicating whether the model has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the model.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    Signal.clearData(this);\n  }\n\n  protected _reference: Git.Diff.IContent;\n  protected _challenger: Git.Diff.IContent;\n  protected _base?: Git.Diff.IContent;\n\n  private _changed: Signal<DiffModel, Git.Diff.IModelChange>;\n  private _isDisposed = false;\n  private _filename: string;\n  private _repositoryPath: string;\n}\n"]}