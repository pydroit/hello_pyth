{"version":3,"file":"AdvancedPushForm.js","sourceRoot":"./@jupyterlab/git/src/","sources":["widgets/AdvancedPushForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Dialog } from '@jupyterlab/apputils';\nimport { Widget } from '@lumino/widgets';\nimport { GitExtension } from '../model';\nimport { TranslationBundle } from '@jupyterlab/translation';\n\n/**\n * Interface for returned value from dialog box\n */\nexport interface IAdvancedPushFormValue {\n  /**\n   * The name of the remote repository to push to.\n   */\n  remoteName: string;\n  /**\n   * Whether to use force push.\n   */\n  force: boolean;\n}\n\n/**\n * A widget form with advanced push options,\n * can be used as a Dialog body.\n */\nexport class AdvancedPushForm\n  extends Widget\n  implements Dialog.IBodyWidget<IAdvancedPushFormValue>\n{\n  constructor(trans: TranslationBundle, model: GitExtension) {\n    super();\n    this._trans = trans;\n    this._model = model;\n    this._radioButtons = [];\n    this.node.appendChild(this.createBody());\n    this.addRemoteOptions();\n  }\n\n  private createBody(): HTMLElement {\n    const mainNode = document.createElement('div');\n\n    // Instructional text\n    const text = document.createElement('div');\n    text.className = 'jp-remote-text';\n    text.textContent = this._trans.__('Choose a remote to push to.');\n\n    // List of remotes\n    const remoteOptionsContainer = document.createElement('div');\n    remoteOptionsContainer.className = 'jp-remote-options-wrapper';\n    const loadingMessage = document.createElement('div');\n    loadingMessage.textContent = this._trans.__(\n      'Loading remote repositories...'\n    );\n    remoteOptionsContainer.appendChild(loadingMessage);\n    this._remoteOptionsContainer = remoteOptionsContainer;\n\n    // Force option\n    const forceCheckboxContainer = document.createElement('label');\n    forceCheckboxContainer.className = 'jp-force-box-container';\n\n    this._forceCheckbox = document.createElement('input');\n    this._forceCheckbox.type = 'checkbox';\n    this._forceCheckbox.checked = false;\n\n    const label = document.createElement('span');\n    label.textContent = this._trans.__('Force Push');\n\n    forceCheckboxContainer.appendChild(this._forceCheckbox);\n    forceCheckboxContainer.appendChild(label);\n\n    mainNode.appendChild(text);\n    mainNode.appendChild(remoteOptionsContainer);\n    mainNode.appendChild(forceCheckboxContainer);\n\n    return mainNode;\n  }\n\n  private async addRemoteOptions(): Promise<void> {\n    const remotes = await this._model.getRemotes();\n    this._remoteOptionsContainer.innerHTML = '';\n    if (remotes.length > 0) {\n      remotes.forEach(remote => {\n        const buttonWrapper = document.createElement('div');\n        buttonWrapper.className = 'jp-button-wrapper';\n        const radioButton = document.createElement('input');\n        radioButton.type = 'radio';\n        radioButton.id = remote.name;\n        radioButton.value = remote.name;\n        radioButton.name = 'option';\n        radioButton.className = 'jp-option';\n        if (remote.name === 'origin') {\n          radioButton.checked = true;\n        }\n        this._radioButtons.push(radioButton);\n\n        const label = document.createElement('label');\n        label.htmlFor = remote.name;\n        label.textContent = `${remote.name}: ${remote.url}`;\n\n        buttonWrapper.appendChild(radioButton);\n        buttonWrapper.appendChild(label);\n        this._remoteOptionsContainer.appendChild(buttonWrapper);\n      });\n    } else {\n      const noRemoteMsg = document.createElement('div');\n      noRemoteMsg.textContent = this._trans.__(\n        'This repository has no known remotes.'\n      );\n      this._remoteOptionsContainer.appendChild(noRemoteMsg);\n    }\n  }\n\n  getValue(): IAdvancedPushFormValue {\n    return {\n      remoteName: this._radioButtons.find(rb => rb.checked)?.value,\n      force: this._forceCheckbox.checked\n    };\n  }\n\n  private _trans: TranslationBundle;\n  private _model: GitExtension;\n  private _remoteOptionsContainer: HTMLElement;\n  private _radioButtons: HTMLInputElement[];\n  private _forceCheckbox: HTMLInputElement;\n}\n"]}