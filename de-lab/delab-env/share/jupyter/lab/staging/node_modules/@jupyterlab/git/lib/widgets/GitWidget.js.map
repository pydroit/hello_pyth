{"version":3,"file":"GitWidget.js","sourceRoot":"./@jupyterlab/git/src/","sources":["widgets/GitWidget.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAO9D,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAC1D,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAClD,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAClD,OAAO,EAAE,aAAa,EAAE,MAAM,WAAW,CAAC;AAE1C,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AACzD,OAAO,EAAe,KAAK,EAAE,MAAM,WAAW,CAAC;AAE/C;;GAEG;AACH,MAAM,OAAO,SAAU,SAAQ,WAAW;IACxC,YACE,KAAmB,EACnB,QAAoC,EACpC,QAAyB,EACzB,gBAAkC,EAClC,KAAwB,EACxB,OAAyB;QAEzB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,iBAAiB,CAAC;QACjC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QAE9B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,yDAAyD;QACzD,KAAK,CAAC,uBAAuB,GAAG,GAAY,EAAE,CAC5C,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC;IAClE,CAAC;IAED;;;;;OAKG;IACH,YAAY,CAAC,GAAY;QACvB,+CAA+C;QAC/C,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAClC,OAAO,CAAC,KAAK,CAAC,kDAAkD,EAAE,KAAK,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED;;;;;OAKG;IACH,MAAM;QACJ,OAAO,CACL,oBAAC,cAAc,IAAC,WAAW;YACzB,oBAAC,aAAa,CAAC,QAAQ,QACpB,MAAM,CAAC,EAAE,CAAC,CACT,oBAAC,KAAK,CAAC,QAAQ;gBACb,oBAAC,QAAQ,IACP,QAAQ,EAAE,IAAI,CAAC,SAAS,EACxB,WAAW,EAAE,IAAI,CAAC,iBAAiB,EACnC,MAAM,EAAE,MAAM,EACd,KAAK,EAAE,IAAI,CAAC,MAAM,EAClB,QAAQ,EAAE,IAAI,CAAC,SAAS,EACxB,KAAK,EAAE,IAAI,CAAC,MAAM,GAClB;gBACF,oBAAC,SAAS,IACR,MAAM,EAAE,MAAM,CAAC,MAAM,EACrB,WAAW,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,IAAI,EAAiB,IAE7D,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CACf,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,EAAC,CAAC,CAAC,CACb,oBAAC,QAAQ,IACP,GAAG,EAAE,GAAG,EACR,QAAQ,EAAE,IAAI,CAAC,SAAS,EACxB,KAAK,EAAE,IAAI,CAAC,MAAM,GAClB,CACH,CAAC,CAAC,CAAC,IAAI,CAEA,CACG,CAClB,CACsB,CACV,CAClB,CAAC;IACJ,CAAC;CAOF","sourcesContent":["import { ReactWidget, UseSignal } from '@jupyterlab/apputils';\nimport { FileBrowserModel } from '@jupyterlab/filebrowser';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { TranslationBundle } from '@jupyterlab/translation';\nimport { CommandRegistry } from '@lumino/commands';\nimport { Message } from '@lumino/messaging';\nimport { Widget } from '@lumino/widgets';\nimport { StylesProvider } from '@material-ui/core/styles';\nimport * as React from 'react';\nimport { Feedback } from '../components/Feedback';\nimport { GitPanel } from '../components/GitPanel';\nimport { LoggerContext } from '../logger';\nimport { GitExtension } from '../model';\nimport { gitWidgetStyle } from '../style/GitWidgetStyle';\nimport { ILogMessage, Level } from '../tokens';\n\n/**\n * A class that exposes the git plugin Widget.\n */\nexport class GitWidget extends ReactWidget {\n  constructor(\n    model: GitExtension,\n    settings: ISettingRegistry.ISettings,\n    commands: CommandRegistry,\n    fileBrowserModel: FileBrowserModel,\n    trans: TranslationBundle,\n    options?: Widget.IOptions\n  ) {\n    super(options);\n    this.node.id = 'GitSession-root';\n    this.addClass(gitWidgetStyle);\n\n    this._trans = trans;\n    this._commands = commands;\n    this._fileBrowserModel = fileBrowserModel;\n    this._model = model;\n    this._settings = settings;\n\n    // Add refresh standby condition if this widget is hidden\n    model.refreshStandbyCondition = (): boolean =>\n      !this._settings.composite['refreshIfHidden'] && this.isHidden;\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  onBeforeShow(msg: Message): void {\n    // Trigger refresh when the widget is displayed\n    this._model.refresh().catch(error => {\n      console.error('Fail to refresh model when displaying GitWidget.', error);\n    });\n    super.onBeforeShow(msg);\n  }\n\n  /**\n   * Render the content of this widget using the virtual DOM.\n   *\n   * This method will be called anytime the widget needs to be rendered, which\n   * includes layout triggered rendering.\n   */\n  render(): JSX.Element {\n    return (\n      <StylesProvider injectFirst>\n        <LoggerContext.Consumer>\n          {logger => (\n            <React.Fragment>\n              <GitPanel\n                commands={this._commands}\n                filebrowser={this._fileBrowserModel}\n                logger={logger}\n                model={this._model}\n                settings={this._settings}\n                trans={this._trans}\n              />\n              <UseSignal\n                signal={logger.signal}\n                initialArgs={{ message: '', level: Level.INFO } as ILogMessage}\n              >\n                {(sender, log) =>\n                  log?.message ? (\n                    <Feedback\n                      log={log}\n                      settings={this._settings}\n                      trans={this._trans}\n                    />\n                  ) : null\n                }\n              </UseSignal>\n            </React.Fragment>\n          )}\n        </LoggerContext.Consumer>\n      </StylesProvider>\n    );\n  }\n\n  private _commands: CommandRegistry;\n  private _fileBrowserModel: FileBrowserModel;\n  private _model: GitExtension;\n  private _settings: ISettingRegistry.ISettings;\n  private _trans: TranslationBundle;\n}\n"]}