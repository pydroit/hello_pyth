{"version":3,"file":"model.js","sourceRoot":"./@jupyterlab/git/src/","sources":["model.ts"],"names":[],"mappings":"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","sourcesContent":["import { IChangedArgs, PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { JSONExt, JSONObject } from '@lumino/coreutils';\nimport { Poll } from '@lumino/polling';\nimport { ISignal, Signal } from '@lumino/signaling';\nimport { AUTH_ERROR_MESSAGES, requestAPI } from './git';\nimport { TaskHandler } from './taskhandler';\nimport { Git, IGitExtension } from './tokens';\nimport { decodeStage } from './utils';\n\n// Default refresh interval (in milliseconds) for polling the current Git status (NOTE: this value should be the same value as in the plugin settings schema):\nconst DEFAULT_REFRESH_INTERVAL = 3000; // ms\n// Available diff providers\nconst DIFF_PROVIDERS: {\n  [key: string]: { name: string; callback: Git.Diff.ICallback };\n} = {};\n\n/**\n * Get the diff provider for a filename\n * @param filename Filename to look for\n * @returns The diff provider callback or undefined\n */\nexport function getDiffProvider(\n  filename: string\n): Git.Diff.ICallback | undefined {\n  return DIFF_PROVIDERS[PathExt.extname(filename)?.toLocaleLowerCase()]\n    ?.callback;\n}\n\n/**\n * Class for creating a model for retrieving info from, and interacting with, a remote Git repository.\n */\nexport class GitExtension implements IGitExtension {\n  /**\n   * Returns an extension model.\n   *\n   * @param app - frontend application\n   * @param settings - plugin settings\n   * @returns extension model\n   */\n  constructor(\n    docmanager: IDocumentManager = null,\n    docRegistry: DocumentRegistry = null,\n    settings?: ISettingRegistry.ISettings\n  ) {\n    this._docmanager = docmanager;\n    this._docRegistry = docRegistry;\n    this._settings = settings || null;\n    this._taskHandler = new TaskHandler(this);\n\n    // Initialize repository status\n    this._clearStatus();\n\n    const interval = DEFAULT_REFRESH_INTERVAL;\n    this._statusPoll = new Poll({\n      factory: this._refreshModel,\n      frequency: {\n        interval,\n        backoff: true,\n        max: 300 * 1000\n      },\n      standby: this._refreshStandby\n    });\n    this._fetchPoll = new Poll({\n      auto: false,\n      factory: this._fetchRemotes,\n      frequency: {\n        interval,\n        backoff: true,\n        max: 300 * 1000\n      },\n      standby: this._refreshStandby\n    });\n\n    if (settings) {\n      settings.changed.connect(this._onSettingsChange, this);\n      this._onSettingsChange(settings);\n    }\n  }\n\n  /**\n   * Branch list for the current repository.\n   */\n  get branches(): Git.IBranch[] {\n    return this._branches;\n  }\n\n  /**\n   * The current repository branch.\n   */\n  get currentBranch(): Git.IBranch {\n    return this._currentBranch;\n  }\n\n  /**\n   * Boolean indicating whether the model has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Boolean indicating whether the model is ready.\n   */\n  get isReady(): boolean {\n    return this._pendingReadyPromise === 0;\n  }\n\n  /**\n   * Promise which fulfills when the model is ready.\n   */\n  get ready(): Promise<void> {\n    return this._readyPromise;\n  }\n\n  /**\n   * Git repository path.\n   *\n   * ## Notes\n   *\n   * -   This is the full path of the top-level folder.\n   * -   The return value is `null` if a repository path is not defined.\n   */\n  get pathRepository(): string | null {\n    return this._pathRepository;\n  }\n\n  set pathRepository(v: string | null) {\n    const change: IChangedArgs<string> = {\n      name: 'pathRepository',\n      newValue: null,\n      oldValue: this._pathRepository\n    };\n    if (v === null) {\n      this._pendingReadyPromise += 1;\n      this._readyPromise.then(() => {\n        this._pathRepository = null;\n        this._pendingReadyPromise -= 1;\n\n        if (change.newValue !== change.oldValue) {\n          this.refresh().then(() => this._repositoryChanged.emit(change));\n        }\n      });\n    } else {\n      const currentReady = this._readyPromise;\n      this._pendingReadyPromise += 1;\n      const currentFolder = v;\n      this._readyPromise = Promise.all([\n        currentReady,\n        this.showPrefix(currentFolder)\n      ])\n        .then(([_, path]) => {\n          if (path !== null) {\n            // Remove relative path to get the Git repository root path\n            path = currentFolder.slice(\n              0,\n              Math.max(0, currentFolder.length - path.length)\n            );\n          }\n          change.newValue = this._pathRepository = path;\n\n          if (change.newValue !== change.oldValue) {\n            this.refresh().then(() => this._repositoryChanged.emit(change));\n          }\n          this._pendingReadyPromise -= 1;\n        })\n        .catch(reason => {\n          this._pendingReadyPromise -= 1;\n          console.error(\n            `Fail to find Git top level for path ${currentFolder}.\\n${reason}`\n          );\n        });\n    }\n  }\n\n  /**\n   * Custom model refresh standby condition\n   */\n  get refreshStandbyCondition(): () => boolean {\n    return this._standbyCondition;\n  }\n  set refreshStandbyCondition(v: () => boolean) {\n    this._standbyCondition = v;\n  }\n\n  /**\n   * Selected file for single file history\n   */\n  get selectedHistoryFile(): Git.IStatusFile | null {\n    return this._selectedHistoryFile;\n  }\n  set selectedHistoryFile(file: Git.IStatusFile | null) {\n    if (this._selectedHistoryFile !== file) {\n      this._selectedHistoryFile = file;\n      this._selectedHistoryFileChanged.emit(file);\n    }\n  }\n\n  /**\n   * Git repository status\n   */\n  get status(): Git.IStatus {\n    return this._status;\n  }\n\n  /**\n   * A signal emitted when the branches of the Git repository changes.\n   */\n  get branchesChanged(): ISignal<IGitExtension, void> {\n    return this._branchesChanged;\n  }\n\n  /**\n   * A signal emitted when the `HEAD` of the Git repository changes.\n   */\n  get headChanged(): ISignal<IGitExtension, void> {\n    return this._headChanged;\n  }\n\n  /**\n   * A signal emitted when the current marking of the Git repository changes.\n   */\n  get markChanged(): ISignal<IGitExtension, void> {\n    return this._markChanged;\n  }\n\n  /**\n   * A signal emitted when the current file selected for history of the Git repository changes.\n   */\n  get selectedHistoryFileChanged(): ISignal<\n    IGitExtension,\n    Git.IStatusFile | null\n  > {\n    return this._selectedHistoryFileChanged;\n  }\n\n  /**\n   * A signal emitted when the current Git repository changes.\n   */\n  get repositoryChanged(): ISignal<IGitExtension, IChangedArgs<string | null>> {\n    return this._repositoryChanged;\n  }\n\n  /**\n   * A signal emitted when the current status of the Git repository changes.\n   */\n  get statusChanged(): ISignal<IGitExtension, Git.IStatus> {\n    return this._statusChanged;\n  }\n\n  /**\n   * A signal emitted whenever a model event occurs.\n   */\n  get taskChanged(): ISignal<IGitExtension, string> {\n    return this._taskHandler.taskChanged;\n  }\n\n  /**\n   * A signal emitted when the current Git repository changes.\n   */\n  get notifyRemoteChanges(): ISignal<\n    IGitExtension,\n    Git.IRemoteChangedNotification\n  > {\n    return this._notifyRemoteChanges;\n  }\n\n  /**\n   * Boolean indicating whether there are dirty files\n   * A dirty file is a file with unsaved changes that is staged in classical mode\n   * or modified in simple mode.\n   */\n  get hasDirtyFiles(): boolean {\n    return this._hasDirtyFiles;\n  }\n  set hasDirtyFiles(value: boolean) {\n    if (this._hasDirtyFiles !== value) {\n      this._hasDirtyFiles = value;\n      this._dirtyFilesStatusChanged.emit(value);\n    }\n  }\n\n  /**\n   * A signal emitted indicating whether there are dirty (e.g., unsaved) staged files.\n   * This signal is emitted when there is a dirty staged file but none previously,\n   * and vice versa, when there are no dirty staged files but there were some previously.\n   */\n  get dirtyFilesStatusChanged(): ISignal<IGitExtension, boolean> {\n    return this._dirtyFilesStatusChanged;\n  }\n\n  /**\n   * Boolean indicating whether credentials are required from the user.\n   */\n  get credentialsRequired(): boolean {\n    return this._credentialsRequired;\n  }\n\n  set credentialsRequired(value: boolean) {\n    if (this._credentialsRequired !== value) {\n      this._credentialsRequired = value;\n      this._credentialsRequiredChanged.emit(value);\n    }\n  }\n\n  /**\n   * A signal emitted whenever credentials are required, or are not required anymore.\n   */\n  get credentialsRequiredChanged(): ISignal<IGitExtension, boolean> {\n    return this._credentialsRequiredChanged;\n  }\n\n  /**\n   * Get the current markers\n   *\n   * Note: This makes sure it always returns non null value\n   */\n  protected get _currentMarker(): BranchMarker {\n    if (!this.__currentMarker) {\n      this._setMarker(\n        this.pathRepository,\n        this._currentBranch ? this._currentBranch.name : ''\n      );\n    }\n    return this.__currentMarker;\n  }\n\n  /**\n   * Add one or more files to the repository staging area.\n   *\n   * ## Notes\n   *\n   * -   If no filename is provided, all files are added.\n   *\n   * @param filename - files to add\n   * @returns promise which resolves upon adding files to the repository staging area\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async add(...filename: string[]): Promise<void> {\n    const path = await this._getPathRepository();\n    await this._taskHandler.execute<void>('git:add:files', async () => {\n      await requestAPI<void>(URLExt.join(path, 'add'), 'POST', {\n        add_all: !filename,\n        filename: filename || ''\n      });\n    });\n    await this.refreshStatus();\n  }\n\n  /**\n   * Match files status information based on a provided file path.\n   *\n   * If the file is tracked and has no changes, a StatusFile of unmodified will be returned.\n   *\n   * @param path the file path relative to the server root\n   * @returns The file status or null if path repository is null or path not in repository\n   */\n  getFile(path: string): Git.IStatusFile | null {\n    if (this.pathRepository === null) {\n      return null;\n    }\n    const fileStatus = this._status.files.find(status => {\n      return this.getRelativeFilePath(status.to) === path;\n    });\n\n    if (!fileStatus) {\n      const relativePath = PathExt.relative(\n        '/' + this.pathRepository,\n        '/' + path\n      );\n\n      if (relativePath.startsWith('../')) {\n        return null;\n      } else {\n        return {\n          x: '',\n          y: '',\n          to: relativePath,\n          from: '',\n          is_binary: null,\n          status: 'unmodified',\n          type: this._resolveFileType(path)\n        };\n      }\n    } else {\n      return fileStatus;\n    }\n  }\n\n  /**\n   * Add all \"unstaged\" files to the repository staging area.\n   *\n   * @returns promise which resolves upon adding files to the repository staging area\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async addAllUnstaged(): Promise<void> {\n    const path = await this._getPathRepository();\n    await this._taskHandler.execute<void>(\n      'git:add:files:all_unstaged',\n      async () => {\n        await requestAPI<void>(URLExt.join(path, 'add_all_unstaged'), 'POST');\n      }\n    );\n    await this.refreshStatus();\n  }\n\n  /**\n   * Add all untracked files to the repository staging area.\n   *\n   * @returns promise which resolves upon adding files to the repository staging area\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async addAllUntracked(): Promise<void> {\n    const path = await this._getPathRepository();\n    await this._taskHandler.execute<void>(\n      'git:add:files:all_untracked',\n      async () => {\n        await requestAPI<void>(URLExt.join(path, 'add_all_untracked'), 'POST');\n      }\n    );\n    await this.refreshStatus();\n  }\n\n  /**\n   * Add a remote Git repository to the current repository.\n   *\n   * @param url - remote repository URL\n   * @param name - remote name\n   * @returns promise which resolves upon adding a remote\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async addRemote(url: string, name?: string): Promise<void> {\n    const path = await this._getPathRepository();\n    await this._taskHandler.execute<void>('git:add:remote', async () => {\n      await requestAPI<void>(URLExt.join(path, 'remote', 'add'), 'POST', {\n        url,\n        name\n      });\n    });\n  }\n\n  /**\n   * Show remote repository for the current repository\n   * @returns promise which resolves to a list of remote repositories\n   */\n  async getRemotes(): Promise<Git.IGitRemote[]> {\n    const path = await this._getPathRepository();\n    const result = await this._taskHandler.execute<Git.IGitRemoteResult>(\n      'git:show:remote',\n      async () => {\n        return await requestAPI<Git.IGitRemoteResult>(\n          URLExt.join(path, 'remote', 'show'),\n          'GET'\n        );\n      }\n    );\n    return result.remotes;\n  }\n\n  /**\n   * Remove a remote repository by name\n   * @param name name of remote to remove\n   */\n  async removeRemote(name: string): Promise<void> {\n    const path = await this._getPathRepository();\n    await this._taskHandler.execute<void>('git:remove:remote', async () => {\n      await requestAPI<void>(URLExt.join(path, 'remote', name), 'DELETE');\n    });\n  }\n\n  /**\n   * Retrieve the repository commit log.\n   *\n   * ## Notes\n   *\n   * -  This API can be used to implicitly check if the current folder is a Git repository.\n   *\n   * @param count - number of commits to retrieve\n   * @returns promise which resolves upon retrieving the repository commit log\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async allHistory(count = 25): Promise<Git.IAllHistory> {\n    const path = await this._getPathRepository();\n    return await this._taskHandler.execute<Git.IAllHistory>(\n      'git:fetch:history',\n      async () => {\n        return await requestAPI<Git.IAllHistory>(\n          URLExt.join(path, 'all_history'),\n          'POST',\n          {\n            history_count: count\n          }\n        );\n      }\n    );\n  }\n\n  /**\n   * Checkout a branch.\n   *\n   * ## Notes\n   *\n   * -   If a branch name is provided, checkout the provided branch (with or without creating it)\n   * -   If a filename is provided, checkout the file, discarding all changes.\n   * -   If nothing is provided, checkout all files, discarding all changes.\n   *\n   * TODO: Refactor into separate endpoints for each kind of checkout request\n   *\n   * @param options - checkout options\n   * @returns promise which resolves upon performing a checkout\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async checkout(options?: Git.ICheckoutOptions): Promise<Git.ICheckoutResult> {\n    const path = await this._getPathRepository();\n\n    const body = {\n      checkout_branch: false,\n      new_check: false,\n      branchname: '',\n      startpoint: '',\n      checkout_all: true,\n      filename: ''\n    };\n\n    if (options !== undefined) {\n      if (options.branchname) {\n        body.branchname = options.branchname;\n        body.checkout_branch = true;\n        body.new_check = options.newBranch === true;\n        if (options.newBranch) {\n          body.startpoint = options.startpoint || this._currentBranch.name;\n        }\n      } else if (options.filename) {\n        body.filename = options.filename;\n        body.checkout_all = false;\n      }\n    }\n\n    const data = await this._taskHandler.execute<Git.ICheckoutResult>(\n      'git:checkout',\n      async () => {\n        let changes;\n        if (!body.new_check) {\n          if (body.checkout_branch && !body.new_check) {\n            changes = await this._changedFiles(\n              this._currentBranch.name,\n              body.branchname\n            );\n          } else if (body.filename) {\n            changes = { files: [body.filename] };\n          } else {\n            changes = await this._changedFiles('WORKING', 'HEAD');\n          }\n        }\n\n        const d = await requestAPI<Git.ICheckoutResult>(\n          URLExt.join(path, 'checkout'),\n          'POST',\n          body\n        );\n\n        changes?.files?.forEach(file => this._revertFile(file));\n        return d;\n      }\n    );\n\n    if (body.checkout_branch) {\n      await this.refreshBranch();\n    } else {\n      await this.refreshStatus();\n    }\n    return data;\n  }\n\n  /**\n   * Merge a branch into the current branch\n   *\n   * @param branch The branch to merge into the current branch\n   */\n  async merge(branch: string): Promise<Git.IResultWithMessage> {\n    const path = await this._getPathRepository();\n    return this._taskHandler.execute<Git.IResultWithMessage>(\n      'git:merge',\n      () => {\n        return requestAPI<Git.IResultWithMessage>(\n          URLExt.join(path, 'merge'),\n          'POST',\n          {\n            branch\n          }\n        );\n      }\n    );\n  }\n\n  /**\n   * Clone a repository.\n   *\n   * @param path - local path into which the repository will be cloned\n   * @param url - Git repository URL\n   * @param auth - remote repository authentication information\n   * @param versioning - boolean flag of Git metadata (default true)\n   * @param submodules - boolean flag of Git submodules (default false)\n   * @returns promise which resolves upon cloning a repository\n   *\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async clone(\n    path: string,\n    url: string,\n    auth?: Git.IAuth,\n    versioning = true,\n    submodules = false\n  ): Promise<Git.IResultWithMessage> {\n    return await this._taskHandler.execute<Git.IResultWithMessage>(\n      'git:clone',\n      async () => {\n        return await requestAPI<Git.IResultWithMessage>(\n          URLExt.join(path, 'clone'),\n          'POST',\n          {\n            clone_url: url,\n            versioning: versioning,\n            submodules: submodules,\n            auth: auth as any\n          }\n        );\n      }\n    );\n  }\n\n  /**\n   * Commit all staged file changes. If message is None, then the commit is amended\n   *\n   * @param message - commit message\n   * @param amend - whether this is an amend commit\n   * @returns promise which resolves upon committing file changes\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async commit(message?: string, amend = false): Promise<void> {\n    const path = await this._getPathRepository();\n    await this._taskHandler.execute('git:commit:create', async () => {\n      await requestAPI(URLExt.join(path, 'commit'), 'POST', {\n        commit_msg: message,\n        amend: amend\n      });\n    });\n    await this.refresh();\n  }\n\n  /**\n   * Get (or set) Git configuration options.\n   *\n   * @param options - configuration options to set\n   * @returns promise which resolves upon either getting or setting configuration options\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async config(options?: JSONObject): Promise<JSONObject | void> {\n    const path = await this._getPathRepository();\n    return await this._taskHandler.execute<JSONObject | void>(\n      'git:config:' + (options ? 'set' : 'get'),\n      async () => {\n        if (options) {\n          await requestAPI(URLExt.join(path, 'config'), 'POST', {\n            options\n          });\n        } else {\n          return await requestAPI<JSONObject>(\n            URLExt.join(path, 'config'),\n            'POST'\n          );\n        }\n      }\n    );\n  }\n\n  /**\n   * Delete a branch\n   *\n   * @param branchName Branch name\n   * @returns promise which resolves when the branch has been deleted.\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async deleteBranch(branchName: string): Promise<void> {\n    const path = await this._getPathRepository();\n    await this._taskHandler.execute<void>('git:branch:delete', async () => {\n      return await requestAPI<void>(\n        URLExt.join(path, 'branch', 'delete'),\n        'POST',\n        {\n          branch: branchName\n        }\n      );\n    });\n  }\n\n  /**\n   * Fetch commit information.\n   *\n   * @param hash - commit hash\n   * @returns promise which resolves upon retrieving commit information\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async detailedLog(hash: string): Promise<Git.ISingleCommitFilePathInfo> {\n    const path = await this._getPathRepository();\n    const data = await this._taskHandler.execute<Git.ISingleCommitFilePathInfo>(\n      'git:fetch:commit_log',\n      async () => {\n        return await requestAPI<Git.ISingleCommitFilePathInfo>(\n          URLExt.join(path, 'detailed_log'),\n          'POST',\n          {\n            selected_hash: hash\n          }\n        );\n      }\n    );\n\n    data.modified_files = data.modified_files.map(f => {\n      f.type = this._resolveFileType(f.modified_file_path);\n      return f;\n    });\n    return data;\n  }\n\n  /**\n   * Get the diff of two commits.\n   * If no commit is provided, the diff of HEAD and INDEX is returned.\n   * If the current commit (the commit to compare) is not provided,\n   * the diff of the previous commit and INDEX is returned.\n   *\n   * @param previous - the commit to compare against\n   * @param current - the commit to compare\n   * @returns promise which resolves upon retrieving the diff\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async diff(previous?: string, current?: string): Promise<Git.IDiffResult> {\n    const path = await this._getPathRepository();\n    const data = await this._taskHandler.execute<Git.IDiffResult>(\n      'git:diff',\n      async () => {\n        return await requestAPI<Git.IDiffResult>(\n          URLExt.join(path, 'diff'),\n          'POST',\n          {\n            previous,\n            current\n          }\n        );\n      }\n    );\n    data.result = data.result.map(f => {\n      f.filetype = this._resolveFileType(f.filename);\n      return f;\n    });\n    return data;\n  }\n\n  /**\n   * Dispose of model resources.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._fetchPoll.dispose();\n    this._statusPoll.dispose();\n    this._taskHandler.dispose();\n    this._settings.changed.disconnect(this._onSettingsChange, this);\n    Signal.clearData(this);\n  }\n\n  /**\n   * Ensure a .gitignore file exists\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async ensureGitignore(): Promise<void> {\n    const path = await this._getPathRepository();\n\n    await requestAPI(URLExt.join(path, 'ignore'), 'POST', {});\n    this._openGitignore();\n    await this.refreshStatus();\n  }\n\n  /**\n   * Fetch to get ahead/behind status\n   *\n   * @param auth - remote authentication information\n   * @returns promise which resolves upon fetching\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async fetch(auth?: Git.IAuth): Promise<Git.IResultWithMessage> {\n    const path = await this._getPathRepository();\n    const data = this._taskHandler.execute<Git.IResultWithMessage>(\n      'git:fetch:remote',\n      async () => {\n        return await requestAPI<Git.IResultWithMessage>(\n          URLExt.join(path, 'remote', 'fetch'),\n          'POST',\n          {\n            auth: auth as any\n          }\n        );\n      }\n    );\n    return data;\n  }\n\n  /**\n   * Return the path of a file relative to the Jupyter server root.\n   *\n   * ## Notes\n   *\n   * -   If no path is provided, returns the Git repository top folder relative path.\n   * -   If no Git repository selected, returns `null`\n   *\n   * @param path - file path relative to the top folder of the Git repository\n   * @returns relative path\n   */\n  getRelativeFilePath(path?: string): string | null {\n    if (this.pathRepository === null) {\n      return null;\n    }\n    return PathExt.join(this.pathRepository, path ?? '');\n  }\n\n  /**\n   * Add an entry in .gitignore file\n   *\n   * @param filePath File to ignore\n   * @param useExtension Whether to ignore the file or its extension\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async ignore(filePath: string, useExtension: boolean): Promise<void> {\n    const path = await this._getPathRepository();\n\n    await requestAPI(URLExt.join(path, 'ignore'), 'POST', {\n      file_path: filePath,\n      use_extension: useExtension\n    });\n\n    this._openGitignore();\n    await this.refreshStatus();\n  }\n\n  /**\n   * Initialize a new Git repository at a specified path.\n   *\n   * @param path - path at which initialize a Git repository\n   * @returns promise which resolves upon initializing a Git repository\n   *\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async init(path: string): Promise<void> {\n    await this._taskHandler.execute<void>('git:init', async () => {\n      await requestAPI(URLExt.join(path, 'init'), 'POST');\n    });\n  }\n\n  /**\n   * Retrieve commit logs.\n   *\n   * @param count - number of commits\n   * @returns promise which resolves upon retrieving commit logs\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async log(count = 25): Promise<Git.ILogResult> {\n    const path = await this._getPathRepository();\n    return await this._taskHandler.execute<Git.ILogResult>(\n      'git:fetch:log',\n      async () => {\n        return await requestAPI<Git.ILogResult>(\n          URLExt.join(path, 'log'),\n          'POST',\n          {\n            history_count: count,\n            follow_path: this.selectedHistoryFile?.to\n          }\n        );\n      }\n    );\n  }\n\n  /**\n   * Fetch changes from a remote repository.\n   *\n   * @param auth - remote authentication information\n   * @returns promise which resolves upon fetching changes\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async pull(auth?: Git.IAuth): Promise<Git.IResultWithMessage> {\n    const path = await this._getPathRepository();\n    const previousHead = this._currentBranch?.top_commit;\n    const data = await this._taskHandler.execute<Git.IResultWithMessage>(\n      'git:pull',\n      async () => {\n        return await requestAPI<Git.IResultWithMessage>(\n          URLExt.join(path, 'pull'),\n          'POST',\n          {\n            auth: auth as any,\n            cancel_on_conflict:\n              (this._settings?.composite[\n                'cancelPullMergeConflict'\n              ] as boolean) || false\n          }\n        );\n      }\n    );\n    const changes = await this._changedFiles(previousHead, 'HEAD');\n    changes?.files?.forEach(file => this._revertFile(file));\n    await this.refreshBranch(); // Will emit headChanged if required\n    return data;\n  }\n\n  /**\n   * Push local changes to a remote repository.\n   *\n   * @param auth - remote authentication information\n   * @param force - whether or not to force the push\n   * @returns promise which resolves upon pushing changes\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async push(\n    auth?: Git.IAuth,\n    force = false,\n    remote?: string\n  ): Promise<Git.IResultWithMessage> {\n    const path = await this._getPathRepository();\n    const data = this._taskHandler.execute<Git.IResultWithMessage>(\n      'git:push',\n      async () => {\n        return await requestAPI<Git.IResultWithMessage>(\n          URLExt.join(path, 'push'),\n          'POST',\n          {\n            auth: auth as any,\n            force: force,\n            remote\n          }\n        );\n      }\n    );\n    this.refreshBranch();\n    return data;\n  }\n\n  /**\n   * Refresh the repository.\n   *\n   * @returns promise which resolves upon refreshing the repository\n   */\n  async refresh(): Promise<void> {\n    await this._statusPoll.refresh();\n    await this._statusPoll.tick;\n  }\n\n  /**\n   * Refresh the list of repository branches.\n   *\n   * Emit headChanged if the branch or its top commit changes\n   *\n   * @returns promise which resolves upon refreshing repository branches\n   */\n  async refreshBranch(): Promise<void> {\n    try {\n      const data = await this._taskHandler.execute<Git.IBranchResult>(\n        'git:refresh:branches',\n        async () => {\n          return await this._branch();\n        }\n      );\n\n      let headChanged = false;\n      if (!this._currentBranch || !data) {\n        headChanged = this._currentBranch !== data.current_branch; // Object comparison is not working\n      } else {\n        headChanged =\n          this._currentBranch.name !== data.current_branch.name ||\n          this._currentBranch.top_commit !== data.current_branch.top_commit;\n      }\n\n      const branchesChanged = !JSONExt.deepEqual(\n        this._branches as any,\n        (data.branches ?? []) as any\n      );\n\n      this._branches = data.branches ?? [];\n      this._currentBranch = data.current_branch;\n      if (this._currentBranch) {\n        // Set up the marker obj for the current (valid) repo/branch combination\n        this._setMarker(this.pathRepository, this._currentBranch.name);\n      }\n      if (headChanged) {\n        this._headChanged.emit();\n      }\n      if (branchesChanged) {\n        this._branchesChanged.emit();\n      }\n\n      // Start fetch remotes if the repository has remote branches\n      const hasRemote = this._branches.some(branch => branch.is_remote_branch);\n      if (hasRemote) {\n        this._fetchPoll.start();\n      } else {\n        this._fetchPoll.stop();\n      }\n    } catch (error) {\n      const branchesChanged = this._branches.length > 0;\n      const headChanged = this._currentBranch !== null;\n      this._branches = [];\n      this._currentBranch = null;\n      this._fetchPoll.stop();\n      if (headChanged) {\n        this._headChanged.emit();\n      }\n      if (branchesChanged) {\n        this._branchesChanged.emit();\n      }\n\n      if (!(error instanceof Git.NotInRepository)) {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Refresh the repository status.\n   *\n   * Emit statusChanged if required.\n   *\n   * @returns promise which resolves upon refreshing the repository status\n   */\n  async refreshStatus(): Promise<void> {\n    let path: string;\n    try {\n      path = await this._getPathRepository();\n    } catch (error) {\n      this._clearStatus();\n      if (!(error instanceof Git.NotInRepository)) {\n        throw error;\n      }\n      return;\n    }\n\n    try {\n      const data = await this._taskHandler.execute<Git.IStatusResult>(\n        'git:refresh:status',\n        async () => {\n          return await requestAPI<Git.IStatusResult>(\n            URLExt.join(path, 'status'),\n            'POST'\n          );\n        }\n      );\n      const files = data.files?.map(file => {\n        return {\n          ...file,\n          status: decodeStage(file.x, file.y),\n          type: this._resolveFileType(file.to)\n        };\n      });\n      this._setStatus({\n        branch: data.branch || null,\n        remote: data.remote || null,\n        ahead: data.ahead || 0,\n        behind: data.behind || 0,\n        files\n      });\n      await this.refreshDirtyStatus();\n    } catch (err) {\n      // TODO we should notify the user\n      this._clearStatus();\n      console.error(err);\n      return;\n    }\n  }\n\n  /**\n   * Collects files that have changed on the remote branch.\n   *\n   */\n  async remoteChangedFiles(): Promise<Git.IStatusFile[]> {\n    // if a file is changed on remote add it to list of files with appropriate status.\n    this._remoteChangedFiles = [];\n    try {\n      let remoteChangedFiles: null | string[] = null;\n      if (this.status.remote && this.status.behind > 0) {\n        remoteChangedFiles = (\n          await this._changedFiles('WORKING', this.status.remote)\n        ).files;\n        remoteChangedFiles?.forEach(element => {\n          this._remoteChangedFiles.push({\n            status: 'remote-changed',\n            type: this._resolveFileType(element),\n            x: '?',\n            y: 'B',\n            to: element,\n            from: '?',\n            is_binary: false\n          });\n        });\n        return this._remoteChangedFiles;\n      }\n    } catch (err) {\n      console.error(err);\n      return this._remoteChangedFiles;\n    }\n  }\n\n  /**\n   * Determines if opened files are behind the remote and emits a signal if one\n   * or more are behind and the user hasn't been notified of them yet.\n   *\n   */\n  async checkRemoteChangeNotified(): Promise<void> {\n    if (this.status.remote && this.status.behind > 0) {\n      const notNotified: Git.IStatusFile[] = [];\n      const notified: Git.IStatusFile[] = [];\n      for (const val of this._remoteChangedFiles) {\n        const docWidget = this._docmanager.findWidget(\n          this.getRelativeFilePath(val.to)\n        );\n        const notifiedIndex = this._changeUpstreamNotified.findIndex(\n          notified =>\n            notified.from === val.from &&\n            notified.to === val.to &&\n            notified.x === val.x &&\n            notified.y === val.y\n        );\n        if (docWidget !== undefined) {\n          if (docWidget.isAttached) {\n            // notify if the user hasn't been notified yet\n            if (notifiedIndex === -1) {\n              this._changeUpstreamNotified.push(val);\n              notNotified.push(val);\n            } else {\n              notified.push(val);\n            }\n          }\n        } else {\n          // remove from notified array if document is closed\n          if (notifiedIndex > -1) {\n            this._changeUpstreamNotified.splice(notifiedIndex, 1);\n          }\n        }\n      }\n      if (this._settings.composite['openFilesBehindWarning']) {\n        if (notNotified.length > 0) {\n          this._notifyRemoteChanges.emit({ notNotified, notified });\n        }\n      }\n    } else {\n      this._changeUpstreamNotified = [];\n    }\n  }\n\n  /**\n   * Determines whether there are unsaved changes on files,\n   *\n   * @returns promise that resolves upon refreshing the dirty status of files\n   */\n  async refreshDirtyStatus(): Promise<void> {\n    // we assume the repository status has been refreshed prior to this\n\n    // get files\n    const files = this.status.files.filter(file =>\n      this._statusForDirtyState.includes(file.status)\n    );\n    const fileNames = files.map(file => file.to);\n\n    let result = false;\n\n    for (const fileName of fileNames) {\n      const docWidget = this._docmanager.findWidget(\n        this.getRelativeFilePath(fileName)\n      );\n      if (docWidget !== undefined) {\n        const context = this._docmanager.contextForWidget(docWidget);\n        if (context.model.dirty) {\n          result = true;\n          break;\n        }\n      }\n    }\n\n    this.hasDirtyFiles = result;\n  }\n\n  /**\n   * Move files from the \"staged\" to the \"unstaged\" area.\n   *\n   * ## Notes\n   *\n   * -  If no filename is provided, moves all files from the \"staged\" to the \"unstaged\" area.\n   *\n   * @param filename - file path to be reset\n   * @returns promise which resolves upon moving files\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async reset(filename?: string): Promise<void> {\n    const path = await this._getPathRepository();\n    await this._taskHandler.execute<void>('git:reset:changes', async () => {\n      const reset_all = filename === undefined;\n      let files: string[];\n      if (reset_all) {\n        files = (await this._changedFiles('INDEX', 'HEAD')).files;\n      } else {\n        files = [filename];\n      }\n      await requestAPI(URLExt.join(path, 'reset'), 'POST', {\n        reset_all: filename === undefined,\n        filename: filename === undefined ? null : filename\n      });\n\n      files.forEach(file => {\n        this._revertFile(file);\n      });\n    });\n    await this.refreshStatus();\n  }\n\n  /**\n   * Reset the repository to a specified commit.\n   *\n   * ## Notes\n   *\n   * -   If a commit hash is not provided, resets the repository to `HEAD`.\n   *\n   * @param hash - commit identifier (hash)\n   * @returns promises which resolves upon resetting the repository\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async resetToCommit(hash = ''): Promise<void> {\n    const path = await this._getPathRepository();\n    await this._taskHandler.execute<void>('git:reset:hard', async () => {\n      const files = (await this._changedFiles(null, null, hash)).files;\n\n      await requestAPI(URLExt.join(path, 'reset_to_commit'), 'POST', {\n        commit_id: hash\n      });\n\n      files?.forEach(file => {\n        this._revertFile(file);\n      });\n    });\n    await this.refreshBranch();\n  }\n\n  /**\n   * Retrieve the prefix path of a directory `path` with respect to the root repository directory.\n   *\n   * @param path - directory path\n   * @returns promise which resolves upon retrieving the prefix path\n   *\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async showPrefix(path: string): Promise<string | null> {\n    try {\n      const data = await this._taskHandler.execute<Git.IShowPrefixResult>(\n        'git:fetch:prefix_path',\n        async () => {\n          return await requestAPI<Git.IShowPrefixResult>(\n            URLExt.join(path, 'show_prefix'),\n            'POST'\n          );\n        }\n      );\n      return data.path ?? null;\n    } catch (error) {\n      if (\n        error instanceof Git.GitResponseError &&\n        error.response.status === 500 &&\n        error.json.code === 128\n      ) {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve the top level repository path.\n   *\n   * @param path - current path\n   * @returns promise which resolves upon retrieving the top level repository path\n   *\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async showTopLevel(path: string): Promise<string | null> {\n    try {\n      const data = await this._taskHandler.execute<Git.IShowTopLevelResult>(\n        'git:fetch:top_level_path',\n        async () => {\n          return await requestAPI<Git.IShowTopLevelResult>(\n            URLExt.join(path, 'show_top_level'),\n            'POST'\n          );\n        }\n      );\n      return data.path ?? null;\n    } catch (error) {\n      if (\n        error instanceof Git.GitResponseError &&\n        error.response.status === 500 &&\n        error.json.code === 128\n      ) {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieve the list of tags in the repository.\n   *\n   * @returns promise which resolves upon retrieving the tag list\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async tags(): Promise<Git.ITagResult> {\n    const path = await this._getPathRepository();\n    return await this._taskHandler.execute<Git.ITagResult>(\n      'git:tag:list',\n      async () => {\n        return await requestAPI<Git.ITagResult>(\n          URLExt.join(path, 'tags'),\n          'POST'\n        );\n      }\n    );\n  }\n\n  /**\n   * Checkout the specified tag version\n   *\n   * @param tag - selected tag version\n   * @returns promise which resolves upon checking out the tag version of the repository\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async checkoutTag(tag: string): Promise<Git.ICheckoutResult> {\n    const path = await this._getPathRepository();\n    return await this._taskHandler.execute<Git.ICheckoutResult>(\n      'git:tag:checkout',\n      async () => {\n        return await requestAPI<Git.ICheckoutResult>(\n          URLExt.join(path, 'tag_checkout'),\n          'POST',\n          {\n            tag_id: tag\n          }\n        );\n      }\n    );\n  }\n\n  /**\n   * Add a file to the current marker object.\n   *\n   * @param fname - filename\n   * @param mark - mark to set\n   */\n  addMark(fname: string, mark: boolean): void {\n    this._currentMarker.add(fname, mark);\n  }\n\n  /**\n   * Set a file in the current marker object.\n   *\n   * @param fname - filename\n   * @param mark - mark to set\n   */\n  setMark(fname: string, mark: boolean): void {\n    this._currentMarker.set(fname, mark);\n  }\n\n  /**\n   * Return the current mark associated with a specified filename.\n   *\n   * @param fname - filename\n   * @returns mark\n   */\n  getMark(fname: string): boolean {\n    return this._currentMarker.get(fname);\n  }\n\n  /**\n   * Toggle the mark for a file in the current marker object\n   *\n   * @param fname - filename\n   */\n  toggleMark(fname: string): void {\n    this._currentMarker.toggle(fname);\n  }\n\n  get markedFiles(): Git.IStatusFile[] {\n    return this._currentMarker.markedFilePaths\n      .filter(path => this.status.files.some(file => file.to === path))\n      .map(path =>\n        this.status.files.find(fileStatus => fileStatus.to === path)\n      );\n  }\n\n  /**\n   * Register a new diff provider for specified file types\n   *\n   * @param fileExtensions File type list\n   * @param callback Callback to use for the provided file types\n   */\n  registerDiffProvider(\n    name: string,\n    fileExtensions: string[],\n    callback: Git.Diff.ICallback\n  ): void {\n    fileExtensions.forEach(fileExtension => {\n      DIFF_PROVIDERS[fileExtension.toLocaleLowerCase()] = { name, callback };\n    });\n  }\n\n  /**\n   * Revert changes made after a specified commit.\n   *\n   * @param message - commit message\n   * @param hash - commit identifier (hash)\n   * @returns promise which resolves upon reverting changes\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  async revertCommit(message: string, hash: string): Promise<void> {\n    const path = await this._getPathRepository();\n    await this._taskHandler.execute<void>('git:commit:revert', async () => {\n      const files = (await this._changedFiles(null, null, hash + '^!')).files;\n\n      await requestAPI(URLExt.join(path, 'delete_commit'), 'POST', {\n        commit_id: hash\n      });\n\n      files?.forEach(file => {\n        this._revertFile(file);\n      });\n    });\n    await this.commit(message);\n  }\n\n  /**\n   * Make request for a list of all git branches in the repository\n   * Retrieve a list of repository branches.\n   *\n   * @returns promise which resolves upon fetching repository branches\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  protected async _branch(): Promise<Git.IBranchResult> {\n    const path = await this._getPathRepository();\n    return await this._taskHandler.execute<Git.IBranchResult>(\n      'git:fetch:branches',\n      async () => {\n        return await requestAPI<Git.IBranchResult>(\n          URLExt.join(path, 'branch'),\n          'POST'\n        );\n      }\n    );\n  }\n\n  /**\n   * Get list of files changed between two commits or two branches.\n   *\n   * Notes:\n   *   It assumes the Git path repository as already been checked.\n   *\n   * @param base id of base commit or base branch for comparison\n   * @param remote id of remote commit or remote branch for comparison\n   * @param singleCommit id of a single commit\n   *\n   * @returns the names of the changed files\n   *\n   * @throws {Git.GitResponseError} If the server response is not ok\n   * @throws {ServerConnection.NetworkError} If the request cannot be made\n   */\n  protected async _changedFiles(\n    base?: string,\n    remote?: string,\n    singleCommit?: string\n  ): Promise<Git.IChangedFilesResult> {\n    return await requestAPI<Git.IChangedFilesResult>(\n      URLExt.join(this.pathRepository, 'changed_files'),\n      'POST',\n      {\n        base: base,\n        remote: remote,\n        single_commit: singleCommit\n      }\n    );\n  }\n\n  /**\n   * Clear repository status\n   */\n  protected _clearStatus(): void {\n    this._status = {\n      branch: null,\n      remote: null,\n      ahead: 0,\n      behind: 0,\n      files: []\n    };\n  }\n\n  /**\n   * Get the current Git repository path\n   *\n   * @throws {Git.NotInRepository} If the current path is not a Git repository\n   */\n  protected async _getPathRepository(): Promise<string> {\n    await this.ready;\n\n    const path = this.pathRepository;\n    if (path === null) {\n      throw new Git.NotInRepository();\n    }\n    return path;\n  }\n\n  /**\n   * Resolve path to filetype\n   */\n  protected _resolveFileType(path: string): DocumentRegistry.IFileType {\n    // test if directory\n    if (path.endsWith('/')) {\n      return DocumentRegistry.getDefaultDirectoryFileType();\n    }\n\n    return (\n      this._docRegistry.getFileTypesForPath(path)[0] ||\n      DocumentRegistry.getDefaultTextFileType()\n    );\n  }\n\n  /**\n   * Set the repository status.\n   *\n   * @param v - repository status\n   */\n  protected _setStatus(v: Git.IStatus): void {\n    let areEqual =\n      this._status.ahead === v.ahead &&\n      this._status.behind === v.behind &&\n      this._status.branch === v.branch &&\n      this._status.files.length === v.files.length;\n    if (areEqual) {\n      for (const file of v.files) {\n        if (\n          this._status.files.findIndex(\n            oldFile =>\n              oldFile.from === file.from &&\n              oldFile.to === file.to &&\n              oldFile.x === file.x &&\n              oldFile.y === file.y\n          )\n        ) {\n          areEqual = false;\n          break;\n        }\n      }\n    }\n\n    if (!areEqual) {\n      this._status = v;\n      this._statusChanged.emit(this._status);\n    }\n  }\n\n  /**\n   * Fetch poll action.\n   * This is blocked if Git credentials are required.\n   */\n  private _fetchRemotes = async (): Promise<void> => {\n    if (this.credentialsRequired) {\n      return;\n    }\n    try {\n      await this.fetch();\n    } catch (error) {\n      console.error('Failed to fetch remotes', error);\n      if (\n        AUTH_ERROR_MESSAGES.some(\n          errorMessage => (error as Error).message.indexOf(errorMessage) > -1\n        )\n      ) {\n        this.credentialsRequired = true;\n      }\n    }\n  };\n\n  /**\n   * Callback invoked upon a change to plugin settings.\n   *\n   * @private\n   * @param settings - plugin settings\n   */\n  private _onSettingsChange(settings: ISettingRegistry.ISettings) {\n    this._fetchPoll.frequency = {\n      ...this._fetchPoll.frequency,\n      interval: settings.composite.refreshInterval as number\n    };\n    this._statusPoll.frequency = {\n      ...this._statusPoll.frequency,\n      interval: settings.composite.refreshInterval as number\n    };\n\n    this._statusForDirtyState = (settings.composite.simpleStaging as boolean)\n      ? ['staged', 'partially-staged', 'unstaged']\n      : ['staged', 'partially-staged'];\n    this.refreshDirtyStatus();\n  }\n\n  /**\n   * open new editor or show an existing editor of the\n   * .gitignore file. If the editor does not have unsaved changes\n   * then ensure the editor's content matches the file on disk\n   */\n  private _openGitignore(): void {\n    if (this._docmanager) {\n      const widget = this._docmanager.openOrReveal(\n        this.getRelativeFilePath('.gitignore')\n      );\n      if (widget && !widget.context.model.dirty) {\n        widget.context.revert();\n      }\n    }\n  }\n\n  /**\n   * Refresh model status through a Poll\n   */\n  private _refreshModel = async (): Promise<void> => {\n    await this._taskHandler.execute<void>('git:refresh', async () => {\n      try {\n        await this.refreshBranch();\n        await this.refreshStatus();\n        await this.checkRemoteChangeNotified();\n      } catch (error) {\n        console.error('Failed to refresh git status', error);\n      }\n    });\n  };\n\n  /**\n   * Standby test function for the refresh Poll\n   *\n   * Standby refresh if\n   * - webpage is hidden\n   * - not in a git repository\n   * - standby condition is true\n   *\n   * @returns The test function\n   */\n  private _refreshStandby = (): boolean | Poll.Standby => {\n    if (this.pathRepository === null || this._standbyCondition()) {\n      return true;\n    }\n\n    return 'when-hidden';\n  };\n\n  /**\n   * if file is open in JupyterLab find the widget and ensure the JupyterLab\n   * version matches the version on disk. Do nothing if the file has unsaved changes\n   *\n   * @param path path to the file to be reverted\n   */\n  private _revertFile(path: string): void {\n    const widget = this._docmanager.findWidget(this.getRelativeFilePath(path));\n    if (widget && !widget.context.model.dirty) {\n      widget.context.revert();\n    }\n  }\n\n  /**\n   * Set the marker object for a repository path and branch.\n   */\n  private _setMarker(path: string, branch: string): void {\n    this.__currentMarker = this._markerCache.get(path, branch);\n  }\n\n  private _status: Git.IStatus;\n  private _pathRepository: string | null = null;\n  private _branches: Git.IBranch[] = [];\n  private _currentBranch: Git.IBranch | null = null;\n  private _docmanager: IDocumentManager | null;\n  private _docRegistry: DocumentRegistry | null;\n  private _fetchPoll: Poll;\n  private _isDisposed = false;\n  private _markerCache: Markers = new Markers(() => this._markChanged.emit());\n  private __currentMarker: BranchMarker = null;\n  private _readyPromise: Promise<void> = Promise.resolve();\n  private _pendingReadyPromise = 0;\n  private _settings: ISettingRegistry.ISettings | null;\n  private _standbyCondition: () => boolean = () => false;\n  private _statusPoll: Poll;\n  private _taskHandler: TaskHandler<IGitExtension>;\n  private _remoteChangedFiles: Git.IStatusFile[] = [];\n  private _changeUpstreamNotified: Git.IStatusFile[] = [];\n  private _selectedHistoryFile: Git.IStatusFile | null = null;\n  private _hasDirtyFiles = false;\n  private _credentialsRequired = false;\n\n  // Configurable\n  private _statusForDirtyState: Git.Status[] = ['staged', 'partially-staged'];\n\n  private _branchesChanged = new Signal<IGitExtension, void>(this);\n  private _headChanged = new Signal<IGitExtension, void>(this);\n  private _markChanged = new Signal<IGitExtension, void>(this);\n  private _selectedHistoryFileChanged = new Signal<\n    IGitExtension,\n    Git.IStatusFile | null\n  >(this);\n  private _repositoryChanged = new Signal<\n    IGitExtension,\n    IChangedArgs<string | null>\n  >(this);\n  private _statusChanged = new Signal<IGitExtension, Git.IStatus>(this);\n  private _notifyRemoteChanges = new Signal<\n    IGitExtension,\n    Git.IRemoteChangedNotification | null\n  >(this);\n  private _dirtyFilesStatusChanged = new Signal<IGitExtension, boolean>(this);\n  private _credentialsRequiredChanged = new Signal<IGitExtension, boolean>(\n    this\n  );\n}\n\nexport class BranchMarker implements Git.IBranchMarker {\n  constructor(private _refresh: () => void) {}\n\n  add(fname: string, mark = true): void {\n    if (!(fname in this._marks)) {\n      this.set(fname, mark);\n    }\n  }\n\n  get(fname: string): boolean {\n    return this._marks[fname];\n  }\n\n  set(fname: string, mark: boolean): void {\n    this._marks[fname] = mark;\n    this._refresh();\n  }\n\n  toggle(fname: string): void {\n    this.set(fname, !this._marks[fname]);\n  }\n\n  get markedFilePaths(): string[] {\n    const markedFiles: string[] = [];\n    for (const key in this._marks) {\n      if (this._marks[key]) {\n        markedFiles.push(key);\n      }\n    }\n    return markedFiles;\n  }\n\n  private _marks: { [key: string]: boolean } = {};\n}\n\nexport class Markers {\n  constructor(private _refresh: () => void) {}\n\n  get(path: string, branch: string): BranchMarker {\n    const key = Markers.markerKey(path, branch);\n    if (key in this._branchMarkers) {\n      return this._branchMarkers[key];\n    }\n\n    const marker = new BranchMarker(this._refresh);\n    this._branchMarkers[key] = marker;\n    return marker;\n  }\n\n  static markerKey(path: string, branch: string): string {\n    return [path, branch].join(':');\n  }\n\n  private _branchMarkers: { [key: string]: BranchMarker } = {};\n}\n"]}