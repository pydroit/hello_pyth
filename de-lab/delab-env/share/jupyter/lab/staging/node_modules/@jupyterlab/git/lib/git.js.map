{"version":3,"file":"git.js","sourceRoot":"./@jupyterlab/git/src/","sources":["git.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AAC/C,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AAExD,OAAO,EAAE,GAAG,EAAE,MAAM,UAAU,CAAC;AAE/B;;GAEG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG;IACjC,8BAA8B;IAC9B,yBAAyB;IACzB,yBAAyB;CAC1B,CAAC;AAEF;;;;;;;;;;;GAWG;AACH,MAAM,CAAC,KAAK,UAAU,UAAU,CAC9B,QAAQ,GAAG,EAAE,EACb,MAAM,GAAG,KAAK,EACd,OAAkC,IAAI,EACtC,SAAS,GAAG,KAAK;IAEjB,8BAA8B;IAC9B,MAAM,QAAQ,GAAG,gBAAgB,CAAC,YAAY,EAAE,CAAC;IACjD,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAC5B,QAAQ,CAAC,OAAO,EAChB,SAAS,EAAE,gBAAgB;IAC3B,QAAQ,CACT,CAAC;IAEF,MAAM,IAAI,GAAgB;QACxB,MAAM;QACN,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;KAC9C,CAAC;IAEF,IAAI,QAAkB,CAAC;IACvB,IAAI;QACF,QAAQ,GAAG,MAAM,gBAAgB,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;KAC3E;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,gBAAgB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KAChD;IAED,IAAI,IAAI,GAAQ,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IACtC,IAAI,MAAM,GAAG,KAAK,CAAC;IACnB,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;QACnB,IAAI;YACF,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACxB,MAAM,GAAG,IAAI,CAAC;SACf;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,GAAG,CAAC,2BAA2B,EAAE,QAAQ,CAAC,CAAC;SACpD;KACF;IAED,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;QAChB,IAAI,MAAM,EAAE;YACV,MAAM,EAAE,OAAO,EAAE,SAAS,KAAc,IAAI,EAAb,IAAI,UAAK,IAAI,EAAtC,wBAA+B,CAAO,CAAC;YAC7C,MAAM,IAAI,GAAG,CAAC,gBAAgB,CAC5B,QAAQ,EACR,OAAO;gBACL,qBAAqB,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,UAAU,EAAE,EAC/D,SAAS,IAAI,EAAE,EACf,IAAI,CACL,CAAC;SACH;aAAM;YACL,MAAM,IAAI,GAAG,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SAChD;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { ReadonlyJSONObject } from '@lumino/coreutils';\nimport { Git } from './tokens';\n\n/**\n * Array of Git Auth Error Messages\n */\nexport const AUTH_ERROR_MESSAGES = [\n  'Invalid username or password',\n  'could not read Username',\n  'could not read Password'\n];\n\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension; default ''\n * @param method HTML method; default 'GET'\n * @param body JSON object to be passed as body or null; default null\n * @param namespace API namespace; default 'git'\n * @returns The response body interpreted as JSON\n *\n * @throws {Git.GitResponseError} If the server response is not ok\n * @throws {ServerConnection.NetworkError} If the request cannot be made\n */\nexport async function requestAPI<T>(\n  endPoint = '',\n  method = 'GET',\n  body: ReadonlyJSONObject | null = null,\n  namespace = 'git'\n): Promise<T> {\n  // Make request to Jupyter API\n  const settings = ServerConnection.makeSettings();\n  const requestUrl = URLExt.join(\n    settings.baseUrl,\n    namespace, // API Namespace\n    endPoint\n  );\n\n  const init: RequestInit = {\n    method,\n    body: body ? JSON.stringify(body) : undefined\n  };\n\n  let response: Response;\n  try {\n    response = await ServerConnection.makeRequest(requestUrl, init, settings);\n  } catch (error) {\n    throw new ServerConnection.NetworkError(error);\n  }\n\n  let data: any = await response.text();\n  let isJSON = false;\n  if (data.length > 0) {\n    try {\n      data = JSON.parse(data);\n      isJSON = true;\n    } catch (error) {\n      console.log('Not a JSON response body.', response);\n    }\n  }\n\n  if (!response.ok) {\n    if (isJSON) {\n      const { message, traceback, ...json } = data;\n      throw new Git.GitResponseError(\n        response,\n        message ||\n          `Invalid response: ${response.status} ${response.statusText}`,\n        traceback || '',\n        json\n      );\n    } else {\n      throw new Git.GitResponseError(response, data);\n    }\n  }\n\n  return data;\n}\n"]}