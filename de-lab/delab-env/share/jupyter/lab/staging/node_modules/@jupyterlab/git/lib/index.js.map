{"version":3,"file":"index.js","sourceRoot":"./@jupyterlab/git/src/","sources":["index.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,eAAe,EAGhB,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,MAAM,EAAE,gBAAgB,EAAW,MAAM,sBAAsB,CAAC;AAEzE,OAAO,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AAC1D,OAAO,EAAoB,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAChF,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAC7D,OAAO,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAC;AAC/D,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AACnD,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AACtE,OAAO,EACL,WAAW,EACX,yBAAyB,EACzB,aAAa,EACd,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,kBAAkB,EAAE,MAAM,gCAAgC,CAAC;AACpE,OAAO,EAAE,kBAAkB,EAAE,MAAM,2BAA2B,CAAC;AAC/D,OAAO,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AACvC,OAAO,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAC7C,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AACxC,OAAO,EAAO,aAAa,EAAE,MAAM,UAAU,CAAC;AAC9C,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,qBAAqB,CAAC;AAChD,OAAO,EAAE,qBAAqB,EAAE,MAAM,gBAAgB,CAAC;AAEvD,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,gCAAgC,CAAC;AAC9D,OAAO,EAAE,aAAa,EAAE,MAAM,iCAAiC,CAAC;AAChE,OAAO,EAAE,GAAG,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAC9C,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAEjD;;GAEG;AACH,MAAM,MAAM,GAAyC;IACnD,EAAE,EAAE,wBAAwB;IAC5B,QAAQ,EAAE;QACR,SAAS;QACT,eAAe;QACf,mBAAmB;QACnB,mBAAmB;QACnB,gBAAgB;QAChB,gBAAgB;QAChB,UAAU;QACV,WAAW;KACZ;IACD,QAAQ,EAAE,aAAa;IACvB,QAAQ;IACR,SAAS,EAAE,IAAI;CAChB,CAAC;AAEF;;GAEG;AACH,eAAe,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;AAE/C;;GAEG;AACH,KAAK,UAAU,QAAQ,CACrB,GAAoB,EACpB,QAAmB,EACnB,QAAyB,EACzB,OAA4B,EAC5B,UAA+B,EAC/B,eAAiC,EACjC,UAA4B,EAC5B,SAAqB,EACrB,UAAwB;IAExB,IAAI,YAAY,GAAwB,IAAI,CAAC;IAC7C,IAAI,QAAoC,CAAC;IACzC,IAAI,cAAmC,CAAC;IACxC,wDAAwD;IACxD,oFAAoF;IACpF,4EAA4E;IAC5E,yEAAyE;IACzE,gEAAgE;IAChE,MAAM,WAAW,GAAG,OAAO,CAAC,cAAc,CAAC;IAC3C,UAAU,GAAG,UAAU,IAAI,cAAc,CAAC;IAC1C,MAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAEhD,uCAAuC;IACvC,IAAI;QACF,QAAQ,GAAG,MAAM,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;KAClD;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CACX,KAAK,CAAC,EAAE,CAAC,oDAAoD,EAAE,KAAK,CAAC,CACtE,CAAC;KACH;IACD,IAAI;QACF,cAAc,GAAG,MAAM,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,EAAE,eAAe,EAAE,UAAU,EAAE,aAAa,EAAE,GAAG,cAAc,CAAC;QAEtE,qBAAqB;QACrB,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,IAAI,KAAK,CACb,KAAK,CAAC,EAAE,CACN,kEAAkE,CACnE,CACF,CAAC;SACH;aAAM;YACL,MAAM,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC1C,IAAI,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;gBACvC,MAAM,IAAI,KAAK,CACb,KAAK,CAAC,EAAE,CAAC,0CAA0C,EAAE,UAAU,CAAC,CACjE,CAAC;aACH;SACF;QAED,IAAI,eAAe,IAAI,eAAe,KAAK,aAAa,EAAE;YACxD,MAAM,IAAI,KAAK,CACb,KAAK,CAAC,EAAE,CACN,+EAA+E;gBAC7E,yDAAyD;gBACzD,2CAA2C;gBAC3C,wJAAwJ,EAC1J,eAAe,EACf,aAAa,CACd,CACF,CAAC;SACH;KACF;IAAC,OAAO,KAAK,EAAE;QACd,2DAA2D;QAC3D,OAAO,CAAC,KAAK,CACX,KAAK,CAAC,EAAE,CAAC,6DAA6D,CAAC,EACvE,KAAK,CACN,CAAC;QACF,gBAAgB,CACd,KAAK,CAAC,EAAE,CAAC,oDAAoD,CAAC,EAC9D,KAAK,CAAC,OAAO,EACb,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CACpD,CAAC;QACF,OAAO,IAAI,CAAC;KACb;IACD,uBAAuB;IACvB,YAAY,GAAG,IAAI,YAAY,CAAC,UAAU,EAAE,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAEvE,mEAAmE;IACnE,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;QAChE,YAAY,CAAC,cAAc,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,CACpB,KAAuB,EACvB,MAA4B,EAC5B,EAAE;QACF,YAAY,CAAC,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC;QAC9C,YAAY,CAAC,aAAa,EAAE,CAAC;IAC/B,CAAC,CAAC;IAEF,sEAAsE;IACtE,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAErD,MAAM,cAAc,GAAG,GAAG,EAAE;QAC1B,WAAW,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC,CAAC;IAEF,8EAA8E;IAC9E,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAEjD,gHAAgH;IAChH,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,CACnD,YAAY,CAAC,aAAa,EAAE,CAC7B,CAAC;IAEF,mFAAmF;IACnF,IAAI,QAAQ,EAAE;QACZ,0BAA0B;QAC1B,WAAW,CAAC,GAAG,EAAE,YAAY,EAAE,WAAW,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAExE,gCAAgC;QAChC,MAAM,SAAS,GAAG,IAAI,SAAS,CAC7B,YAAY,EACZ,QAAQ,EACR,GAAG,CAAC,QAAQ,EACZ,WAAW,CAAC,KAAK,EACjB,KAAK,CACN,CAAC;QACF,SAAS,CAAC,EAAE,GAAG,iBAAiB,CAAC;QACjC,SAAS,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;QAC/B,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;QAEhC,0EAA0E;QAC1E,4EAA4E;QAC5E,WAAW;QACX,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QAExC,4EAA4E;QAC5E,kCAAkC;QAClC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;QAEhD,4BAA4B;QAC5B,IAAI,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,EAAE;YACxD,mBAAmB;YACnB,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;SACpE;QAED,2DAA2D;QAC3D,cAAc,CAAC,YAAY,EAAE,WAAW,EAAE,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAE/D,4BAA4B;QAC5B,kBAAkB,CAAC,SAAS,EAAE,YAAY,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAE7D,0DAA0D;QAC1D,yBAAyB,CACvB,YAAY,EACZ,WAAW,EACX,GAAG,CAAC,WAAW,EACf,KAAK,CACN,CAAC;KACH;IAED,0BAA0B;IAC1B,YAAY,CAAC,oBAAoB,CAC/B,QAAQ,EACR,CAAC,QAAQ,CAAC,EACV,CAAC,KAAsB,EAAE,OAAiB,EAAE,UAAwB,EAAE,EAAE,CACtE,kBAAkB,CAAC,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,CAAC,CAC7D,CAAC;IAEF,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["import {\n  ILayoutRestorer,\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { Dialog, showErrorMessage, Toolbar } from '@jupyterlab/apputils';\nimport { IChangedArgs } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { FileBrowserModel, IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport {\n  addCommands,\n  addFileBrowserContextMenu,\n  createGitMenu\n} from './commandsAndMenu';\nimport { createNotebookDiff } from './components/diff/NotebookDiff';\nimport { addStatusBarWidget } from './components/StatusWidget';\nimport { GitExtension } from './model';\nimport { getServerSettings } from './server';\nimport { gitIcon } from './style/icons';\nimport { Git, IGitExtension } from './tokens';\nimport { addCloneButton } from './widgets/gitClone';\nimport { GitWidget } from './widgets/GitWidget';\nimport { gitCloneCommandPlugin } from './cloneCommand';\n\nexport { DiffModel } from './components/diff/model';\nexport { NotebookDiff } from './components/diff/NotebookDiff';\nexport { PlainTextDiff } from './components/diff/PlainTextDiff';\nexport { Git, IGitExtension } from './tokens';\nexport { logger, LoggerContext } from './logger';\n\n/**\n * The default running sessions extension.\n */\nconst plugin: JupyterFrontEndPlugin<IGitExtension> = {\n  id: '@jupyterlab/git:plugin',\n  requires: [\n    IMainMenu,\n    ILayoutRestorer,\n    IFileBrowserFactory,\n    IRenderMimeRegistry,\n    ISettingRegistry,\n    IDocumentManager,\n    IStatusBar,\n    ITranslator\n  ],\n  provides: IGitExtension,\n  activate,\n  autoStart: true\n};\n\n/**\n * Export the plugin as default.\n */\nexport default [plugin, gitCloneCommandPlugin];\n\n/**\n * Activate the running plugin.\n */\nasync function activate(\n  app: JupyterFrontEnd,\n  mainMenu: IMainMenu,\n  restorer: ILayoutRestorer,\n  factory: IFileBrowserFactory,\n  renderMime: IRenderMimeRegistry,\n  settingRegistry: ISettingRegistry,\n  docmanager: IDocumentManager,\n  statusBar: IStatusBar,\n  translator?: ITranslator\n): Promise<IGitExtension> {\n  let gitExtension: GitExtension | null = null;\n  let settings: ISettingRegistry.ISettings;\n  let serverSettings: Git.IServerSettings;\n  // Get a reference to the default file browser extension\n  // We don't use the current tracked browser because extension like jupyterlab-github\n  // or jupyterlab-gitlab are defining new filebrowsers that we don't support.\n  // And it is unlikely that another browser than the default will be used.\n  // Ref: https://github.com/jupyterlab/jupyterlab-git/issues/1014\n  const fileBrowser = factory.defaultBrowser;\n  translator = translator || nullTranslator;\n  const trans = translator.load('jupyterlab_git');\n\n  // Attempt to load application settings\n  try {\n    settings = await settingRegistry.load(plugin.id);\n  } catch (error) {\n    console.error(\n      trans.__('Failed to load settings for the Git Extension.\\n%1', error)\n    );\n  }\n  try {\n    serverSettings = await getServerSettings(trans);\n    const { frontendVersion, gitVersion, serverVersion } = serverSettings;\n\n    // Version validation\n    if (!gitVersion) {\n      throw new Error(\n        trans.__(\n          'git command not found - please ensure you have Git > 2 installed'\n        )\n      );\n    } else {\n      const gitVersion_ = gitVersion.split('.');\n      if (Number.parseInt(gitVersion_[0]) < 2) {\n        throw new Error(\n          trans.__('git command version must be > 2; got %1.', gitVersion)\n        );\n      }\n    }\n\n    if (frontendVersion && frontendVersion !== serverVersion) {\n      throw new Error(\n        trans.__(\n          'The versions of the JupyterLab Git server frontend and backend do not match. ' +\n            'The @jupyterlab/git frontend extension has version: %1 ' +\n            'while the python package has version %2. ' +\n            'Please install identical version of jupyterlab-git Python package and the @jupyterlab/git extension. Try running: pip install --upgrade jupyterlab-git',\n          frontendVersion,\n          serverVersion\n        )\n      );\n    }\n  } catch (error) {\n    // If we fall here, nothing will be loaded in the frontend.\n    console.error(\n      trans.__('Failed to load the jupyterlab-git server extension settings'),\n      error\n    );\n    showErrorMessage(\n      trans.__('Failed to load the jupyterlab-git server extension'),\n      error.message,\n      [Dialog.warnButton({ label: trans.__('Dismiss') })]\n    );\n    return null;\n  }\n  // Create the Git model\n  gitExtension = new GitExtension(docmanager, app.docRegistry, settings);\n\n  // Whenever we restore the application, sync the Git extension path\n  Promise.all([app.restored, fileBrowser.model.restored]).then(() => {\n    gitExtension.pathRepository = fileBrowser.model.path;\n  });\n\n  const onPathChanged = (\n    model: FileBrowserModel,\n    change: IChangedArgs<string>\n  ) => {\n    gitExtension.pathRepository = change.newValue;\n    gitExtension.refreshBranch();\n  };\n\n  // Whenever the file browser path changes, sync the Git extension path\n  fileBrowser.model.pathChanged.connect(onPathChanged);\n\n  const refreshBrowser = () => {\n    fileBrowser.model.refresh();\n  };\n\n  // Whenever the `HEAD` of the Git repository changes, refresh the file browser\n  gitExtension.headChanged.connect(refreshBrowser);\n\n  // Whenever a user adds/renames/saves/deletes/modifies a file within the lab environment, refresh the Git status\n  app.serviceManager.contents.fileChanged.connect(() =>\n    gitExtension.refreshStatus()\n  );\n\n  // Provided we were able to load application settings, create the extension widgets\n  if (settings) {\n    // Add JupyterLab commands\n    addCommands(app, gitExtension, fileBrowser.model, settings, translator);\n\n    // Create the Git widget sidebar\n    const gitPlugin = new GitWidget(\n      gitExtension,\n      settings,\n      app.commands,\n      fileBrowser.model,\n      trans\n    );\n    gitPlugin.id = 'jp-git-sessions';\n    gitPlugin.title.icon = gitIcon;\n    gitPlugin.title.caption = 'Git';\n\n    // Let the application restorer track the running panel for restoration of\n    // application state (e.g. setting the running panel as the current side bar\n    // widget).\n    restorer.add(gitPlugin, 'git-sessions');\n\n    // Rank has been chosen somewhat arbitrarily to give priority to the running\n    // sessions widget in the sidebar.\n    app.shell.add(gitPlugin, 'left', { rank: 200 });\n\n    // Add a menu for the plugin\n    if (app.version.split('.').slice(0, 2).join('.') < '3.1') {\n      // Support JLab 3.0\n      mainMenu.addMenu(createGitMenu(app.commands, trans), { rank: 60 });\n    }\n\n    // Add a clone button to the file browser extension toolbar\n    addCloneButton(gitExtension, fileBrowser, app.commands, trans);\n\n    // Add the status bar widget\n    addStatusBarWidget(statusBar, gitExtension, settings, trans);\n\n    // Add the context menu items for the default file browser\n    addFileBrowserContextMenu(\n      gitExtension,\n      fileBrowser,\n      app.contextMenu,\n      trans\n    );\n  }\n\n  // Register diff providers\n  gitExtension.registerDiffProvider(\n    'Nbdime',\n    ['.ipynb'],\n    (model: Git.Diff.IModel, toolbar?: Toolbar, translator?: ITranslator) =>\n      createNotebookDiff(model, renderMime, toolbar, translator)\n  );\n\n  return gitExtension;\n}\n"]}