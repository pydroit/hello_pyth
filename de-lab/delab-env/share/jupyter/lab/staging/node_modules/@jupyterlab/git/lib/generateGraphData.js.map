{"version":3,"file":"generateGraphData.js","sourceRoot":"./@jupyterlab/git/src/","sources":["generateGraphData.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Represent a commit to be rendered in the GitCommitGraph.\n */\nexport interface ICommit {\n  /**\n   * The hash of the commit.\n   */\n  sha: string;\n  /**\n   * A list of parents' hashes.\n   */\n  parents: string[];\n}\n/**\n * Represents a commit node in the GitCommitGraph.\n */\nexport interface INode {\n  /**\n   * The hash of the commit.\n   */\n  sha: string;\n  /**\n   * The commit dot in GitCommitGraph.\n   */\n  dot: { lateralOffset: number; branch: number };\n  /**\n   * A list of routes that should be rendered together with the dot.\n   */\n  routes: IRoute[];\n  /**\n   * Vertical offset of the dot and the start of the route(s) with respect to the top of the svg image.\n   */\n  yOffset: number;\n}\n/**\n * Represent a route that should be rendered with a commit dot.\n */\nexport interface IRoute {\n  /**\n   * lateral offset of the start of the route\n   */\n  from: number;\n  /**\n   * lateral offset of the end of the route\n   */\n  to: number;\n  /**\n   * The route's branch number.\n   */\n  branch: number;\n}\n\nconst Node = (\n  sha: string,\n  offset: number,\n  branch: number,\n  routes: IRoute[],\n  yOffset: number\n): INode => ({\n  sha,\n  dot: { lateralOffset: offset, branch },\n  routes,\n  yOffset\n});\n\nfunction remove(list: number[], item: number): number[] {\n  list.splice(list.indexOf(item), 1);\n  return list;\n}\n\n/**\n * Generate graph data.\n * @param commits a list of commit, which should have `sha`, `parents` properties.\n * @param getNodeHeight a callback to retrieve the height of the history node\n * @returns data nodes, a json list of\n      [ \n        {\n          sha,\n          {offset, branch}, //dot\n          [\n            {from, to, branch},  // route 1\n            {from, to, branch},  // route 2\n            {from, to, branch},\n          ] // routes\n        } // node\n      ],  \n */\nexport function generateGraphData(\n  commits: ICommit[],\n  getNodeHeight: (sha: string) => number\n): INode[] {\n  const nodes: INode[] = [];\n  const branchIndex = [0];\n  const reserve: number[] = [];\n  const branches: { [sha: string]: number } = {};\n\n  function getBranch(sha: string) {\n    if (branches[sha] === null || branches[sha] === undefined) {\n      branches[sha] = branchIndex[0];\n      reserve.push(branchIndex[0]);\n      branchIndex[0]++;\n    }\n    return branches[sha];\n  }\n  let currentYOffset = 25;\n  commits.forEach((commit, index) => {\n    let b, i;\n    const branch = getBranch(commit.sha);\n    const numParents = commit.parents.length;\n    const offset = reserve.indexOf(branch);\n    const routes: IRoute[] = [];\n\n    if (numParents === 1) {\n      if (branches[commit.parents[0]] || branches[commit.parents[0]] === 0) {\n        // create branch\n        const iterable = reserve.slice(offset + 1);\n        for (i = 0; i < iterable.length; i++) {\n          b = iterable[i];\n          routes.push({\n            from: i + offset + 1,\n            to: i + offset + 1 - 1,\n            branch: b\n          });\n        }\n        const iterable1 = reserve.slice(0, offset);\n        for (i = 0; i < iterable1.length; i++) {\n          b = iterable1[i];\n          routes.push({ from: i, to: i, branch: b });\n        }\n        remove(reserve, branch);\n        routes.push({\n          from: offset,\n          to: reserve.indexOf(branches[commit.parents[0]]),\n          branch\n        });\n      } else {\n        // straight\n        for (i = 0; i < reserve.length; i++) {\n          b = reserve[i];\n          routes.push({ from: i, to: i, branch: b });\n        }\n        branches[commit.parents[0]] = branch;\n      }\n    } else if (numParents === 2) {\n      // merge branch\n      branches[commit.parents[0]] = branch;\n      for (i = 0; i < reserve.length; i++) {\n        b = reserve[i];\n        routes.push({ from: i, to: i, branch: b });\n      }\n      const otherBranch = getBranch(commit.parents[1]);\n      routes.push({\n        from: offset,\n        to: reserve.indexOf(otherBranch),\n        branch: otherBranch\n      });\n    }\n    if (index - 1 >= 0) {\n      currentYOffset += getNodeHeight(commits[index - 1].sha);\n    }\n    const node = Node(commit.sha, offset, branch, routes, currentYOffset);\n    nodes.push(node);\n  });\n\n  return nodes;\n}\n"]}