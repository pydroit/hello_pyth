{"version":3,"file":"PlainTextDiff.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/diff/PlainTextDiff.ts"],"names":[],"mappings":"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","sourcesContent":["import { Toolbar } from '@jupyterlab/apputils';\nimport { Mode } from '@jupyterlab/codemirror';\nimport { Contents } from '@jupyterlab/services';\nimport {\n  ITranslator,\n  nullTranslator,\n  TranslationBundle\n} from '@jupyterlab/translation';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\nimport { MergeView } from 'codemirror';\nimport { Git } from '../../tokens';\nimport { MergeView as LocalMergeView, mergeView } from './mergeview';\n\n/**\n * Diff callback to be registered for plain-text files.\n *\n * @param model Diff model\n * @param toolbar MainAreaWidget toolbar\n * @returns PlainText diff widget\n */\nexport const createPlainTextDiff: Git.Diff.ICallback = async (\n  model: Git.Diff.IModel,\n  toolbar?: Toolbar,\n  translator?: ITranslator\n): Promise<PlainTextDiff> => {\n  const widget = new PlainTextDiff(model, translator.load('jupyterlab_git'));\n  await widget.ready;\n  return widget;\n};\n\n/**\n * Plain Text Diff widget\n */\nexport class PlainTextDiff extends Widget implements Git.Diff.IDiffWidget {\n  constructor(model: Git.Diff.IModel, translator?: TranslationBundle) {\n    super({\n      node: PlainTextDiff.createNode(\n        model.reference.label,\n        model.base?.label,\n        model.challenger.label\n      )\n    });\n    const getReady = new PromiseDelegate<void>();\n    this._isReady = getReady.promise;\n    this._container = this.node.lastElementChild as HTMLElement;\n    this._model = model;\n    this._trans = translator ?? nullTranslator.load('jupyterlab_git');\n\n    // The list of internal strings is available at https://codemirror.net/examples/translate/\n    this._translations = {\n      // @codemirror/view\n      'Control character': this._trans.__('Control character'),\n      // @codemirror/commands\n      'Selection deleted': this._trans.__('Selection deleted'),\n      // @codemirror/language\n      'Folded lines': this._trans.__('Folded lines'),\n      'Unfolded lines': this._trans.__('Unfolded lines'),\n      to: this._trans.__('to'),\n      'folded code': this._trans.__('folded code'),\n      unfold: this._trans.__('unfold'),\n      'Fold line': this._trans.__('Fold line'),\n      'Unfold line': this._trans.__('Unfold line'),\n      // @codemirror/search\n      'Go to line': this._trans.__('Go to line'),\n      go: this._trans.__('go'),\n      Find: this._trans.__('Find'),\n      Replace: this._trans.__('Replace'),\n      next: this._trans.__('next'),\n      previous: this._trans.__('previous'),\n      all: this._trans.__('all'),\n      'match case': this._trans.__('match case'),\n      replace: this._trans.__('replace'),\n      'replace all': this._trans.__('replace all'),\n      close: this._trans.__('close'),\n      'current match': this._trans.__('current match'),\n      'replaced $ matches': this._trans.__('replaced $ matches'),\n      'replaced match on line $': this._trans.__('replaced match on line $'),\n      'on line': this._trans.__('on line'),\n      // From https://codemirror.net/5/addon/merge/merge.js\n      'Identical text collapsed. Click to expand.': this._trans.__(\n        'Identical text collapsed. Click to expand.'\n      ),\n      'Toggle locked scrolling': this._trans.__('Toggle locked scrolling'),\n      'Push to left': this._trans.__('Push to left'),\n      'Revert chunk': this._trans.__('Revert chunk')\n    };\n\n    // Load file content early\n    Promise.all([\n      this._model.reference.content(),\n      this._model.challenger.content(),\n      this._model.base?.content() ?? Promise.resolve(null)\n    ])\n      .then(([reference, challenger, base]) => {\n        this._reference = reference;\n        this._challenger = challenger;\n        this._base = base;\n\n        getReady.resolve();\n      })\n      .catch(reason => {\n        this.showError(reason);\n        getReady.resolve();\n      });\n  }\n\n  /**\n   * Helper to determine if three-way diff should be shown.\n   */\n  private get _hasConflict(): boolean {\n    return this._model.hasConflict;\n  }\n\n  /**\n   * Checks if the conflicted file has been resolved.\n   */\n  get isFileResolved(): boolean {\n    return true;\n  }\n\n  /**\n   * Diff model\n   */\n  get model(): Git.Diff.IModel {\n    return this._model;\n  }\n\n  /**\n   * Promise which fulfills when the widget is ready.\n   */\n  get ready(): Promise<void> {\n    return this._isReady;\n  }\n\n  /**\n   * Gets the file model of a resolved merge conflict,\n   * and rejects if unable to retrieve.\n   */\n  getResolvedFile(): Promise<Partial<Contents.IModel>> {\n    const value = this._mergeView?.editor().getValue() ?? null;\n    if (value !== null) {\n      return Promise.resolve({\n        type: 'file',\n        format: 'text',\n        content: value\n      });\n    } else {\n      return Promise.reject(\n        this._trans.__('Failed to get a valid file value.')\n      );\n    }\n  }\n\n  /**\n   * Callback to create the diff widget once the widget\n   * is attached so CodeMirror get proper size.\n   */\n  onAfterAttach(): void {\n    this.ready\n      .then(() => {\n        if (this._challenger !== null && this._reference !== null) {\n          this.createDiffView(\n            this._challenger,\n            this._reference,\n            this._translations,\n            this._hasConflict ? this._base : null\n          );\n        }\n      })\n      .catch(reason => {\n        this.showError(reason);\n      });\n  }\n\n  /**\n   * Undo onAfterAttach\n   */\n  onBeforeDetach(): void {\n    this._container.innerHTML = '';\n  }\n\n  /**\n   * Refresh diff\n   *\n   * Note: Update the content and recompute the diff\n   */\n  async refresh(): Promise<void> {\n    await this.ready;\n    try {\n      // Clear all\n      this._container.innerHTML = '';\n      this._mergeView = null;\n\n      // ENH request content only if it changed\n      if (this._reference !== null) {\n        this._reference = await this._model.reference.content();\n      }\n      if (this._challenger !== null) {\n        this._challenger = await this._model.challenger.content();\n      }\n      if (this._base !== null) {\n        this._base = (await this._model.base?.content()) ?? null;\n      }\n\n      this.createDiffView(\n        this._challenger,\n        this._reference,\n        this._translations,\n        this._hasConflict ? this._base : null\n      );\n\n      this._challenger = null;\n      this._reference = null;\n      this._base = null;\n    } catch (reason) {\n      this.showError(reason as Error);\n    }\n  }\n\n  /**\n   * Create wrapper node\n   */\n  protected static createNode(...labels: string[]): HTMLElement {\n    const bannerClass =\n      labels[1] !== undefined ? 'jp-git-merge-banner' : 'jp-git-diff-banner';\n    const head = document.createElement('div');\n    head.className = 'jp-git-diff-root';\n    head.innerHTML = `\n    <div class=\"${bannerClass}\">\n      ${labels\n        .filter(label => !!label)\n        .map(label => `<span>${label}</span>`)\n        .join('<span class=\"jp-spacer\"></span>')}\n    </div>\n    <div class=\"jp-git-PlainText-diff\"></div>`;\n    return head;\n  }\n\n  /**\n   * Create the Plain Text Diff view\n   *\n   * Note: baseContent will only be passed when displaying\n   *       a three-way merge conflict.\n   */\n  protected async createDiffView(\n    challengerContent: string,\n    referenceContent: string,\n    translations: Record<string, string>,\n    baseContent?: string\n  ): Promise<void> {\n    if (!this._mergeView) {\n      const mode =\n        Mode.findByFileName(this._model.filename) ||\n        Mode.findBest(this._model.filename);\n\n      let options: LocalMergeView.IMergeViewEditorConfiguration = {\n        value: challengerContent,\n        orig: referenceContent,\n        mode: mode.mime,\n        phrases: translations,\n        ...this.getDefaultOptions()\n      };\n\n      // Show three-way diff on merge conflict\n      // Note: Empty base content (\"\") is an edge case.\n      if (baseContent !== null && baseContent !== undefined) {\n        options = {\n          ...options,\n          origLeft: referenceContent,\n          value: baseContent,\n          origRight: challengerContent,\n          readOnly: false,\n          revertButtons: true\n        };\n      }\n\n      this._mergeView = mergeView(\n        this._container,\n        options\n      ) as MergeView.MergeViewEditor;\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Display an error instead of the file diff\n   *\n   * @param error Error object\n   */\n  protected showError(error: Error): void {\n    console.error(\n      this._trans.__('Failed to load file diff.'),\n      error,\n      (error as any)?.traceback\n    );\n    const msg = ((error.message || error) as string).replace('\\n', '<br />');\n    this.node.innerHTML = `<p class=\"jp-git-diff-error\">\n      <span>${this._trans.__('Error Loading File Diff:')}</span>\n      <span class=\"jp-git-diff-error-message\">${msg}</span>\n    </p>`;\n  }\n\n  protected getDefaultOptions(): Partial<MergeView.MergeViewEditorConfiguration> {\n    // FIXME add options from settings and connect settings to update options\n    return {\n      lineNumbers: true,\n      theme: 'jupyter',\n      connect: 'align',\n      collapseIdentical: true,\n      readOnly: true,\n      revertButtons: false\n    };\n  }\n\n  protected _container: HTMLElement;\n  protected _isReady: Promise<void>;\n  protected _mergeView: MergeView.MergeViewEditor;\n  protected _model: Git.Diff.IModel;\n  protected _trans: TranslationBundle;\n  protected _translations: Record<string, string>;\n\n  private _reference: string | null = null;\n  private _challenger: string | null = null;\n  private _base: string | null = null;\n}\n"]}