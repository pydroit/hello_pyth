{"version":3,"file":"MergeBranchDialog.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/MergeBranchDialog.tsx"],"names":[],"mappings":"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","sourcesContent":["import { TranslationBundle } from '@jupyterlab/translation';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport ListItem from '@material-ui/core/ListItem';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport React from 'react';\nimport { FixedSizeList, ListChildComponentProps } from 'react-window';\nimport { classes } from 'typestyle';\nimport { branchIcon } from '../style/icons';\nimport {\n  actionsWrapperClass,\n  activeListItemClass,\n  branchDialogClass,\n  buttonClass,\n  cancelButtonClass,\n  closeButtonClass,\n  contentWrapperClass,\n  createButtonClass,\n  filterClass,\n  filterClearClass,\n  filterInputClass,\n  filterWrapperClass,\n  listItemClass,\n  listItemContentClass,\n  listItemIconClass,\n  listItemTitleClass,\n  listWrapperClass,\n  titleClass,\n  titleWrapperClass\n} from '../style/NewBranchDialog';\nimport { Git } from '../tokens';\n\nconst ITEM_HEIGHT = 27.5; // HTML element height for a single branch\nconst HEIGHT = 200; // HTML element height for the branches list\n\n/**\n * MergeBranchDialog component properties\n */\nexport interface IMergeBranchDialogProps {\n  /**\n   * Current branch name.\n   */\n  currentBranch: string;\n\n  /**\n   * Current list of local branches and without the current branch.\n   */\n  branches: Git.IBranch[];\n\n  /**\n   * Callback to invoke upon closing the dialog.\n   */\n  onClose(branch?: string): void;\n\n  /**\n   * The application language translator.\n   */\n  trans: TranslationBundle;\n}\n\n/**\n * MergeBranchDialog React component\n *\n * @param props Component properties\n * @returns React element\n */\nexport function MergeBranchDialog(props: IMergeBranchDialogProps): JSX.Element {\n  const [filter, setFilter] = React.useState<string>('');\n  const [selectedBranch, setSelectedBranch] = React.useState<string | null>(\n    null\n  );\n\n  const branches = props.branches.filter(\n    branch => !filter || branch.name.includes(filter)\n  );\n\n  const { trans } = props;\n\n  function renderItem(props: ListChildComponentProps): JSX.Element {\n    const { data, index, style } = props;\n    const branch = data[index] as Git.IBranch;\n    const isSelected = branch.name === selectedBranch;\n\n    return (\n      <ListItem\n        button\n        title={trans.__('Create a new branch based on: %1', branch.name)}\n        className={classes(\n          listItemClass,\n          isSelected ? activeListItemClass : null\n        )}\n        onClick={() => {\n          setSelectedBranch(branch.name);\n        }}\n        style={style}\n      >\n        <branchIcon.react className={listItemIconClass} tag=\"span\" />\n        <div className={listItemContentClass}>\n          <p className={listItemTitleClass}>{branch.name}</p>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <Dialog\n      classes={{\n        paper: branchDialogClass\n      }}\n      open={true}\n      onClose={props.onClose}\n    >\n      <div className={titleWrapperClass}>\n        <p className={titleClass}>{trans.__('Merge Branch')}</p>\n        <button className={closeButtonClass}>\n          <ClearIcon\n            titleAccess={trans.__('Close this dialog')}\n            fontSize=\"small\"\n            onClick={() => {\n              props.onClose();\n            }}\n          />\n        </button>\n      </div>\n      <div className={contentWrapperClass}>\n        <p>\n          {trans.__('Select the branch to merge in %1', props.currentBranch)}\n        </p>\n        <div className={filterWrapperClass}>\n          <div className={filterClass}>\n            <input\n              className={filterInputClass}\n              type=\"text\"\n              onChange={event => {\n                setFilter(event.target.value);\n              }}\n              value={filter}\n              placeholder={trans.__('Filter')}\n              title={trans.__('Filter branch list')}\n            />\n            {filter ? (\n              <button className={filterClearClass}>\n                <ClearIcon\n                  titleAccess={trans.__('Clear the current filter')}\n                  fontSize=\"small\"\n                  onClick={() => {\n                    setFilter('');\n                  }}\n                />\n              </button>\n            ) : null}\n          </div>\n        </div>\n\n        <FixedSizeList\n          className={listWrapperClass}\n          height={HEIGHT}\n          itemSize={ITEM_HEIGHT}\n          itemCount={branches.length}\n          itemData={branches}\n          itemKey={(index, data) => data[index].name}\n          style={{ overflowX: 'hidden' }}\n          width={'auto'}\n        >\n          {renderItem}\n        </FixedSizeList>\n      </div>\n      <DialogActions className={actionsWrapperClass}>\n        <input\n          className={classes(buttonClass, cancelButtonClass)}\n          type=\"button\"\n          title={trans.__('Close this dialog without merging a branch')}\n          value={trans.__('Cancel')}\n          onClick={() => {\n            props.onClose();\n          }}\n        />\n        <input\n          className={classes(buttonClass, createButtonClass)}\n          type=\"button\"\n          title={trans.__('Merge branch')}\n          value={trans.__('Merge')}\n          onClick={() => {\n            props.onClose(selectedBranch);\n          }}\n          disabled={selectedBranch === null}\n        />\n      </DialogActions>\n    </Dialog>\n  );\n}\n"]}