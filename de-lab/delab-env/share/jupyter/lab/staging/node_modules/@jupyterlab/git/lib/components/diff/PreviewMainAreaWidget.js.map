{"version":3,"file":"PreviewMainAreaWidget.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/diff/PreviewMainAreaWidget.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,yCAAyC,CAAC;AAIzE,MAAM,OAAO,qBAEX,SAAQ,cAAc;IAMtB,YAAY,OAA6D;;QACvE,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,UAAI,OAAO,CAAC,SAAS,mCAAI,IAAI,EAAE;YAC7B,qBAAqB,CAAC,oBAAoB,CACxC,qBAAqB,CAAC,aAAa,CACpC,CAAC;YACF,qBAAqB,CAAC,aAAa,GAAG,IAAI,CAAC;SAC5C;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,oBAAoB,CAAC,SAAwC;QAClE,OAAO,SAAS,IAAI,qBAAqB,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;IACpE,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,SAAS,CACd,WAAmB,EACnB,MAAsB,EACtB,UAAwC;QAExC,6DAA6D;QAC7D,UAAU,CAAC,GAAG,EAAE;YACd,iCAAiC;YACjC,MAAM,GAAG,GACP,WAAW,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACrE,MAAM,QAAQ,GAAG,GAAG,CAAC,aAAa,CAAc,qBAAqB,CAAC,CAAC;YAEvE,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YAEjD,MAAM,OAAO,GAAG,GAAG,EAAE;gBACnB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;gBACpD,QAAQ,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;gBACrD,IAAI,qBAAqB,CAAC,aAAa,KAAK,UAAU,EAAE;oBACtD,qBAAqB,CAAC,aAAa,GAAG,IAAI,CAAC;iBAC5C;YACH,CAAC,CAAC;YAEF,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YAClD,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE;gBAC/B,QAAQ,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;QACL,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC;IAED;;OAEG;IACO,aAAa,CAAC,GAAY;QAClC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;IACvE,CAAC;IAED;;OAEG;IACO,cAAc,CAAC,GAAY;QACnC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;QACxE,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,qBAAqB,CAAC,aAAa,GAAG,IAAI,CAAC;IAC7C,CAAC;;AA5ED;;GAEG;AACc,mCAAa,GAAiC,IAAI,CAAC","sourcesContent":["import { MainAreaWidget } from '@jupyterlab/apputils/lib/mainareawidget';\nimport { Message } from '@lumino/messaging';\nimport { Panel, TabBar, Widget } from '@lumino/widgets';\n\nexport class PreviewMainAreaWidget<\n  T extends Widget = Widget\n> extends MainAreaWidget {\n  /**\n   * Handle on the preview widget\n   */\n  protected static previewWidget: PreviewMainAreaWidget | null = null;\n\n  constructor(options: MainAreaWidget.IOptions<T> & { isPreview?: boolean }) {\n    super(options);\n\n    if (options.isPreview ?? true) {\n      PreviewMainAreaWidget.disposePreviewWidget(\n        PreviewMainAreaWidget.previewWidget\n      );\n      PreviewMainAreaWidget.previewWidget = this;\n    }\n  }\n\n  /**\n   * Dispose screen as a preview screen\n   */\n  static disposePreviewWidget(isPreview: PreviewMainAreaWidget<Widget>): void {\n    return isPreview && PreviewMainAreaWidget.previewWidget.dispose();\n  }\n\n  /**\n   * Pin the preview screen if user clicks on tab title\n   */\n  static pinWidget(\n    tabPosition: number,\n    tabBar: TabBar<Widget>,\n    diffWidget: PreviewMainAreaWidget<Panel>\n  ): void {\n    // We need to wait for the tab node to be inserted in the DOM\n    setTimeout(() => {\n      // Get the most recent tab opened\n      const tab =\n        tabPosition >= 0 ? tabBar.contentNode.children[tabPosition] : null;\n      const tabTitle = tab.querySelector<HTMLElement>('.lm-TabBar-tabLabel');\n\n      tabTitle.classList.add('jp-git-tab-mod-preview');\n\n      const onClick = () => {\n        tabTitle.classList.remove('jp-git-tab-mod-preview');\n        tabTitle.removeEventListener('click', onClick, true);\n        if (PreviewMainAreaWidget.previewWidget === diffWidget) {\n          PreviewMainAreaWidget.previewWidget = null;\n        }\n      };\n\n      tabTitle.addEventListener('click', onClick, true);\n      diffWidget.disposed.connect(() => {\n        tabTitle.removeEventListener('click', onClick, true);\n      });\n    }, 0);\n  }\n\n  /**\n   * Callback just after the widget is attached to the DOM\n   */\n  protected onAfterAttach(msg: Message): void {\n    super.onAfterAttach(msg);\n    this.node.addEventListener('click', this._onClick.bind(this), false);\n  }\n\n  /**\n   * Callback just before the widget is detached from the DOM\n   */\n  protected onBeforeDetach(msg: Message): void {\n    this.node.removeEventListener('click', this._onClick.bind(this), false);\n    super.onBeforeAttach(msg);\n  }\n\n  /**\n   * Callback on click event in capture phase\n   */\n  _onClick(): void {\n    PreviewMainAreaWidget.previewWidget = null;\n  }\n}\n"]}