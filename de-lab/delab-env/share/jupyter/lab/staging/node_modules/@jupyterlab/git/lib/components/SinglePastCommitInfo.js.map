{"version":3,"file":"SinglePastCommitInfo.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/SinglePastCommitInfo.tsx"],"names":[],"mappings":"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","sourcesContent":["import { TranslationBundle } from '@jupyterlab/translation';\nimport { CommandRegistry } from '@lumino/commands';\nimport * as React from 'react';\nimport { LoggerContext } from '../logger';\nimport { GitExtension } from '../model';\nimport { discardIcon, rewindIcon } from '../style/icons';\nimport {\n  actionButtonClass,\n  commitBodyClass\n} from '../style/SinglePastCommitInfo';\nimport { Git } from '../tokens';\nimport { ActionButton } from './ActionButton';\nimport { CommitDiff } from './CommitDiff';\nimport { ResetRevertDialog } from './ResetRevertDialog';\n\n/**\n * Interface describing component properties.\n */\nexport interface ISinglePastCommitInfoProps {\n  /**\n   * Commit data.\n   */\n  commit: Git.ISingleCommitInfo;\n\n  /**\n   * Extension data model.\n   */\n  model: GitExtension;\n\n  /**\n   * Jupyter App commands registry\n   */\n  commands: CommandRegistry;\n\n  /**\n   * The application language translator.\n   */\n  trans: TranslationBundle;\n\n  /**\n   * Returns a callback to be invoked on click to display a file diff.\n   *\n   * @param filePath file path\n   * @param isText indicates whether the file supports displaying a diff\n   * @param previousFilePath when file has been relocated\n   * @returns callback\n   */\n  onOpenDiff: (\n    filePath: string,\n    isText: boolean,\n    previousFilePath?: string\n  ) => (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => void;\n}\n\n/**\n * Interface describing component state.\n */\nexport interface ISinglePastCommitInfoState {\n  /**\n   * Commit information.\n   */\n  info: string;\n\n  /**\n   * Commit information.\n   */\n  commitBody: string;\n\n  /**\n   * Number of modified files.\n   */\n  numFiles: string;\n\n  /**\n   * Number of insertions.\n   */\n  insertions: string;\n\n  /**\n   * Number of deletions.\n   */\n  deletions: string;\n\n  /**\n   * A list of modified files.\n   */\n  modifiedFiles: Git.ICommitModifiedFile[];\n\n  /**\n   * Current loading state for loading individual commit information.\n   */\n  loadingState: 'loading' | 'error' | 'success';\n\n  /**\n   * Boolean indicating whether to display a dialog for resetting or reverting a commit.\n   */\n  resetRevertDialog: boolean;\n\n  /**\n   * Reset/revert dialog mode (i.e., whether the dialog should be for resetting to or reverting an individual commit).\n   */\n  resetRevertAction: 'reset' | 'revert';\n}\n\n/**\n * React component for rendering information about an individual commit.\n */\nexport class SinglePastCommitInfo extends React.Component<\n  ISinglePastCommitInfoProps,\n  ISinglePastCommitInfoState\n> {\n  /**\n   * Returns a React component for information about an individual commit.\n   *\n   * @param props - component properties\n   * @returns React component\n   */\n  constructor(props: ISinglePastCommitInfoProps) {\n    super(props);\n    this.state = {\n      info: '',\n      commitBody: '',\n      numFiles: '',\n      insertions: '',\n      deletions: '',\n      modifiedFiles: [],\n      loadingState: 'loading',\n      resetRevertDialog: false,\n      resetRevertAction: 'reset'\n    };\n  }\n\n  /**\n   * Callback invoked immediately after mounting a component (i.e., inserting into a tree).\n   */\n  async componentDidMount(): Promise<void> {\n    try {\n      const log = await this.props.model.detailedLog(this.props.commit.commit);\n\n      this.setState({\n        info: log.modified_file_note,\n        commitBody: log.commit_body,\n        numFiles: log.modified_files_count,\n        insertions: log.number_of_insertions,\n        deletions: log.number_of_deletions,\n        modifiedFiles: log.modified_files,\n        loadingState: 'success'\n      });\n    } catch (err) {\n      console.error(\n        `Error while getting detailed log for commit ${this.props.commit.commit} and path ${this.props.model.pathRepository}`,\n        err\n      );\n      this.setState({ loadingState: 'error' });\n      return;\n    }\n  }\n\n  /**\n   * Renders the component.\n   *\n   * @returns React element\n   */\n  render(): React.ReactElement {\n    if (this.state.loadingState === 'loading') {\n      return <div>â€¦</div>;\n    }\n    if (this.state.loadingState === 'error') {\n      return <div>{this.props.trans.__('Error loading commit data')}</div>;\n    }\n    return (\n      <div>\n        <p className={commitBodyClass}>{this.state.commitBody}</p>\n        <CommitDiff\n          actions={\n            <>\n              <ActionButton\n                className={actionButtonClass}\n                icon={discardIcon}\n                title={this.props.trans.__(\n                  'Revert changes introduced by this commit'\n                )}\n                onClick={this._onRevertClick}\n              />\n              <ActionButton\n                className={actionButtonClass}\n                icon={rewindIcon}\n                title={this.props.trans.__(\n                  'Discard changes introduced *after* this commit (hard reset)'\n                )}\n                onClick={this._onResetClick}\n              />\n              <LoggerContext.Consumer>\n                {logger => (\n                  <ResetRevertDialog\n                    open={this.state.resetRevertDialog}\n                    action={this.state.resetRevertAction}\n                    model={this.props.model}\n                    logger={logger}\n                    commit={this.props.commit}\n                    onClose={this._onResetRevertDialogClose}\n                    trans={this.props.trans}\n                  />\n                )}\n              </LoggerContext.Consumer>\n            </>\n          }\n          numFiles={this.state.numFiles}\n          insertions={this.state.insertions}\n          deletions={this.state.deletions}\n          files={this.state.modifiedFiles}\n          onOpenDiff={this.props.onOpenDiff}\n          trans={this.props.trans}\n        ></CommitDiff>\n      </div>\n    );\n  }\n\n  /**\n   * Callback invoked upon a clicking a button to revert changes.\n   *\n   * @param event - event object\n   */\n  private _onRevertClick = (event: any): void => {\n    event.stopPropagation();\n    this.setState({\n      resetRevertDialog: true,\n      resetRevertAction: 'revert'\n    });\n  };\n\n  /**\n   * Callback invoked upon a clicking a button to reset changes.\n   *\n   * @param event - event object\n   */\n  private _onResetClick = (event: any): void => {\n    event.stopPropagation();\n    this.setState({\n      resetRevertDialog: true,\n      resetRevertAction: 'reset'\n    });\n  };\n\n  /**\n   * Callback invoked upon closing a dialog to reset or revert changes.\n   */\n  private _onResetRevertDialogClose = (): void => {\n    this.setState({\n      resetRevertDialog: false\n    });\n  };\n}\n"]}