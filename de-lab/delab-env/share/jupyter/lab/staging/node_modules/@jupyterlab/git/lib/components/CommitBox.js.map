{"version":3,"file":"CommitBox.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/CommitBox.tsx"],"names":[],"mappings":"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","sourcesContent":["import { TranslationBundle } from '@jupyterlab/translation';\nimport { checkIcon } from '@jupyterlab/ui-components';\nimport { CommandRegistry } from '@lumino/commands';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport * as React from 'react';\nimport { classes } from 'typestyle';\nimport { listItemIconClass } from '../style/BranchMenu';\nimport {\n  commitButtonClass,\n  commitFormClass,\n  commitPaperClass,\n  commitRoot,\n  commitVariantSelector,\n  disabledStyle\n} from '../style/CommitBox';\nimport { verticalMoreIcon } from '../style/icons';\nimport {\n  listItemBoldTitleClass,\n  listItemContentClass,\n  listItemDescClass\n} from '../style/NewBranchDialog';\nimport { CommandIDs } from '../tokens';\nimport { CommitMessage } from './CommitMessage';\n\n/**\n * Commit action\n */\ninterface ICommitVariant {\n  /**\n   * Action title\n   */\n  title: string;\n  /**\n   * Action description\n   */\n  description: string;\n}\n\n/**\n * Interface describing component properties.\n */\nexport interface ICommitBoxProps {\n  /**\n   * Jupyter App commands registry\n   */\n  commands: CommandRegistry;\n\n  /**\n   * Boolean indicating whether files currently exist which have changes to commit.\n   */\n  hasFiles: boolean;\n\n  /**\n   * Commit button label\n   */\n  label: string;\n\n  /**\n   * The application language translator.\n   */\n  trans: TranslationBundle;\n\n  /**\n   * Commit message summary.\n   */\n  summary: string;\n\n  /**\n   * Commit message description.\n   */\n  description: string;\n\n  /**\n   * Whether commit is amending the previous one or not\n   */\n  amend: boolean;\n\n  /**\n   * Warning element to display\n   */\n  warning?: JSX.Element | null;\n\n  /**\n   * Updates the commit message summary.\n   *\n   * @param summary - commit message summary\n   */\n  setSummary: (summary: string) => void;\n\n  /**\n   * Updates the commit message description.\n   *\n   * @param description - commit message description\n   */\n  setDescription: (description: string) => void;\n\n  /**\n   * Updates the amend checkbox state\n   *\n   * @param amend - amend toggle on/off\n   */\n  setAmend: (amend: boolean) => void;\n\n  /**\n   * Callback to invoke in order to commit changes.\n   *\n   * @returns a promise which commits changes\n   */\n  onCommit: () => Promise<void>;\n}\n\n/**\n * CommitBox state\n */\nexport interface ICommitBoxState {\n  /**\n   * Whether the commit variant menu is opened or not.\n   */\n  open: boolean;\n}\n\n/**\n * React component for entering a commit message.\n */\nexport class CommitBox extends React.Component<\n  ICommitBoxProps,\n  ICommitBoxState\n> {\n  /**\n   * Returns a React component for entering a commit message.\n   *\n   * @param props - component properties\n   * @returns React component\n   */\n  constructor(props: ICommitBoxProps) {\n    super(props);\n    this._options.push(\n      {\n        title: this.props.trans.__('Create a new commit'),\n        description: this.props.trans.__(\n          'New commit will be created and show up as a next one after the previous commit (default).'\n        )\n      },\n      {\n        title: this.props.trans.__('Amend previous commit'),\n        description: this.props.trans.__(\n          'Staged changes will be added to the previous commit and its date will be updated.'\n        )\n      }\n    );\n    this._anchorRef = React.createRef<HTMLDivElement>();\n\n    this.state = {\n      open: false\n    };\n  }\n\n  componentDidMount(): void {\n    this.props.commands.commandExecuted.connect(this._handleCommand);\n  }\n\n  componentWillUnmount(): void {\n    this.props.commands.commandExecuted.disconnect(this._handleCommand);\n  }\n\n  /**\n   * Renders the component.\n   *\n   * @returns React element\n   */\n  render(): React.ReactElement {\n    const disabled = !this._canCommit();\n    const title = !this.props.hasFiles\n      ? this.props.trans.__('Disabled: No files are staged for commit')\n      : !this.props.summary && !this.props.amend\n      ? this.props.trans.__('Disabled: No commit message summary')\n      : this.props.label;\n\n    const shortcutHint = CommandRegistry.formatKeystroke(\n      this._getSubmitKeystroke()\n    );\n    const summaryPlaceholder = this.props.trans.__(\n      'Summary (%1 to commit)',\n      shortcutHint\n    );\n\n    return (\n      <div className={classes(commitFormClass, 'jp-git-CommitBox')}>\n        {this.props.warning ?? null}\n        {!this.props.amend && (\n          <CommitMessage\n            error={\n              this.props.hasFiles &&\n              !this.props.amend &&\n              this.props.summary.length === 0\n            }\n            trans={this.props.trans}\n            summary={this.props.summary}\n            summaryPlaceholder={summaryPlaceholder}\n            description={this.props.description}\n            setSummary={this.props.setSummary}\n            setDescription={this.props.setDescription}\n          />\n        )}\n        <ButtonGroup ref={this._anchorRef} fullWidth={true} size=\"small\">\n          <Button\n            classes={{\n              root: commitButtonClass,\n              disabled: disabledStyle\n            }}\n            title={title}\n            disabled={disabled}\n            onClick={this.props.onCommit}\n          >\n            {this.props.label}\n          </Button>\n          <Button\n            classes={{\n              root: commitButtonClass\n            }}\n            className={commitVariantSelector}\n            size=\"small\"\n            aria-controls={this.state.open ? 'split-button-menu' : undefined}\n            aria-expanded={this.state.open ? 'true' : undefined}\n            aria-label=\"select commit variant\"\n            aria-haspopup=\"menu\"\n            onClick={this._handleToggle}\n          >\n            <verticalMoreIcon.react tag=\"span\" />\n          </Button>\n        </ButtonGroup>\n        <Popper\n          open={this.state.open}\n          anchorEl={this._anchorRef.current}\n          role={undefined}\n          transition\n          disablePortal\n        >\n          {({ TransitionProps }) => (\n            <Grow {...TransitionProps}>\n              <Paper\n                classes={{ root: commitRoot }}\n                className={commitPaperClass}\n              >\n                <ClickAwayListener onClickAway={this._handleClose}>\n                  <MenuList id=\"split-button-menu\">\n                    {this._options.map((option, index) => (\n                      <MenuItem\n                        key={option.title}\n                        classes={{ root: commitRoot }}\n                        selected={this.props.amend ? index === 1 : index === 0}\n                        onClick={event =>\n                          this._handleMenuItemClick(event, index)\n                        }\n                      >\n                        {(this.props.amend ? index === 1 : index === 0) ? (\n                          <checkIcon.react\n                            className={listItemIconClass}\n                            tag=\"span\"\n                          />\n                        ) : (\n                          <span className={listItemIconClass} />\n                        )}\n                        <div className={listItemContentClass}>\n                          <p className={listItemBoldTitleClass}>\n                            {option.title}\n                          </p>\n                          <p className={listItemDescClass}>\n                            {option.description}\n                          </p>\n                        </div>\n                      </MenuItem>\n                    ))}\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n    );\n  }\n\n  /**\n   * Whether a commit can be performed (files are staged and summary is not empty).\n   */\n  private _canCommit(): boolean {\n    if (this.props.amend) {\n      return this.props.hasFiles;\n    }\n    return !!(this.props.hasFiles && this.props.summary);\n  }\n\n  /**\n   * Get keystroke configured to act as a submit action.\n   */\n  private _getSubmitKeystroke = (): string => {\n    const binding = this.props.commands.keyBindings.find(\n      binding => binding.command === CommandIDs.gitSubmitCommand\n    );\n    return binding.keys.join(' ');\n  };\n\n  /**\n   * Close the commit variant menu if needed.\n   */\n  private _handleClose = (\n    event: React.MouseEvent<Document, MouseEvent>\n  ): void => {\n    if (\n      this._anchorRef.current &&\n      this._anchorRef.current.contains(event.target as HTMLElement)\n    ) {\n      return;\n    }\n\n    this.setState({ open: false });\n  };\n\n  /**\n   * Handle commit variant menu item click\n   */\n  private _handleMenuItemClick = (\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>,\n    index: number\n  ): void => {\n    this.setState({\n      open: false\n    });\n    this.props.setAmend(index === 1);\n  };\n\n  /**\n   * Toggle state of the commit variant menu visibility\n   */\n  private _handleToggle = (): void => {\n    this.setState({ open: !this.state.open });\n  };\n\n  /**\n   * Callback invoked upon command execution activated when entering a commit message description.\n   *\n   * ## Notes\n   *\n   * -   Triggers the `'submit'` action on appropriate command (and if commit is possible)\n   *\n   */\n  private _handleCommand = (\n    _: CommandRegistry,\n    commandArgs: CommandRegistry.ICommandExecutedArgs\n  ): void => {\n    if (commandArgs.id === CommandIDs.gitSubmitCommand && this._canCommit()) {\n      this.props.onCommit();\n    }\n  };\n\n  private _anchorRef: React.RefObject<HTMLDivElement>;\n  private _options: ICommitVariant[] = [];\n}\n"]}