{"version":3,"file":"discardAllChanges.js","sourceRoot":"./@jupyterlab/git/src/","sources":["widgets/discardAllChanges.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AAI5E;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,KAAoB,EACpB,KAAwB,EACxB,UAAoB;IAEpB,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC;QAC9B,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,qBAAqB,CAAC;QACtC,IAAI,EAAE,UAAU;YACd,CAAC,CAAC,KAAK,CAAC,EAAE,CACN,yIAAyI,CAC1I;YACH,CAAC,CAAC,KAAK,CAAC,EAAE,CACN,kGAAkG,CACnG;QACL,OAAO,EAAE;YACP,MAAM,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;YAClD,MAAM,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC;SAClD;KACF,CAAC,CAAC;IAEH,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;QACxB,IAAI;YACF,OAAO,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;SACpC;QAAC,OAAO,MAAM,EAAE;YACf,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,6BAA6B,CAAC,EAAE,MAAM,CAAC,CAAC;YAClE,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC/B;KACF;IAED,OAAO,OAAO,CAAC,MAAM,CAAC;QACpB,SAAS,EAAE,IAAI;QACf,OAAO,EAAE,yCAAyC;KACnD,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { showDialog, Dialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { TranslationBundle } from '@jupyterlab/translation';\nimport { IGitExtension } from '../tokens';\n\n/**\n * Discard changes in all unstaged and staged files\n *\n * @param isFallback If dialog is called when the classical pull operation fails\n */\nexport async function discardAllChanges(\n  model: IGitExtension,\n  trans: TranslationBundle,\n  isFallback?: boolean\n): Promise<void> {\n  const result = await showDialog({\n    title: trans.__('Discard all changes'),\n    body: isFallback\n      ? trans.__(\n          'Your current changes forbid pulling the latest changes. Do you want to permanently discard those changes? This action cannot be undone.'\n        )\n      : trans.__(\n          'Are you sure you want to permanently discard changes to all files? This action cannot be undone.'\n        ),\n    buttons: [\n      Dialog.cancelButton({ label: trans.__('Cancel') }),\n      Dialog.warnButton({ label: trans.__('Discard') })\n    ]\n  });\n\n  if (result.button.accept) {\n    try {\n      return model.resetToCommit('HEAD');\n    } catch (reason) {\n      showErrorMessage(trans.__('Discard all changes failed.'), reason);\n      return Promise.reject(reason);\n    }\n  }\n\n  return Promise.reject({\n    cancelled: true,\n    message: 'The user refused to discard all changes'\n  });\n}\n"]}