{"version":3,"file":"CommitMessage.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/CommitMessage.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,MAAM,yBAAyB,CAAC;AAC5C,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,WAAW,EACX,sBAAsB,EACtB,UAAU,EACV,kBAAkB,EAClB,aAAa,EACd,MAAM,oBAAoB,CAAC;AAwD5B;;GAEG;AACH,MAAM,UAAU,aAAa,CAAC,KAA0B;;IACtD,MAAM,kBAAkB,SACtB,KAAK,CAAC,kBAAkB,mCAAI,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IAExD;;;;OAIG;IACH,SAAS,mBAAmB,CAAC,KAAU;QACrC,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACH,SAAS,eAAe,CAAC,KAAU;QACjC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAED;;;;;;;;OAQG;IACH,SAAS,iBAAiB,CAAC,KAA0B;QACnD,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,EAAE;YACzB,KAAK,CAAC,cAAc,EAAE,CAAC;SACxB;IACH,CAAC;IAED,OAAO,CACL,oBAAC,KAAK,CAAC,QAAQ;QACb,oBAAC,KAAK,IACJ,SAAS,EAAE,kBAAkB,EAC7B,OAAO,EAAE;gBACP,IAAI,EAAE,UAAU;gBAChB,OAAO,EAAE,WAAW;gBACpB,QAAQ,EAAE,aAAa;aACxB,EACD,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,IAAI,EAAC,MAAM,EACX,WAAW,EAAE,kBAAkB,EAC/B,KAAK,EACH,KAAK,CAAC,QAAQ;gBACZ,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CACZ,6DAA6D,CAC9D;gBACH,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CACZ,oFAAoF,CACrF,EAEP,KAAK,EAAE,KAAK,CAAC,OAAO,EACpB,QAAQ,EAAE,eAAe,EACzB,UAAU,EAAE,iBAAiB,EAC7B,QAAQ,QAAE,KAAK,CAAC,QAAQ,mCAAI,KAAK,EACjC,gBAAgB,EAAE,IAAI,EACtB,SAAS,EAAE,IAAI,GACf;QACF,oBAAC,KAAK,IACJ,SAAS,EAAE,sBAAsB,EACjC,OAAO,EAAE;gBACP,IAAI,EAAE,UAAU;gBAChB,OAAO,EAAE,WAAW;gBACpB,QAAQ,EAAE,aAAa;aACxB,EACD,SAAS,QACT,OAAO,EAAE,CAAC,EACV,OAAO,EAAE,EAAE,EACX,WAAW,QACT,KAAK,CAAC,sBAAsB,mCAC5B,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,wBAAwB,CAAC,EAE1C,KAAK,EACH,KAAK,CAAC,QAAQ;gBACZ,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CACZ,6DAA6D,CAC9D;gBACH,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,oCAAoC,CAAC,EAE1D,KAAK,EAAE,KAAK,CAAC,WAAW,EACxB,QAAQ,EAAE,mBAAmB,EAC7B,QAAQ,QAAE,KAAK,CAAC,QAAQ,mCAAI,KAAK,EACjC,gBAAgB,EAAE,IAAI,EACtB,SAAS,EAAE,IAAI,GACf,CACa,CAClB,CAAC;AACJ,CAAC","sourcesContent":["import { TranslationBundle } from '@jupyterlab/translation';\nimport Input from '@material-ui/core/Input';\nimport * as React from 'react';\nimport {\n  activeStyle,\n  commitDescriptionClass,\n  commitRoot,\n  commitSummaryClass,\n  disabledStyle\n} from '../style/CommitBox';\n\n/**\n * CommitMessage properties\n */\nexport interface ICommitMessageProps {\n  /**\n   * Commit message description.\n   */\n  description: string;\n\n  /**\n   * Commit message description placeholder.\n   */\n  descriptionPlaceholder?: string;\n\n  /**\n   * Whether the commit message can be edited or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Mark summary input as erroneous\n   */\n  error?: boolean;\n\n  /**\n   * Updates the commit message summary.\n   *\n   * @param summary - commit message summary\n   */\n  setSummary: (summary: string) => void;\n\n  /**\n   * Updates the commit message description.\n   *\n   * @param description - commit message description\n   */\n  setDescription: (description: string) => void;\n\n  /**\n   * Commit message summary.\n   */\n  summary: string;\n\n  /**\n   * Commit message summary placeholder.\n   */\n  summaryPlaceholder?: string;\n\n  /**\n   * The application language translator.\n   */\n  trans: TranslationBundle;\n}\n\n/**\n * Commit message component\n */\nexport function CommitMessage(props: ICommitMessageProps): JSX.Element {\n  const summaryPlaceholder =\n    props.summaryPlaceholder ?? props.trans.__('Summary');\n\n  /**\n   * Callback invoked upon updating a commit message description.\n   *\n   * @param event - event object\n   */\n  function onDescriptionChange(event: any): void {\n    props.setDescription(event.target.value);\n  }\n\n  /**\n   * Callback invoked upon updating a commit message summary.\n   *\n   * @param event - event object\n   */\n  function onSummaryChange(event: any): void {\n    props.setSummary(event.target.value);\n  }\n\n  /**\n   * Callback invoked upon a `'keypress'` event when entering a commit message summary.\n   *\n   * ## Notes\n   *\n   * -   Prevents triggering a `'submit'` action when hitting the `ENTER` key while entering a commit message summary.\n   *\n   * @param event - event object\n   */\n  function onSummaryKeyPress(event: React.KeyboardEvent): void {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Input\n        className={commitSummaryClass}\n        classes={{\n          root: commitRoot,\n          focused: activeStyle,\n          disabled: disabledStyle\n        }}\n        error={props.error}\n        type=\"text\"\n        placeholder={summaryPlaceholder}\n        title={\n          props.disabled\n            ? props.trans.__(\n                'Amending the commit will re-use the previous commit summary'\n              )\n            : props.trans.__(\n                'Enter a commit message summary (a single line, preferably less than 50 characters)'\n              )\n        }\n        value={props.summary}\n        onChange={onSummaryChange}\n        onKeyPress={onSummaryKeyPress}\n        disabled={props.disabled ?? false}\n        disableUnderline={true}\n        fullWidth={true}\n      />\n      <Input\n        className={commitDescriptionClass}\n        classes={{\n          root: commitRoot,\n          focused: activeStyle,\n          disabled: disabledStyle\n        }}\n        multiline\n        minRows={5}\n        maxRows={10}\n        placeholder={\n          props.descriptionPlaceholder ??\n          props.trans.__('Description (optional)')\n        }\n        title={\n          props.disabled\n            ? props.trans.__(\n                'Amending the commit will re-use the previous commit summary'\n              )\n            : props.trans.__('Enter a commit message description')\n        }\n        value={props.description}\n        onChange={onDescriptionChange}\n        disabled={props.disabled ?? false}\n        disableUnderline={true}\n        fullWidth={true}\n      />\n    </React.Fragment>\n  );\n}\n"]}