{"version":3,"file":"PastCommitNode.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/PastCommitNode.tsx"],"names":[],"mappings":"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","sourcesContent":["import { TranslationBundle } from '@jupyterlab/translation';\nimport { caretDownIcon, caretUpIcon } from '@jupyterlab/ui-components';\nimport { CommandRegistry } from '@lumino/commands';\nimport * as React from 'react';\nimport { classes } from 'typestyle';\nimport { GitExtension } from '../model';\nimport {\n  compareWithSelectedIcon,\n  diffIcon,\n  selectForCompareIcon\n} from '../style/icons';\nimport {\n  branchClass,\n  branchWrapperClass,\n  commitBodyClass,\n  referenceCommitNodeClass,\n  challengerCommitNodeClass,\n  commitExpandedClass,\n  commitHeaderClass,\n  commitHeaderItemClass,\n  commitWrapperClass,\n  iconButtonClass,\n  localBranchClass,\n  remoteBranchClass,\n  singleFileCommitClass,\n  workingBranchClass\n} from '../style/PastCommitNode';\nimport { Git } from '../tokens';\nimport { ActionButton } from './ActionButton';\n\n/**\n * Interface describing component properties.\n */\nexport interface IPastCommitNodeProps {\n  /**\n   * Commit data.\n   */\n  commit: Git.ISingleCommitInfo;\n\n  /**\n   * List of branches.\n   */\n  branches: Git.IBranch[];\n\n  /**\n   * Extension data model.\n   */\n  model: GitExtension;\n\n  /**\n   * Jupyter App commands registry\n   */\n  commands: CommandRegistry;\n\n  /**\n   * The application language translator.\n   */\n  trans: TranslationBundle;\n\n  /**\n   * The commit to compare against.\n   */\n  isReferenceCommit?: boolean;\n\n  /**\n   * The commit to compare.\n   */\n  isChallengerCommit?: boolean;\n\n  /**\n   * Callback invoked upon clicking to display a file diff.\n   *\n   * @param event - event object\n   */\n  onOpenDiff?: (\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>\n  ) => Promise<void>;\n\n  /**\n   * Callback invoked upon clicking to select a commit for comparison.\n   *\n   * If the callback is null, the button will be disabled.\n   *\n   * @param event - event object\n   */\n  onSelectForCompare:\n    | ((event: React.MouseEvent<HTMLElement, MouseEvent>) => Promise<void>)\n    | null;\n\n  /**\n   * Callback invoked upon clicking to compare a commit against the selected.\n   *\n   * If the callback is null, the button will be disabled.\n   *\n   * @param event - event object\n   */\n  onCompareWithSelected:\n    | ((event: React.MouseEvent<HTMLElement, MouseEvent>) => Promise<void>)\n    | null;\n  /**\n   * Whether the PastCommitNode is expanded\n   */\n  expanded: boolean;\n  /**\n   * Callback to toggle expansion of the PastCommitNode\n   *\n   * @param sha the sha of the commit\n   */\n  toggleCommitExpansion: (sha: string) => void;\n  /**\n   * Callback to store a reference of the rendered <li> element in HistorySideBar\n   *\n   * @param el the <li> element representing a past commit\n   */\n  setRef: (el: HTMLLIElement) => void;\n}\n\n/**\n * React component for rendering an individual commit.\n */\nexport class PastCommitNode extends React.Component<\n  React.PropsWithChildren<IPastCommitNodeProps>\n> {\n  /**\n   * Returns a React component for rendering an individual commit.\n   *\n   * @param props - component properties\n   * @returns React component\n   */\n  constructor(props: React.PropsWithChildren<IPastCommitNodeProps>) {\n    super(props);\n  }\n\n  /**\n   * Renders the component.\n   *\n   * @returns React element\n   */\n  render(): React.ReactElement {\n    return (\n      <li\n        id={this.props.commit.commit}\n        ref={el => this.props.setRef(el)}\n        className={classes(\n          commitWrapperClass,\n          !this.props.children && !!this.props.onOpenDiff\n            ? singleFileCommitClass\n            : this.props.expanded\n            ? commitExpandedClass\n            : null,\n          this.props.isReferenceCommit && referenceCommitNodeClass,\n          this.props.isChallengerCommit && challengerCommitNodeClass\n        )}\n        title={\n          this.props.children\n            ? this.props.trans.__('View commit details')\n            : this.props.trans.__('View file changes')\n        }\n        onClick={event => this._onCommitClick(event, this.props.commit.commit)}\n      >\n        <div className={commitHeaderClass}>\n          <span className={commitHeaderItemClass}>\n            {this.props.commit.author}\n          </span>\n          <span className={commitHeaderItemClass}>\n            {+this.props.commit.commit in Git.Diff.SpecialRef\n              ? Git.Diff.SpecialRef[+this.props.commit.commit]\n              : this.props.commit.commit.slice(0, 7)}\n          </span>\n          <span className={commitHeaderItemClass}>\n            {this.props.commit.date}\n          </span>\n          {!this.props.commit.is_binary && (\n            <React.Fragment>\n              <ActionButton\n                className={iconButtonClass}\n                disabled={this.props.onSelectForCompare === null}\n                icon={selectForCompareIcon}\n                title={this.props.trans.__('Select for compare')}\n                onClick={this.props.onSelectForCompare}\n              />\n              <ActionButton\n                className={iconButtonClass}\n                disabled={this.props.onCompareWithSelected === null}\n                icon={compareWithSelectedIcon}\n                title={this.props.trans.__('Compare with selected')}\n                onClick={this.props.onCompareWithSelected}\n              />\n            </React.Fragment>\n          )}\n          {this.props.children ? (\n            this.props.expanded ? (\n              <caretUpIcon.react className={iconButtonClass} tag=\"span\" />\n            ) : (\n              <caretDownIcon.react className={iconButtonClass} tag=\"span\" />\n            )\n          ) : (\n            <diffIcon.react className={iconButtonClass} tag=\"span\" />\n          )}\n        </div>\n        <div className={branchWrapperClass}>{this._renderBranches()}</div>\n        <div className={commitBodyClass}>\n          {this.props.commit.commit_msg}\n          {this.props.expanded && this.props.children}\n        </div>\n      </li>\n    );\n  }\n\n  /**\n   * Renders branch information.\n   *\n   * @returns array of React elements\n   */\n  private _renderBranches(): React.ReactElement[] {\n    const curr = this.props.commit.commit;\n    const branches: Git.IBranch[] = [];\n    for (let i = 0; i < this.props.branches.length; i++) {\n      const branch = this.props.branches[i];\n      if (branch.top_commit && branch.top_commit === curr) {\n        branches.push(branch);\n      }\n    }\n    return branches.map(this._renderBranch, this);\n  }\n\n  /**\n   * Renders individual branch data.\n   *\n   * @param branch - branch data\n   * @returns React element\n   */\n  private _renderBranch(branch: Git.IBranch): React.ReactElement {\n    return (\n      <React.Fragment key={branch.name}>\n        {branch.is_current_branch && (\n          <span className={classes(branchClass, workingBranchClass)}>\n            working\n          </span>\n        )}\n        <span\n          className={classes(\n            branchClass,\n            branch.is_remote_branch ? remoteBranchClass : localBranchClass\n          )}\n        >\n          {branch.name}\n        </span>\n      </React.Fragment>\n    );\n  }\n\n  /**\n   * Callback invoked upon clicking on an individual commit.\n   *\n   * @param event - event object\n   */\n  private _onCommitClick = (\n    event: React.MouseEvent<HTMLLIElement, MouseEvent>,\n    sha: string\n  ): void => {\n    if (this.props.children) {\n      this.props.toggleCommitExpansion(sha);\n    } else {\n      this.props.onOpenDiff?.call(this, event);\n    }\n  };\n}\n"]}