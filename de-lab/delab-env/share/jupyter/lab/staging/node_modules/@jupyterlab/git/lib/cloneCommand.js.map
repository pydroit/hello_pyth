{"version":3,"file":"cloneCommand.js","sourceRoot":"./@jupyterlab/git/src/","sources":["cloneCommand.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { CommandIDs, IGitExtension, Level } from './tokens';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { GitCloneForm } from './widgets/GitCloneForm';\nimport { logger } from './logger';\nimport {\n  addFileBrowserContextMenu,\n  IGitCloneArgs,\n  Operation,\n  showGitOperationDialog\n} from './commandsAndMenu';\nimport { GitExtension } from './model';\nimport { addCloneButton } from './widgets/gitClone';\n\nexport const gitCloneCommandPlugin: JupyterFrontEndPlugin<void> = {\n  id: '@jupyterlab/git:clone',\n  requires: [ITranslator, IGitExtension, IFileBrowserFactory],\n  activate: (\n    app: JupyterFrontEnd,\n    translator: ITranslator,\n    gitModel: IGitExtension,\n    fileBrowserFactory: IFileBrowserFactory\n  ) => {\n    translator = translator || nullTranslator;\n    const trans = translator.load('jupyterlab_git');\n    const fileBrowser = fileBrowserFactory.defaultBrowser;\n    const fileBrowserModel = fileBrowser.model;\n    /** Add git clone command */\n    app.commands.addCommand(CommandIDs.gitClone, {\n      label: trans.__('Clone a Repository'),\n      caption: trans.__('Clone a repository from a URL'),\n      isEnabled: () => gitModel.pathRepository === null,\n      execute: async () => {\n        const result = await showDialog({\n          title: trans.__('Clone a repo'),\n          body: new GitCloneForm(trans),\n          focusNodeSelector: 'input',\n          buttons: [\n            Dialog.cancelButton({ label: trans.__('Cancel') }),\n            Dialog.okButton({ label: trans.__('Clone') })\n          ]\n        });\n\n        if (result.button.accept && result.value.url) {\n          logger.log({\n            level: Level.RUNNING,\n            message: trans.__('Cloningâ€¦')\n          });\n          try {\n            const details = await showGitOperationDialog<IGitCloneArgs>(\n              gitModel as GitExtension,\n              Operation.Clone,\n              trans,\n              {\n                path: fileBrowserModel.path,\n                url: result.value.url,\n                versioning: result.value.versioning,\n                submodules: result.value.submodules\n              }\n            );\n            logger.log({\n              message: trans.__('Successfully cloned'),\n              level: Level.SUCCESS,\n              details\n            });\n            await fileBrowserModel.refresh();\n          } catch (error) {\n            console.error(\n              'Encountered an error when cloning the repository. Error: ',\n              error\n            );\n            logger.log({\n              message: trans.__('Failed to clone'),\n              level: Level.ERROR,\n              error: error as Error\n            });\n          }\n        }\n      }\n    });\n    // Add a clone button to the file browser extension toolbar\n    addCloneButton(gitModel, fileBrowser, app.commands, trans);\n\n    // Add the context menu items for the default file browser\n    addFileBrowserContextMenu(gitModel, fileBrowser, app.contextMenu, trans);\n  },\n  autoStart: true\n};\n"]}